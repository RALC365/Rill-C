/* The following code was generated by JFlex 1.4.3 on 09-19-20 05:44 PM */

package LexerS;
//Clase numeracion donde incluiremos los numeros de todos los tokens
import static Main.Tokens.*;
import Main.Tokens;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 09-19-20 05:44 PM from the specification file
 * <tt>./src/LexerS/Lexer.flex</tt>
 */
public class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\55\1\16\1\15\1\0\1\16\1\14\16\55\4\0\1\16\1\41"+
    "\1\11\1\0\1\54\1\47\1\0\1\12\1\4\1\3\1\46\1\44"+
    "\1\6\1\45\1\5\1\46\1\56\11\57\1\2\1\0\1\43\1\40"+
    "\1\42\2\0\5\54\1\51\15\54\1\52\6\54\1\7\1\13\1\10"+
    "\1\0\1\54\1\0\1\20\1\24\1\27\1\53\1\36\1\32\1\60"+
    "\1\30\1\21\2\54\1\26\1\17\1\22\1\50\1\34\1\54\1\31"+
    "\1\37\1\25\1\33\1\23\1\35\3\54\1\0\1\1\2\0\41\55"+
    "\2\0\4\54\4\0\1\54\2\0\1\55\7\0\1\54\4\0\1\54"+
    "\5\0\27\54\1\0\37\54\1\0\u01ca\54\4\0\14\54\16\0\5\54"+
    "\7\0\1\54\1\0\1\54\21\0\160\55\5\54\1\0\2\54\2\0"+
    "\4\54\10\0\1\54\1\0\3\54\1\0\1\54\1\0\24\54\1\0"+
    "\123\54\1\0\213\54\1\0\5\55\2\0\236\54\11\0\46\54\2\0"+
    "\1\54\7\0\47\54\7\0\1\54\1\0\55\55\1\0\1\55\1\0"+
    "\2\55\1\0\2\55\1\0\1\55\10\0\33\54\5\0\3\54\15\0"+
    "\5\55\6\0\1\54\4\0\13\55\5\0\53\54\37\55\4\0\2\54"+
    "\1\55\143\54\1\0\1\54\10\55\1\0\6\55\2\54\2\55\1\0"+
    "\4\55\2\54\12\55\3\54\2\0\1\54\17\0\1\55\1\54\1\55"+
    "\36\54\33\55\2\0\131\54\13\55\1\54\16\0\12\55\41\54\11\55"+
    "\2\54\4\0\1\54\5\0\26\54\4\55\1\54\11\55\1\54\3\55"+
    "\1\54\5\55\22\0\31\54\3\55\104\0\1\54\1\0\13\54\67\0"+
    "\33\55\1\0\4\55\66\54\3\55\1\54\22\55\1\54\7\55\12\54"+
    "\2\55\2\0\12\55\1\0\7\54\1\0\7\54\1\0\3\55\1\0"+
    "\10\54\2\0\2\54\2\0\26\54\1\0\7\54\1\0\1\54\3\0"+
    "\4\54\2\0\1\55\1\54\7\55\2\0\2\55\2\0\3\55\1\54"+
    "\10\0\1\55\4\0\2\54\1\0\3\54\2\55\2\0\12\55\4\54"+
    "\7\0\1\54\5\0\3\55\1\0\6\54\4\0\2\54\2\0\26\54"+
    "\1\0\7\54\1\0\2\54\1\0\2\54\1\0\2\54\2\0\1\55"+
    "\1\0\5\55\4\0\2\55\2\0\3\55\3\0\1\55\7\0\4\54"+
    "\1\0\1\54\7\0\14\55\3\54\1\55\13\0\3\55\1\0\11\54"+
    "\1\0\3\54\1\0\26\54\1\0\7\54\1\0\2\54\1\0\5\54"+
    "\2\0\1\55\1\54\10\55\1\0\3\55\1\0\3\55\2\0\1\54"+
    "\17\0\2\54\2\55\2\0\12\55\1\0\1\54\17\0\3\55\1\0"+
    "\10\54\2\0\2\54\2\0\26\54\1\0\7\54\1\0\2\54\1\0"+
    "\5\54\2\0\1\55\1\54\7\55\2\0\2\55\2\0\3\55\10\0"+
    "\2\55\4\0\2\54\1\0\3\54\2\55\2\0\12\55\1\0\1\54"+
    "\20\0\1\55\1\54\1\0\6\54\3\0\3\54\1\0\4\54\3\0"+
    "\2\54\1\0\1\54\1\0\2\54\3\0\2\54\3\0\3\54\3\0"+
    "\14\54\4\0\5\55\3\0\3\55\1\0\4\55\2\0\1\54\6\0"+
    "\1\55\16\0\12\55\11\0\1\54\7\0\3\55\1\0\10\54\1\0"+
    "\3\54\1\0\27\54\1\0\12\54\1\0\5\54\3\0\1\54\7\55"+
    "\1\0\3\55\1\0\4\55\7\0\2\55\1\0\2\54\6\0\2\54"+
    "\2\55\2\0\12\55\22\0\2\55\1\0\10\54\1\0\3\54\1\0"+
    "\27\54\1\0\12\54\1\0\5\54\2\0\1\55\1\54\7\55\1\0"+
    "\3\55\1\0\4\55\7\0\2\55\7\0\1\54\1\0\2\54\2\55"+
    "\2\0\12\55\1\0\2\54\17\0\2\55\1\0\10\54\1\0\3\54"+
    "\1\0\51\54\2\0\1\54\7\55\1\0\3\55\1\0\4\55\1\54"+
    "\10\0\1\55\10\0\2\54\2\55\2\0\12\55\12\0\6\54\2\0"+
    "\2\55\1\0\22\54\3\0\30\54\1\0\11\54\1\0\1\54\2\0"+
    "\7\54\3\0\1\55\4\0\6\55\1\0\1\55\1\0\10\55\22\0"+
    "\2\55\15\0\60\54\1\55\2\54\7\55\4\0\10\54\10\55\1\0"+
    "\12\55\47\0\2\54\1\0\1\54\2\0\2\54\1\0\1\54\2\0"+
    "\1\54\6\0\4\54\1\0\7\54\1\0\3\54\1\0\1\54\1\0"+
    "\1\54\2\0\2\54\1\0\4\54\1\55\2\54\6\55\1\0\2\55"+
    "\1\54\2\0\5\54\1\0\1\54\1\0\6\55\2\0\12\55\2\0"+
    "\4\54\40\0\1\54\27\0\2\55\6\0\12\55\13\0\1\55\1\0"+
    "\1\55\1\0\1\55\4\0\2\55\10\54\1\0\44\54\4\0\24\55"+
    "\1\0\2\55\5\54\13\55\1\0\44\55\11\0\1\55\71\0\53\54"+
    "\24\55\1\54\12\55\6\0\6\54\4\55\4\54\3\55\1\54\3\55"+
    "\2\54\7\55\3\54\4\55\15\54\14\55\1\54\17\55\2\0\46\54"+
    "\1\0\1\54\5\0\1\54\2\0\53\54\1\0\u014d\54\1\0\4\54"+
    "\2\0\7\54\1\0\1\54\1\0\4\54\2\0\51\54\1\0\4\54"+
    "\2\0\41\54\1\0\4\54\2\0\7\54\1\0\1\54\1\0\4\54"+
    "\2\0\17\54\1\0\71\54\1\0\4\54\2\0\103\54\2\0\3\55"+
    "\40\0\20\54\20\0\125\54\14\0\u026c\54\2\0\21\54\1\0\32\54"+
    "\5\0\113\54\3\0\3\54\17\0\15\54\1\0\4\54\3\55\13\0"+
    "\22\54\3\55\13\0\22\54\2\55\14\0\15\54\1\0\3\54\1\0"+
    "\2\55\14\0\64\54\40\55\3\0\1\54\3\0\2\54\1\55\2\0"+
    "\12\55\41\0\3\55\2\0\12\55\6\0\130\54\10\0\51\54\1\55"+
    "\1\54\5\0\106\54\12\0\35\54\3\0\14\55\4\0\14\55\12\0"+
    "\12\55\36\54\2\0\5\54\13\0\54\54\4\0\21\55\7\54\2\55"+
    "\6\0\12\55\46\0\27\54\5\55\4\0\65\54\12\55\1\0\35\55"+
    "\2\0\13\55\6\0\12\55\15\0\1\54\130\0\5\55\57\54\21\55"+
    "\7\54\4\0\12\55\21\0\11\55\14\0\3\55\36\54\15\55\2\54"+
    "\12\55\54\54\16\55\14\0\44\54\24\55\10\0\12\55\3\0\3\54"+
    "\12\55\44\54\122\0\3\55\1\0\25\55\4\54\1\55\4\54\3\55"+
    "\2\54\11\0\300\54\47\55\25\0\4\55\u0116\54\2\0\6\54\2\0"+
    "\46\54\2\0\6\54\2\0\10\54\1\0\1\54\1\0\1\54\1\0"+
    "\1\54\1\0\37\54\2\0\65\54\1\0\7\54\1\0\1\54\3\0"+
    "\3\54\1\0\7\54\3\0\4\54\2\0\6\54\4\0\15\54\5\0"+
    "\3\54\1\0\7\54\16\0\5\55\32\0\5\55\20\0\2\54\23\0"+
    "\1\54\13\0\5\55\5\0\6\55\1\0\1\54\15\0\1\54\20\0"+
    "\15\54\3\0\33\54\25\0\15\55\4\0\1\55\3\0\14\55\21\0"+
    "\1\54\4\0\1\54\2\0\12\54\1\0\1\54\3\0\5\54\6\0"+
    "\1\54\1\0\1\54\1\0\1\54\1\0\4\54\1\0\13\54\2\0"+
    "\4\54\5\0\5\54\4\0\1\54\21\0\51\54\u0a77\0\57\54\1\0"+
    "\57\54\1\0\205\54\6\0\4\54\3\55\2\54\14\0\46\54\1\0"+
    "\1\54\5\0\1\54\2\0\70\54\7\0\1\54\17\0\1\55\27\54"+
    "\11\0\7\54\1\0\7\54\1\0\7\54\1\0\7\54\1\0\7\54"+
    "\1\0\7\54\1\0\7\54\1\0\7\54\1\0\40\55\57\0\1\54"+
    "\u01d5\0\3\54\31\0\11\54\6\55\1\0\5\54\2\0\5\54\4\0"+
    "\126\54\2\0\2\55\2\0\3\54\1\0\132\54\1\0\4\54\5\0"+
    "\51\54\3\0\136\54\21\0\33\54\65\0\20\54\u0200\0\u19b6\54\112\0"+
    "\u51cd\54\63\0\u048d\54\103\0\56\54\2\0\u010d\54\3\0\20\54\12\55"+
    "\2\54\24\0\57\54\1\55\4\0\12\55\1\0\31\54\7\0\1\55"+
    "\120\54\2\55\45\0\11\54\2\0\147\54\2\0\4\54\1\0\4\54"+
    "\14\0\13\54\115\0\12\54\1\55\3\54\1\55\4\54\1\55\27\54"+
    "\5\55\20\0\1\54\7\0\64\54\14\0\2\55\62\54\21\55\13\0"+
    "\12\55\6\0\22\55\6\54\3\0\1\54\4\0\12\55\34\54\10\55"+
    "\2\0\27\54\15\55\14\0\35\54\3\0\4\55\57\54\16\55\16\0"+
    "\1\54\12\55\46\0\51\54\16\55\11\0\3\54\1\55\10\54\2\55"+
    "\2\0\12\55\6\0\27\54\3\0\1\54\1\55\4\0\60\54\1\55"+
    "\1\54\3\55\2\54\2\55\5\54\2\55\1\54\1\55\1\54\30\0"+
    "\3\54\2\0\13\54\5\55\2\0\3\54\2\55\12\0\6\54\2\0"+
    "\6\54\2\0\6\54\11\0\7\54\1\0\7\54\221\0\43\54\10\55"+
    "\1\0\2\55\2\0\12\55\6\0\u2ba4\54\14\0\27\54\4\0\61\54"+
    "\u2104\0\u016e\54\2\0\152\54\46\0\7\54\14\0\5\54\5\0\1\54"+
    "\1\55\12\54\1\0\15\54\1\0\5\54\1\0\1\54\1\0\2\54"+
    "\1\0\2\54\1\0\154\54\41\0\u016b\54\22\0\100\54\2\0\66\54"+
    "\50\0\15\54\3\0\20\55\20\0\7\55\14\0\2\54\30\0\3\54"+
    "\31\0\1\54\6\0\5\54\1\0\207\54\2\0\1\55\4\0\1\54"+
    "\13\0\12\55\7\0\32\54\4\0\1\54\1\0\32\54\13\0\131\54"+
    "\3\0\6\54\2\0\6\54\2\0\6\54\2\0\3\54\3\0\2\54"+
    "\3\0\2\54\22\0\3\55\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\2\1\1\2\1\3\1\4\1\1\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\2\13\15\14\1\15\1\1"+
    "\1\16\2\17\1\20\1\21\3\14\2\22\1\0\1\23"+
    "\1\24\5\14\1\25\1\26\1\14\1\27\2\14\1\30"+
    "\1\14\1\31\1\32\1\14\1\33\1\34\1\35\1\27"+
    "\1\36\1\37\3\14\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\2\14\1\51\1\14\1\52"+
    "\1\53";

  private static int [] zzUnpackAction() {
    int [] result = new int[83];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\61\0\142\0\223\0\61\0\61\0\304\0\61"+
    "\0\61\0\61\0\61\0\61\0\61\0\365\0\61\0\u0126"+
    "\0\u0157\0\u0188\0\u01b9\0\u01ea\0\u021b\0\u024c\0\u027d\0\u02ae"+
    "\0\u02df\0\u0310\0\u0341\0\u0372\0\61\0\u03a3\0\u03d4\0\u0405"+
    "\0\u0436\0\61\0\61\0\u0467\0\u0498\0\u04c9\0\61\0\u04fa"+
    "\0\142\0\61\0\61\0\u052b\0\u055c\0\u058d\0\u05be\0\u05ef"+
    "\0\u01b9\0\u01b9\0\u0620\0\u01b9\0\u0651\0\u0682\0\u01b9\0\u06b3"+
    "\0\u01b9\0\u01b9\0\u06e4\0\61\0\61\0\61\0\61\0\61"+
    "\0\u01b9\0\u0715\0\u0746\0\u0777\0\u01b9\0\u01b9\0\u01b9\0\u01b9"+
    "\0\u01b9\0\u01b9\0\u01b9\0\u01b9\0\u01b9\0\u07a8\0\u07d9\0\u01b9"+
    "\0\u080a\0\u01b9\0\u01b9";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[83];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\2\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\23\1\27\1\23"+
    "\1\30\1\31\1\23\1\32\1\33\1\34\1\23\1\35"+
    "\1\36\2\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\2\23\1\2\1\47\1\50\1\23\61\0\1\51"+
    "\1\17\57\51\3\0\1\52\63\0\1\53\67\0\1\17"+
    "\62\0\1\23\1\54\4\23\1\55\12\23\10\0\11\23"+
    "\17\0\3\23\1\56\6\23\1\57\6\23\10\0\11\23"+
    "\17\0\3\23\1\60\7\23\1\61\5\23\10\0\11\23"+
    "\17\0\21\23\10\0\11\23\17\0\5\23\1\62\13\23"+
    "\10\0\11\23\17\0\7\23\1\63\11\23\10\0\11\23"+
    "\17\0\21\23\10\0\1\64\10\23\17\0\11\23\1\65"+
    "\7\23\10\0\11\23\17\0\17\23\1\66\1\23\10\0"+
    "\11\23\17\0\12\23\1\67\1\23\1\70\4\23\10\0"+
    "\11\23\17\0\15\23\1\71\3\23\10\0\11\23\17\0"+
    "\11\23\1\72\7\23\10\0\11\23\17\0\7\23\1\73"+
    "\11\23\10\0\11\23\40\0\1\74\60\0\1\75\64\0"+
    "\1\76\56\0\1\77\2\0\1\100\32\0\12\23\1\101"+
    "\6\23\10\0\11\23\17\0\1\23\1\102\17\23\10\0"+
    "\11\23\17\0\12\23\1\103\6\23\10\0\11\23\2\0"+
    "\1\50\16\0\1\50\3\0\1\50\25\0\1\50\4\0"+
    "\1\50\17\0\2\23\1\104\16\23\10\0\11\23\17\0"+
    "\12\23\1\105\6\23\10\0\11\23\17\0\21\23\10\0"+
    "\3\23\1\106\5\23\17\0\12\23\1\107\6\23\10\0"+
    "\11\23\17\0\6\23\1\110\12\23\10\0\11\23\17\0"+
    "\3\23\1\111\15\23\10\0\11\23\17\0\12\23\1\112"+
    "\6\23\10\0\11\23\17\0\6\23\1\113\12\23\10\0"+
    "\11\23\17\0\3\23\1\114\15\23\10\0\11\23\17\0"+
    "\20\23\1\115\10\0\11\23\17\0\7\23\1\116\11\23"+
    "\10\0\11\23\17\0\14\23\1\117\4\23\10\0\11\23"+
    "\17\0\3\23\1\120\15\23\10\0\11\23\17\0\20\23"+
    "\1\121\10\0\11\23\17\0\17\23\1\122\1\23\10\0"+
    "\11\23\17\0\17\23\1\123\1\23\10\0\11\23";

  private static int [] zzUnpackTrans() {
    int [] result = new int[2107];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\2\11\1\1\6\11\1\1\1\11"+
    "\15\1\1\11\4\1\2\11\3\1\1\11\1\1\1\0"+
    "\2\11\20\1\5\11\23\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[83];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    public String lexeme;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2250) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Tokens yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 11: 
          { /* ignore */
          }
        case 44: break;
        case 12: 
          { lexeme=yytext(); return ID;
          }
        case 45: break;
        case 27: 
          { lexeme=yytext(); return noEqualTo;
          }
        case 46: break;
        case 3: 
          { lexeme=yytext(); return closeParentesis;
          }
        case 47: break;
        case 10: 
          { lexeme=yytext(); return backslash;
          }
        case 48: break;
        case 38: 
          { lexeme=yytext(); return Return;
          }
        case 49: break;
        case 2: 
          { lexeme=yytext(); return colon;
          }
        case 50: break;
        case 5: 
          { lexeme=yytext(); return coma;
          }
        case 51: break;
        case 1: 
          { throw new Error("Illegal character <" + yytext() + ">"
                        + " line: " + yyline + ", column: " + yycolumn);
          }
        case 52: break;
        case 20: 
          { lexeme=yytext(); return pyc;
          }
        case 53: break;
        case 24: 
          { lexeme=yytext(); return For;
          }
        case 54: break;
        case 42: 
          { lexeme=yytext(); return True;
          }
        case 55: break;
        case 22: 
          { lexeme=yytext(); return variable;
          }
        case 56: break;
        case 39: 
          { lexeme=yytext(); return function;
          }
        case 57: break;
        case 36: 
          { lexeme=yytext(); return Bool;
          }
        case 58: break;
        case 9: 
          { lexeme=yytext(); return apostrophe;
          }
        case 59: break;
        case 33: 
          { lexeme=yytext(); return conAnd;
          }
        case 60: break;
        case 31: 
          { lexeme=yytext(); return conOr;
          }
        case 61: break;
        case 35: 
          { lexeme=yytext(); return integer;
          }
        case 62: break;
        case 25: 
          { lexeme=yytext(); return Print;
          }
        case 63: break;
        case 4: 
          { lexeme=yytext(); return openParentesis;
          }
        case 64: break;
        case 43: 
          { lexeme=yytext(); return False;
          }
        case 65: break;
        case 28: 
          { lexeme=yytext(); return orEqual;
          }
        case 66: break;
        case 15: 
          { lexeme=yytext(); return plus;
          }
        case 67: break;
        case 7: 
          { lexeme=yytext(); return closeSqrBracket;
          }
        case 68: break;
        case 21: 
          { lexeme=yytext(); return ifSwitch;
          }
        case 69: break;
        case 40: 
          { lexeme=yytext(); return Default;
          }
        case 70: break;
        case 19: 
          { lexeme=yytext(); return closeBlock;
          }
        case 71: break;
        case 41: 
          { lexeme=yytext(); return Main;
          }
        case 72: break;
        case 32: 
          { lexeme=yytext(); return matrix;
          }
        case 73: break;
        case 13: 
          { lexeme=yytext(); return equalTo;
          }
        case 74: break;
        case 23: 
          { lexeme=yytext(); return To;
          }
        case 75: break;
        case 16: 
          { lexeme=yytext(); return multiplication;
          }
        case 76: break;
        case 14: 
          { lexeme=yytext(); return than;
          }
        case 77: break;
        case 18: 
          { lexeme=yytext(); return number;
          }
        case 78: break;
        case 34: 
          { lexeme=yytext(); return array;
          }
        case 79: break;
        case 17: 
          { lexeme=yytext(); return mod;
          }
        case 80: break;
        case 8: 
          { lexeme=yytext(); return quotMark;
          }
        case 81: break;
        case 37: 
          { lexeme=yytext(); return Char;
          }
        case 82: break;
        case 29: 
          { lexeme=yytext(); return increment;
          }
        case 83: break;
        case 26: 
          { lexeme=yytext(); return While;
          }
        case 84: break;
        case 6: 
          { lexeme=yytext(); return openSqrBracket;
          }
        case 85: break;
        case 30: 
          { lexeme=yytext(); return decrement;
          }
        case 86: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
