
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Sep 27 22:37:41 CST 2020
//----------------------------------------------------

package CUP;

import java_cup.runtime.Symbol;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Sep 27 22:37:41 CST 2020
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\242\000\002\002\004\000\002\002\003\000\002\002" +
    "\004\000\002\002\004\000\002\002\003\000\002\003\011" +
    "\000\002\003\010\000\002\004\004\000\002\004\003\000" +
    "\002\005\015\000\002\005\012\000\002\005\011\000\002" +
    "\005\014\000\002\005\003\000\002\006\004\000\002\006" +
    "\005\000\002\007\006\000\002\007\004\000\002\010\003" +
    "\000\002\010\003\000\002\010\003\000\002\010\003\000" +
    "\002\010\003\000\002\011\004\000\002\011\003\000\002" +
    "\011\004\000\002\011\003\000\002\011\004\000\002\011" +
    "\003\000\002\011\004\000\002\011\003\000\002\011\005" +
    "\000\002\011\004\000\002\011\004\000\002\011\003\000" +
    "\002\011\004\000\002\011\003\000\002\011\005\000\002" +
    "\011\004\000\002\011\003\000\002\012\012\000\002\012" +
    "\011\000\002\013\020\000\002\013\017\000\002\014\012" +
    "\000\002\014\017\000\002\014\011\000\002\014\015\000" +
    "\002\015\012\000\002\016\010\000\002\016\007\000\002" +
    "\016\007\000\002\016\006\000\002\020\006\000\002\020" +
    "\005\000\002\021\005\000\002\021\003\000\002\022\004" +
    "\000\002\022\003\000\002\022\006\000\002\022\005\000" +
    "\002\024\004\000\002\024\004\000\002\023\005\000\002" +
    "\023\005\000\002\023\005\000\002\023\005\000\002\023" +
    "\005\000\002\023\005\000\002\023\005\000\002\023\005" +
    "\000\002\023\010\000\002\023\005\000\002\023\005\000" +
    "\002\023\005\000\002\023\005\000\002\023\005\000\002" +
    "\023\010\000\002\023\005\000\002\023\005\000\002\023" +
    "\005\000\002\023\010\000\002\023\005\000\002\023\005" +
    "\000\002\023\005\000\002\017\004\000\002\017\004\000" +
    "\002\017\004\000\002\017\004\000\002\017\004\000\002" +
    "\017\004\000\002\017\004\000\002\017\004\000\002\017" +
    "\005\000\002\017\005\000\002\017\003\000\002\017\003" +
    "\000\002\025\005\000\002\025\005\000\002\025\005\000" +
    "\002\025\004\000\002\025\004\000\002\025\004\000\002" +
    "\025\006\000\002\025\004\000\002\025\006\000\002\025" +
    "\010\000\002\025\010\000\002\025\013\000\002\025\011" +
    "\000\002\025\005\000\002\025\006\000\002\025\007\000" +
    "\002\025\007\000\002\025\006\000\002\026\005\000\002" +
    "\026\003\000\002\027\003\000\002\027\003\000\002\027" +
    "\003\000\002\027\003\000\002\027\003\000\002\027\003" +
    "\000\002\027\003\000\002\027\002\000\002\031\003\000" +
    "\002\031\003\000\002\031\003\000\002\030\004\000\002" +
    "\030\006\000\002\030\005\000\002\030\003\000\002\032" +
    "\005\000\002\032\004\000\002\033\005\000\002\034\003" +
    "\000\002\034\003\000\002\034\003\000\002\034\006\000" +
    "\002\034\005\000\002\035\005\000\002\035\004\000\002" +
    "\036\011\000\002\036\011\000\002\036\007\000\002\037" +
    "\005\000\002\037\004\000\002\037\005\000\002\037\004" +
    "\000\002\037\002\000\002\040\010\000\002\041\004\000" +
    "\002\041\003\000\002\042\005\000\002\042\005\000\002" +
    "\042\005\000\002\042\005\000\002\042\003\000\002\042" +
    "\003\000\002\042\003\000\002\042\003\000\002\042\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0158\000\006\003\007\006\006\001\002\000\004\054" +
    "\u0149\001\002\000\006\003\016\006\006\001\002\000\016" +
    "\007\034\046\021\047\023\050\024\051\026\052\017\001" +
    "\002\000\010\002\ufffd\003\ufff4\006\ufff4\001\002\000\010" +
    "\002\000\003\016\006\015\001\002\000\004\002\013\001" +
    "\002\000\010\002\ufff9\003\ufff9\006\ufff9\001\002\000\004" +
    "\002\001\001\002\000\010\002\uffff\003\016\006\015\001" +
    "\002\000\016\007\020\046\021\047\023\050\024\051\026" +
    "\052\017\001\002\000\010\002\ufff4\003\ufff4\006\ufff4\001" +
    "\002\000\024\003\uffeb\006\uffeb\033\uffeb\046\uffeb\047\uffeb" +
    "\050\uffeb\051\uffeb\052\uffeb\054\uffeb\001\002\000\004\054" +
    "\ufff3\001\002\000\024\003\uffef\006\uffef\033\uffef\046\uffef" +
    "\047\uffef\050\uffef\051\uffef\052\uffef\054\uffef\001\002\000" +
    "\004\054\030\001\002\000\024\003\uffee\006\uffee\033\uffee" +
    "\046\uffee\047\uffee\050\uffee\051\uffee\052\uffee\054\uffee\001" +
    "\002\000\024\003\uffed\006\uffed\033\uffed\046\uffed\047\uffed" +
    "\050\uffed\051\uffed\052\uffed\054\uffed\001\002\000\004\007" +
    "\027\001\002\000\024\003\uffec\006\uffec\033\uffec\046\uffec" +
    "\047\uffec\050\uffec\051\uffec\052\uffec\054\uffec\001\002\000" +
    "\004\054\ufff2\001\002\000\006\007\ufff0\014\031\001\002" +
    "\000\014\046\021\047\023\050\024\051\026\052\017\001" +
    "\002\000\004\007\ufff1\001\002\000\010\002\ufffa\003\ufffa" +
    "\006\ufffa\001\002\000\006\006\035\054\ufff3\001\002\000" +
    "\004\036\036\001\002\000\004\015\037\001\002\000\024" +
    "\003\057\005\046\006\051\046\061\047\053\050\041\051" +
    "\062\052\043\054\050\001\002\000\024\005\uffe7\006\uffe7" +
    "\033\uffe7\046\uffe7\047\uffe7\050\uffe7\051\uffe7\052\uffe7\054" +
    "\uffe7\001\002\000\004\054\u0143\001\002\000\024\005\uffe3" +
    "\006\uffe3\033\uffe3\046\uffe3\047\uffe3\050\uffe3\051\uffe3\052" +
    "\uffe3\054\uffe3\001\002\000\012\012\u012d\046\063\047\067" +
    "\050\066\001\002\000\024\005\uffdf\006\uffdf\033\uffdf\046" +
    "\uffdf\047\uffdf\050\uffdf\051\uffdf\052\uffdf\054\uffdf\001\002" +
    "\000\016\006\172\021\u0121\022\u0122\023\163\054\u0123\055" +
    "\161\001\002\000\010\002\ufffb\003\ufffb\006\ufffb\001\002" +
    "\000\022\005\u011f\006\051\046\061\047\053\050\041\051" +
    "\062\052\043\054\050\001\002\000\006\006\115\015\u0117" +
    "\001\002\000\022\006\172\021\162\022\164\023\163\027" +
    "\166\034\170\054\165\055\161\001\002\000\004\010\160" +
    "\001\002\000\004\054\155\001\002\000\024\005\uffdd\006" +
    "\uffdd\033\uffdd\046\uffdd\047\uffdd\050\uffdd\051\uffdd\052\uffdd" +
    "\054\uffdd\001\002\000\024\005\uffe5\006\uffe5\033\uffe5\046" +
    "\uffe5\047\uffe5\050\uffe5\051\uffe5\052\uffe5\054\uffe5\001\002" +
    "\000\004\010\154\001\002\000\024\005\uffda\006\uffda\033" +
    "\uffda\046\uffda\047\uffda\050\uffda\051\uffda\052\uffda\054\uffda" +
    "\001\002\000\024\005\uffe9\006\uffe9\033\uffe9\046\uffe9\047" +
    "\uffe9\050\uffe9\051\uffe9\052\uffe9\054\uffe9\001\002\000\004" +
    "\054\124\001\002\000\012\012\065\046\063\047\067\050" +
    "\066\001\002\000\004\054\uff84\001\002\000\004\054\074" +
    "\001\002\000\004\055\070\001\002\000\004\054\uff82\001" +
    "\002\000\004\054\uff83\001\002\000\004\013\071\001\002" +
    "\000\010\046\063\047\067\050\066\001\002\000\004\054" +
    "\073\001\002\000\004\010\uff97\001\002\000\004\015\075" +
    "\001\002\000\006\012\100\054\076\001\002\000\004\006" +
    "\115\001\002\000\004\010\uff90\001\002\000\024\013\uff85" +
    "\014\uff85\020\103\021\102\022\107\023\105\024\104\054" +
    "\110\055\101\001\002\000\016\005\uff8c\007\uff8c\010\uff8c" +
    "\013\uff8c\014\uff8c\040\uff8c\001\002\000\016\005\uff87\007" +
    "\uff87\010\uff87\013\uff87\014\uff87\040\uff87\001\002\000\016" +
    "\005\uff89\007\uff89\010\uff89\013\uff89\014\uff89\040\uff89\001" +
    "\002\000\016\005\uff88\007\uff88\010\uff88\013\uff88\014\uff88" +
    "\040\uff88\001\002\000\016\005\uff8a\007\uff8a\010\uff8a\013" +
    "\uff8a\014\uff8a\040\uff8a\001\002\000\004\010\uff96\001\002" +
    "\000\016\005\uff86\007\uff86\010\uff86\013\uff86\014\uff86\040" +
    "\uff86\001\002\000\016\005\uff8b\007\uff8b\010\uff8b\013\uff8b" +
    "\014\uff8b\040\uff8b\001\002\000\006\013\113\014\112\001" +
    "\002\000\024\013\uff85\014\uff85\020\103\021\102\022\107" +
    "\023\105\024\104\054\110\055\101\001\002\000\010\010" +
    "\uff7c\013\uff7c\014\uff7c\001\002\000\010\010\uff7d\013\uff7d" +
    "\014\uff7d\001\002\000\024\007\116\014\uff85\020\103\021" +
    "\102\022\107\023\105\024\104\054\110\055\101\001\002" +
    "\000\004\010\uffcb\001\002\000\004\007\123\001\002\000" +
    "\006\007\uffc9\014\121\001\002\000\024\007\uff85\014\uff85" +
    "\020\103\021\102\022\107\023\105\024\104\054\110\055" +
    "\101\001\002\000\004\007\uffca\001\002\000\004\010\uffcc" +
    "\001\002\000\010\010\uff8d\014\126\015\127\001\002\000" +
    "\004\010\uff9d\001\002\000\004\054\152\001\002\000\020" +
    "\006\140\020\132\023\134\024\133\047\131\054\076\055" +
    "\130\001\002\000\030\006\uff64\007\uff64\010\uff64\020\uff64" +
    "\023\uff64\024\uff64\040\uff64\041\uff64\042\uff64\047\uff64\055" +
    "\uff64\001\002\000\030\006\uff62\007\uff62\010\uff62\020\uff62" +
    "\023\uff62\024\uff62\040\uff62\041\uff62\042\uff62\047\uff62\055" +
    "\uff62\001\002\000\030\006\uff60\007\uff60\010\uff60\020\uff60" +
    "\023\uff60\024\uff60\040\uff60\041\uff60\042\uff60\047\uff60\055" +
    "\uff60\001\002\000\030\006\uff61\007\uff61\010\uff61\020\uff61" +
    "\023\uff61\024\uff61\040\uff61\041\uff61\042\uff61\047\uff61\055" +
    "\uff61\001\002\000\030\006\uff63\007\uff63\010\uff63\020\uff63" +
    "\023\uff63\024\uff63\040\uff63\041\uff63\042\uff63\047\uff63\055" +
    "\uff63\001\002\000\004\010\uff92\001\002\000\026\006\uff69" +
    "\010\uff69\020\uff69\023\uff69\024\uff69\040\145\041\144\042" +
    "\142\047\uff69\055\uff69\001\002\000\020\006\140\010\uff9a" +
    "\020\132\023\134\024\133\047\131\055\130\001\002\000" +
    "\016\006\140\020\132\023\134\024\133\047\131\055\130" +
    "\001\002\000\012\007\143\040\145\041\144\042\142\001" +
    "\002\000\016\006\140\020\132\023\134\024\133\047\131" +
    "\055\130\001\002\000\030\006\uff66\007\uff66\010\uff66\020" +
    "\uff66\023\uff66\024\uff66\040\uff66\041\uff66\042\uff66\047\uff66" +
    "\055\uff66\001\002\000\016\006\140\020\132\023\134\024" +
    "\133\047\131\055\130\001\002\000\016\006\140\020\132" +
    "\023\134\024\133\047\131\055\130\001\002\000\030\006" +
    "\uff68\007\uff68\010\uff68\020\uff68\023\uff68\024\uff68\040\uff68" +
    "\041\144\042\142\047\uff68\055\uff68\001\002\000\030\006" +
    "\uff67\007\uff67\010\uff67\020\uff67\023\uff67\024\uff67\040\uff67" +
    "\041\uff67\042\uff67\047\uff67\055\uff67\001\002\000\030\006" +
    "\uff65\007\uff65\010\uff65\020\uff65\023\uff65\024\uff65\040\uff65" +
    "\041\uff65\042\uff65\047\uff65\055\uff65\001\002\000\026\006" +
    "\uff6a\010\uff6a\020\uff6a\023\uff6a\024\uff6a\040\145\041\144" +
    "\042\142\047\uff6a\055\uff6a\001\002\000\006\010\uff8d\014" +
    "\126\001\002\000\004\010\uff8e\001\002\000\024\005\uffdb" +
    "\006\uffdb\033\uffdb\046\uffdb\047\uffdb\050\uffdb\051\uffdb\052" +
    "\uffdb\054\uffdb\001\002\000\010\010\uff8d\014\126\015\157" +
    "\001\002\000\004\010\uff9c\001\002\000\016\006\uff7b\021" +
    "\uff7b\022\uff7b\023\uff7b\054\uff7b\055\uff7b\001\002\000\024" +
    "\005\uffe1\006\uffe1\033\uffe1\046\uffe1\047\uffe1\050\uffe1\051" +
    "\uffe1\052\uffe1\054\uffe1\001\002\000\004\037\u0116\001\002" +
    "\000\004\037\363\001\002\000\004\037\u0115\001\002\000" +
    "\004\037\350\001\002\000\010\007\301\014\300\037\203" +
    "\001\002\000\004\015\257\001\002\000\004\007\216\001" +
    "\002\000\004\015\212\001\002\000\012\007\uffc7\010\uffc7" +
    "\044\176\045\177\001\002\000\016\006\172\021\162\022" +
    "\164\023\163\054\173\055\161\001\002\000\004\037\203" +
    "\001\002\000\004\007\175\001\002\000\012\007\uffc5\010" +
    "\uffc5\044\176\045\177\001\002\000\016\006\172\021\162" +
    "\022\164\023\163\054\173\055\161\001\002\000\016\006" +
    "\172\021\162\022\164\023\163\054\173\055\161\001\002" +
    "\000\006\007\uffc6\010\uffc6\001\002\000\006\007\uffc3\010" +
    "\uffc3\001\002\000\006\007\uffc4\010\uffc4\001\002\000\014" +
    "\021\206\022\210\023\205\054\204\055\207\001\002\000" +
    "\012\007\uffc2\010\uffc2\044\uffc2\045\uffc2\001\002\000\012" +
    "\007\uffc0\010\uffc0\044\uffc0\045\uffc0\001\002\000\012\007" +
    "\uffbe\010\uffbe\044\uffbe\045\uffbe\001\002\000\012\007\uffc1" +
    "\010\uffc1\044\uffc1\045\uffc1\001\002\000\012\007\uffbf\010" +
    "\uffbf\044\uffbf\045\uffbf\001\002\000\006\007\uffc8\010\uffc8" +
    "\001\002\000\004\054\213\001\002\000\004\005\214\001" +
    "\002\000\004\010\215\001\002\000\024\005\uff6b\006\uff6b" +
    "\033\uff6b\046\uff6b\047\uff6b\050\uff6b\051\uff6b\052\uff6b\054" +
    "\uff6b\001\002\000\004\006\217\001\002\000\006\026\220" +
    "\030\221\001\002\000\004\015\240\001\002\000\004\015" +
    "\222\001\002\000\024\003\057\005\223\006\051\046\061" +
    "\047\053\050\041\051\062\052\043\054\050\001\002\000" +
    "\024\005\uffd8\006\uffd8\033\uffd8\046\uffd8\047\uffd8\050\uffd8" +
    "\051\uffd8\052\uffd8\054\uffd8\001\002\000\022\005\230\006" +
    "\051\046\061\047\053\050\041\051\062\052\043\054\050" +
    "\001\002\000\024\005\uffe4\006\uffe4\033\uffe4\046\uffe4\047" +
    "\uffe4\050\uffe4\051\uffe4\052\uffe4\054\uffe4\001\002\000\024" +
    "\005\uffe0\006\uffe0\033\uffe0\046\uffe0\047\uffe0\050\uffe0\051" +
    "\uffe0\052\uffe0\054\uffe0\001\002\000\024\005\uffde\006\uffde" +
    "\033\uffde\046\uffde\047\uffde\050\uffde\051\uffde\052\uffde\054" +
    "\uffde\001\002\000\024\005\uffd9\006\uffd9\033\uffd9\046\uffd9" +
    "\047\uffd9\050\uffd9\051\uffd9\052\uffd9\054\uffd9\001\002\000" +
    "\024\005\uffea\006\uffea\033\uffea\046\uffea\047\uffea\050\uffea" +
    "\051\uffea\052\uffea\054\uffea\001\002\000\024\005\uffe8\006" +
    "\uffe8\033\uffe8\046\uffe8\047\uffe8\050\uffe8\051\uffe8\052\uffe8" +
    "\054\uffe8\001\002\000\004\010\237\001\002\000\024\005" +
    "\uffe6\006\uffe6\033\uffe6\046\uffe6\047\uffe6\050\uffe6\051\uffe6" +
    "\052\uffe6\054\uffe6\001\002\000\004\010\236\001\002\000" +
    "\024\005\uffe2\006\uffe2\033\uffe2\046\uffe2\047\uffe2\050\uffe2" +
    "\051\uffe2\052\uffe2\054\uffe2\001\002\000\024\005\uffdc\006" +
    "\uffdc\033\uffdc\046\uffdc\047\uffdc\050\uffdc\051\uffdc\052\uffdc" +
    "\054\uffdc\001\002\000\024\003\057\005\241\006\243\046" +
    "\061\047\053\050\041\051\062\052\043\054\050\001\002" +
    "\000\024\005\uffd3\006\uffd3\033\uffd3\046\uffd3\047\uffd3\050" +
    "\uffd3\051\uffd3\052\uffd3\054\uffd3\001\002\000\022\005\250" +
    "\006\251\046\061\047\053\050\041\051\062\052\043\054" +
    "\050\001\002\000\024\006\172\021\162\022\164\023\163" +
    "\027\166\032\244\034\170\054\165\055\161\001\002\000" +
    "\004\007\245\001\002\000\004\015\246\001\002\000\004" +
    "\005\247\001\002\000\024\005\uffd2\006\uffd2\033\uffd2\046" +
    "\uffd2\047\uffd2\050\uffd2\051\uffd2\052\uffd2\054\uffd2\001\002" +
    "\000\024\005\uffd5\006\uffd5\033\uffd5\046\uffd5\047\uffd5\050" +
    "\uffd5\051\uffd5\052\uffd5\054\uffd5\001\002\000\024\006\172" +
    "\021\162\022\164\023\163\027\166\032\252\034\170\054" +
    "\165\055\161\001\002\000\004\007\253\001\002\000\004" +
    "\015\254\001\002\000\022\003\057\006\051\046\061\047" +
    "\053\050\041\051\062\052\043\054\050\001\002\000\022" +
    "\005\256\006\051\046\061\047\053\050\041\051\062\052" +
    "\043\054\050\001\002\000\024\005\uffd4\006\uffd4\033\uffd4" +
    "\046\uffd4\047\uffd4\050\uffd4\051\uffd4\052\uffd4\054\uffd4\001" +
    "\002\000\010\005\261\023\262\054\260\001\002\000\006" +
    "\005\uff6c\040\264\001\002\000\004\010\274\001\002\000" +
    "\006\005\uff6c\040\264\001\002\000\006\005\267\040\270" +
    "\001\002\000\026\005\uff85\017\265\020\103\021\102\022" +
    "\107\023\105\024\104\040\uff85\054\110\055\101\001\002" +
    "\000\006\005\uff6d\040\uff6d\001\002\000\006\005\uff6f\040" +
    "\uff6f\001\002\000\004\010\273\001\002\000\026\005\uff85" +
    "\017\271\020\103\021\102\022\107\023\105\024\104\040" +
    "\uff85\054\110\055\101\001\002\000\006\005\uff6e\040\uff6e" +
    "\001\002\000\006\005\uff70\040\uff70\001\002\000\024\005" +
    "\uff73\006\uff73\033\uff73\046\uff73\047\uff73\050\uff73\051\uff73" +
    "\052\uff73\054\uff73\001\002\000\024\005\uff71\006\uff71\033" +
    "\uff71\046\uff71\047\uff71\050\uff71\051\uff71\052\uff71\054\uff71" +
    "\001\002\000\006\005\276\040\270\001\002\000\004\010" +
    "\277\001\002\000\024\005\uff72\006\uff72\033\uff72\046\uff72" +
    "\047\uff72\050\uff72\051\uff72\052\uff72\054\uff72\001\002\000" +
    "\004\055\u0109\001\002\000\004\006\302\001\002\000\004" +
    "\026\303\001\002\000\004\015\304\001\002\000\004\006" +
    "\305\001\002\000\020\021\314\022\317\023\311\032\313" +
    "\037\316\054\310\055\315\001\002\000\004\005\307\001" +
    "\002\000\024\005\uffd1\006\uffd1\033\uffd1\046\uffd1\047\uffd1" +
    "\050\uffd1\051\uffd1\052\uffd1\054\uffd1\001\002\000\006\011" +
    "\345\037\u0108\001\002\000\004\037\u0107\001\002\000\004" +
    "\007\333\001\002\000\004\007\330\001\002\000\004\007" +
    "\uffa2\001\002\000\006\011\325\037\326\001\002\000\014" +
    "\021\322\022\324\023\321\054\320\055\323\001\002\000" +
    "\004\007\uffa1\001\002\000\004\007\uffab\001\002\000\004" +
    "\007\uffa9\001\002\000\004\007\uffa6\001\002\000\004\007" +
    "\uffa8\001\002\000\004\007\uffa7\001\002\000\004\055\327" +
    "\001\002\000\004\007\uffa5\001\002\000\004\007\uffa4\001" +
    "\002\000\004\015\331\001\002\000\024\003\057\005\uffcd" +
    "\006\051\046\061\047\053\050\041\051\062\052\043\054" +
    "\050\001\002\000\022\005\uffce\006\051\046\061\047\053" +
    "\050\041\051\062\052\043\054\050\001\002\000\004\015" +
    "\334\001\002\000\022\003\057\006\337\046\061\047\053" +
    "\050\041\051\062\052\043\054\050\001\002\000\004\005" +
    "\uffcf\001\002\000\020\006\337\046\061\047\053\050\041" +
    "\051\062\052\043\054\050\001\002\000\026\006\172\021" +
    "\341\022\343\023\342\027\166\032\313\034\170\037\316" +
    "\054\344\055\340\001\002\000\006\011\325\037\u0101\001" +
    "\002\000\006\007\uffa2\037\363\001\002\000\004\037\356" +
    "\001\002\000\006\007\uffa1\037\350\001\002\000\012\007" +
    "\301\011\345\014\300\037\346\001\002\000\004\054\347" +
    "\001\002\000\016\007\uffac\021\206\022\210\023\205\054" +
    "\204\055\207\001\002\000\004\007\uffa3\001\002\000\014" +
    "\021\353\022\355\023\352\054\351\055\354\001\002\000" +
    "\012\007\uffbb\010\uffbb\044\uffbb\045\uffbb\001\002\000\012" +
    "\007\uffb1\010\uffb1\044\uffb1\045\uffb1\001\002\000\012\007" +
    "\uffad\010\uffad\044\uffad\045\uffad\001\002\000\012\007\uffb5" +
    "\010\uffb5\044\uffb5\045\uffb5\001\002\000\012\007\uffae\010" +
    "\uffae\044\uffae\045\uffae\001\002\000\014\007\uffaa\021\360" +
    "\022\362\054\357\055\361\001\002\000\012\007\uffbc\010" +
    "\uffbc\044\uffbc\045\uffbc\001\002\000\012\007\uffb2\010\uffb2" +
    "\044\uffb2\045\uffb2\001\002\000\012\007\uffb6\010\uffb6\044" +
    "\uffb6\045\uffb6\001\002\000\012\007\uffb3\010\uffb3\044\uffb3" +
    "\045\uffb3\001\002\000\012\021\366\023\365\054\364\055" +
    "\367\001\002\000\004\055\376\001\002\000\004\021\373" +
    "\001\002\000\012\007\uffaf\010\uffaf\044\uffaf\045\uffaf\001" +
    "\002\000\004\023\370\001\002\000\004\037\371\001\002" +
    "\000\004\023\372\001\002\000\012\007\uffb4\010\uffb4\044" +
    "\uffb4\045\uffb4\001\002\000\004\037\374\001\002\000\004" +
    "\022\375\001\002\000\012\007\uffb0\010\uffb0\044\uffb0\045" +
    "\uffb0\001\002\000\004\037\377\001\002\000\004\055\u0100" +
    "\001\002\000\012\007\uffba\010\uffba\044\uffba\045\uffba\001" +
    "\002\000\014\007\uffa5\021\u0104\022\u0105\023\u0103\054\u0102" +
    "\001\002\000\012\007\uffbd\010\uffbd\044\uffbd\045\uffbd\001" +
    "\002\000\012\007\uffb9\010\uffb9\044\uffb9\045\uffb9\001\002" +
    "\000\012\007\uffb7\010\uffb7\044\uffb7\045\uffb7\001\002\000" +
    "\012\007\uffb8\010\uffb8\044\uffb8\045\uffb8\001\002\000\004" +
    "\005\uffd0\001\002\000\004\007\uffaa\001\002\000\004\007" +
    "\uffac\001\002\000\004\035\u010a\001\002\000\004\055\u010b" +
    "\001\002\000\004\014\u010c\001\002\000\004\043\u010d\001" +
    "\002\000\004\007\u010e\001\002\000\004\006\u010f\001\002" +
    "\000\004\031\u0110\001\002\000\004\015\u0111\001\002\000" +
    "\024\003\057\005\u0112\006\051\046\061\047\053\050\041" +
    "\051\062\052\043\054\050\001\002\000\024\005\uffd6\006" +
    "\uffd6\033\uffd6\046\uffd6\047\uffd6\050\uffd6\051\uffd6\052\uffd6" +
    "\054\uffd6\001\002\000\022\005\u0114\006\051\046\061\047" +
    "\053\050\041\051\062\052\043\054\050\001\002\000\024" +
    "\005\uffd7\006\uffd7\033\uffd7\046\uffd7\047\uffd7\050\uffd7\051" +
    "\uffd7\052\uffd7\054\uffd7\001\002\000\012\021\360\022\362" +
    "\054\357\055\361\001\002\000\012\021\u0104\022\u0105\023" +
    "\u0103\054\u0102\001\002\000\024\006\u011e\020\132\021\162" +
    "\022\164\023\u0119\024\133\047\131\054\u011b\055\u0118\001" +
    "\002\000\032\006\uff64\007\uff64\010\uff64\020\uff64\023\uff64" +
    "\024\uff64\037\u0116\040\uff64\041\uff64\042\uff64\047\uff64\055" +
    "\uff64\001\002\000\032\006\uff63\007\uff63\010\uff63\020\uff63" +
    "\023\uff63\024\uff63\037\u0115\040\uff63\041\uff63\042\uff63\047" +
    "\uff63\055\uff63\001\002\000\004\010\uff93\001\002\000\010" +
    "\006\115\010\uffa0\037\203\001\002\000\004\010\uff9f\001" +
    "\002\000\020\006\140\010\uff9e\020\132\023\134\024\133" +
    "\047\131\055\130\001\002\000\024\006\u011e\020\132\021" +
    "\162\022\164\023\u0119\024\133\047\131\054\173\055\u0118" +
    "\001\002\000\010\002\ufffc\003\ufffc\006\ufffc\001\002\000" +
    "\004\010\uff99\001\002\000\006\010\uff79\037\363\001\002" +
    "\000\006\010\uff7a\037\350\001\002\000\006\006\u0125\037" +
    "\203\001\002\000\004\010\uff78\001\002\000\006\007\u0127" +
    "\054\u0126\001\002\000\006\010\u012b\014\u012a\001\002\000" +
    "\004\010\uff76\001\002\000\004\007\u0129\001\002\000\004" +
    "\010\uff77\001\002\000\004\054\u0126\001\002\000\004\007" +
    "\uff74\001\002\000\004\007\uff75\001\002\000\004\055\u013c" +
    "\001\002\000\004\054\u012f\001\002\000\004\015\u0130\001" +
    "\002\000\006\012\u0132\054\076\001\002\000\004\010\uff91" +
    "\001\002\000\026\012\u0134\013\uff85\014\uff85\020\103\021" +
    "\102\022\107\023\105\024\104\054\110\055\101\001\002" +
    "\000\004\013\u013b\001\002\000\024\013\uff85\014\uff85\020" +
    "\103\021\102\022\107\023\105\024\104\054\110\055\101" +
    "\001\002\000\006\013\uff7e\014\u0136\001\002\000\026\012" +
    "\u0134\013\uff85\014\uff85\020\103\021\102\022\107\023\105" +
    "\024\104\054\110\055\101\001\002\000\004\013\uff7f\001" +
    "\002\000\006\013\uff81\014\u0139\001\002\000\026\012\u0134" +
    "\013\uff85\014\uff85\020\103\021\102\022\107\023\105\024" +
    "\104\054\110\055\101\001\002\000\004\013\uff80\001\002" +
    "\000\004\010\uff94\001\002\000\004\013\u013d\001\002\000" +
    "\004\012\u013e\001\002\000\004\055\u013f\001\002\000\004" +
    "\013\u0140\001\002\000\010\046\063\047\067\050\066\001" +
    "\002\000\004\054\u0142\001\002\000\004\010\uff95\001\002" +
    "\000\010\010\uff8d\014\126\015\u0145\001\002\000\004\010" +
    "\uff9b\001\002\000\006\024\u0147\054\076\001\002\000\004" +
    "\010\uff8f\001\002\000\004\010\uff98\001\002\000\004\002" +
    "\ufffe\001\002\000\004\006\u014a\001\002\000\004\025\u014b" +
    "\001\002\000\004\015\u014c\001\002\000\016\020\u014d\046" +
    "\021\047\023\050\024\051\026\052\017\001\002\000\024" +
    "\003\057\005\u0158\006\051\046\061\047\053\050\041\051" +
    "\062\052\043\054\050\001\002\000\024\003\057\006\051" +
    "\033\u014f\046\061\047\053\050\041\051\062\052\043\054" +
    "\050\001\002\000\022\010\uff85\020\103\021\102\022\107" +
    "\023\105\024\104\054\110\055\101\001\002\000\022\006" +
    "\051\033\u0151\046\061\047\053\050\041\051\062\052\043" +
    "\054\050\001\002\000\022\010\uff85\020\103\021\102\022" +
    "\107\023\105\024\104\054\110\055\101\001\002\000\004" +
    "\010\u0153\001\002\000\004\005\u0154\001\002\000\010\002" +
    "\ufff8\003\ufff8\006\ufff8\001\002\000\004\010\u0156\001\002" +
    "\000\004\005\u0157\001\002\000\010\002\ufff5\003\ufff5\006" +
    "\ufff5\001\002\000\010\002\ufff6\003\ufff6\006\ufff6\001\002" +
    "\000\022\005\u015a\006\051\046\061\047\053\050\041\051" +
    "\062\052\043\054\050\001\002\000\010\002\ufff7\003\ufff7" +
    "\006\ufff7\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0158\000\014\002\010\003\007\004\004\005\011\006" +
    "\003\001\001\000\002\001\001\000\010\003\u0147\005\032" +
    "\006\003\001\001\000\006\007\024\010\021\001\001\000" +
    "\002\001\001\000\010\004\013\005\011\006\003\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\005\032\006\003\001\001\000\006\007\024\010\021" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\007\031\010\021" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\011\046" +
    "\012\057\013\037\014\054\015\041\020\055\025\051\033" +
    "\044\036\043\040\053\001\001\000\002\001\001\000\004" +
    "\026\u0143\001\001\000\002\001\001\000\004\031\u012d\001" +
    "\001\000\002\001\001\000\010\022\u0123\023\170\034\u011f" +
    "\001\001\000\002\001\001\000\024\012\230\013\231\014" +
    "\233\015\224\020\232\025\234\033\044\036\225\040\226" +
    "\001\001\000\002\001\001\000\006\022\166\023\170\001" +
    "\001\000\002\001\001\000\004\026\155\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\026\124\001\001\000\004" +
    "\031\063\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\031\071\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\020\076\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\027\110\032" +
    "\105\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\027\110\032\113\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\021\116\027\117\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\021" +
    "\121\027\117\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\026\152\001" +
    "\001\000\010\020\134\041\136\042\135\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\042\150\001\001\000\004\042\140\001\001\000" +
    "\002\001\001\000\004\042\147\001\001\000\002\001\001" +
    "\000\004\042\146\001\001\000\004\042\145\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\024" +
    "\210\001\001\000\006\022\173\023\170\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\024\177\001\001\000" +
    "\006\022\201\023\170\001\001\000\006\022\200\023\170" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\011\223" +
    "\012\057\013\037\014\054\015\041\020\055\025\051\033" +
    "\044\036\043\040\053\001\001\000\002\001\001\000\024" +
    "\012\230\013\231\014\233\015\224\020\232\025\234\033" +
    "\044\036\225\040\226\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\011\241\012\057\013\037\014\054\015\041\020\055" +
    "\025\051\033\044\036\043\040\053\001\001\000\002\001" +
    "\001\000\024\012\230\013\231\014\233\015\224\020\232" +
    "\025\234\033\044\036\225\040\226\001\001\000\006\022" +
    "\166\023\170\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\022\166\023\170\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\011\254\012\057\013\037\014\054\015" +
    "\041\020\055\025\051\033\044\036\043\040\053\001\001" +
    "\000\024\012\230\013\231\014\233\015\224\020\232\025" +
    "\234\033\044\036\225\040\226\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\037\274\001\001\000\002\001" +
    "\001\000\004\037\262\001\001\000\002\001\001\000\004" +
    "\027\265\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\027\271\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\016\305\001\001\000\004\017\311\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\011\331\012\057\013\037\014\054\015\041\020\055\025" +
    "\051\033\044\036\043\040\053\001\001\000\024\012\230" +
    "\013\231\014\233\015\224\020\232\025\234\033\044\036" +
    "\225\040\226\001\001\000\002\001\001\000\030\011\335" +
    "\012\057\013\037\014\054\015\041\016\334\020\055\025" +
    "\051\033\044\036\043\040\053\001\001\000\002\001\001" +
    "\000\026\012\230\013\231\014\233\015\224\016\u0105\020" +
    "\232\025\234\033\044\036\225\040\226\001\001\000\010" +
    "\017\311\022\166\023\170\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\011\u0112" +
    "\012\057\013\037\014\054\015\041\020\055\025\051\033" +
    "\044\036\043\040\053\001\001\000\002\001\001\000\024" +
    "\012\230\013\231\014\233\015\224\020\232\025\234\033" +
    "\044\036\225\040\226\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\020\u0119\022\u011b\023" +
    "\170\041\u011c\042\135\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\042\150\001\001\000\010\022\173\023\170" +
    "\042\140\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\035\u0127\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\035\u012b\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\020\u0130\001\001\000\002\001\001\000\006\027\u0134\030" +
    "\u0132\001\001\000\002\001\001\000\006\027\110\032\u0137" +
    "\001\001\000\002\001\001\000\006\027\u0134\030\u0136\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\027\u0134" +
    "\030\u0139\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\031\u0140\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\020\u0145\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\010\u014d\001\001\000\026\011\u0158\012" +
    "\057\013\037\014\054\015\041\020\055\025\051\033\044" +
    "\036\043\040\053\001\001\000\026\011\u014f\012\057\013" +
    "\037\014\054\015\041\020\055\025\051\033\044\036\043" +
    "\040\053\001\001\000\004\027\u0154\001\001\000\024\012" +
    "\230\013\231\014\233\015\224\020\232\025\234\033\044" +
    "\036\225\040\226\001\001\000\004\027\u0151\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\012\230\013\231\014\233\015\224\020\232" +
    "\025\234\033\044\036\225\040\226\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    /**
     * Método al que se llama automáticamente ante algún error sintactico.
    **/ 
    public void syntax_error(Symbol s){
        this.s = s;
        System.out.println("Error Sintáctico recuperable en la Línea " + (s.right) +
        " Columna "+s.left+ ". No se esperaba este componente: " +s.value+".");

        String report = "Syntax error in line " + getS().right + " Column " + getS().left + ". No se esperaba este componente: " + getS().value;
        if(getS().value == null){
            report = "You didn't close your last code structure";
        }
        addError(report + "\n");
    }

    /**
     * Método al que se llama automáticamente ante algún error sintáctico 
     * en el que ya no es posible una recuperación de errores.
     **/ 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error síntactico irrecuperable en la Línea " + 
        (s.right)+ " Columna "+s.left+". Componente " + s.value + 
        " no reconocido."); 
    }
    public Symbol getS(){
        return this.s;
    }
    //Guardar los errores encontrados
    private String ERRORES = "";
    private int cERRORES = 0;
    public void addError(String error){
        this.ERRORES += error;
        this.cERRORES++;
    }
    public String getERRORES(){
        return this.ERRORES;
    }
    public void setERRORES(String err){
        this.ERRORES = err;
    }

    public int getcERRORES(){
        return this.cERRORES;
    }
    public void setcERRORES(int err){
        this.cERRORES = err;
    }

    //Se vino el arbolito papa
    DefaultMutableTreeNode sintaxTree;
    DefaultTreeModel sintaxTreeModel;
    DefaultMutableTreeNode nodoActual;

    public DefaultTreeModel createTreeSintax(String name){
        this.sintaxTree = new DefaultMutableTreeNode(name);
        this.sintaxTreeModel = new DefaultTreeModel(sintaxTree);
        this.nodoActual = this.sintaxTree;
        return sintaxTreeModel;
    }
    
    public DefaultMutableTreeNode getTreeSintax(){
        return this.sintaxTree;
    }
    
    public DefaultTreeModel getTreeSintaxModel(){
        return this.sintaxTreeModel;
    }

     public DefaultMutableTreeNode createNodo(String name){
        return new DefaultMutableTreeNode(name);
    }
    
    public void agregarNodo(DefaultMutableTreeNode nodo){
        this.sintaxTree.add(nodo);
    }
    
    public void setNodoActual(DefaultMutableTreeNode nodo){
        this.nodoActual = nodo;
    }

    public DefaultMutableTreeNode getNodoActual(){
        return this.nodoActual;
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // EXPR ::= NULL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPR",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // EXPR ::= CHAR_ELEMENT 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPR",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // EXPR ::= BOOLEAN 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPR",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // EXPR ::= STRING 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = s;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPR",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // EXPR ::= NUMBER 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 RESULT = n;      
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPR",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // EXPR ::= EXPR MOD EXPR 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 RESULT = ((int)e1) % ((int)e2);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPR",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // EXPR ::= OPEN_PARENTESIS EXPR CLOSE_PARENTESIS 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 RESULT = e;      
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPR",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // EXPR ::= EXPR OP_MULTI_DIV EXPR 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 RESULT = ((int)e1) * ((int)e2);;  
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPR",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // EXPR ::= EXPR OP_SUM EXPR 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 RESULT = ((int)e1) + ((int)e2);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPR",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // EXPR_LIST ::= EXPR 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 System.out.println(e);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPR_LIST",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // EXPR_LIST ::= EXPR_LIST EXPR 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 System.out.println(e);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPR_LIST",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // N_CIN ::= OPEN_PARENTESIS CIN COLON ID CLOSE_BLOCK PYC 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_CIN",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // N_PRINT_IMPRESS ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_PRINT_IMPRESS",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // N_PRINT_IMPRESS ::= OP_SUM NEW_LINE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_PRINT_IMPRESS",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // N_PRINT_IMPRESS ::= N_PRINT_IMPRESS OP_SUM NEW_LINE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_PRINT_IMPRESS",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // N_PRINT_IMPRESS ::= OP_SUM N_VALOR_VARIABLE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_PRINT_IMPRESS",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // N_PRINT_IMPRESS ::= N_PRINT_IMPRESS OP_SUM N_VALOR_VARIABLE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_PRINT_IMPRESS",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // N_PRINT ::= OPEN_PARENTESIS PRINT COLON CLOSE_BLOCK PYC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_PRINT",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // N_PRINT ::= OPEN_PARENTESIS PRINT COLON ID N_PRINT_IMPRESS CLOSE_BLOCK PYC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_PRINT",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // N_PRINT ::= OPEN_PARENTESIS PRINT COLON STRING N_PRINT_IMPRESS CLOSE_BLOCK PYC 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_PRINT",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // N_ARGUMENTOS ::= ID PYC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_ARGUMENTOS",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // N_ARGUMENTOS ::= ID COMA N_ARGUMENTOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_ARGUMENTOS",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // N_BOOLEAN_VALUE ::= ID OPEN_PARENTESIS CLOSE_PARENTESIS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_BOOLEAN_VALUE",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // N_BOOLEAN_VALUE ::= ID OPEN_PARENTESIS N_ARGUMENTOS CLOSE_PARENTESIS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_BOOLEAN_VALUE",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // N_BOOLEAN_VALUE ::= N_SENTENCIA_BOOLEANA_ANIDADA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_BOOLEAN_VALUE",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // N_BOOLEAN_VALUE ::= TRUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_BOOLEAN_VALUE",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // N_BOOLEAN_VALUE ::= FALSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_BOOLEAN_VALUE",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // N_BOOLEAN_ID ::= BOOLEAN ID COLON 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_BOOLEAN_ID",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // N_ARREGLO ::= N_VALOR_VARIABLE CLOSE_SQR_BRACKET 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_ARREGLO",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // N_ARREGLO ::= N_VALOR_VARIABLE COMA N_ARREGLO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_ARREGLO",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // N_MATRIZ ::= N_VALOR_VARIABLE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_MATRIZ",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // N_MATRIZ ::= N_VALOR_VARIABLE COMA N_MATRIZ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_MATRIZ",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // N_MATRIZ ::= OPEN_SQR_BRACKET N_ARREGLO COMA N_MATRIZ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_MATRIZ",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // N_MATRIZ ::= OPEN_SQR_BRACKET N_ARREGLO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_MATRIZ",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // N_TIPOS_DECLARACION_MATRIZ ::= CHAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_TIPOS_DECLARACION_MATRIZ",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // N_TIPOS_DECLARACION_MATRIZ ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_TIPOS_DECLARACION_MATRIZ",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // N_TIPOS_DECLARACION_MATRIZ ::= INTENGER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_TIPOS_DECLARACION_MATRIZ",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // N_VALOR_VARIABLE ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_VALOR_VARIABLE",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // N_VALOR_VARIABLE ::= FALSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_VALOR_VARIABLE",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // N_VALOR_VARIABLE ::= TRUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_VALOR_VARIABLE",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // N_VALOR_VARIABLE ::= CHAR_ELEMENT 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_VALOR_VARIABLE",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // N_VALOR_VARIABLE ::= NULL 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_VALOR_VARIABLE",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // N_VALOR_VARIABLE ::= STRING 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_VALOR_VARIABLE",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // N_VALOR_VARIABLE ::= ID 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_VALOR_VARIABLE",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // N_VALOR_VARIABLE ::= NUMBER 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_VALOR_VARIABLE",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // N_DECLARACION_ID ::= ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_DECLARACION_ID",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // N_DECLARACION_ID ::= ID COMA N_DECLARACION_ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_DECLARACION_ID",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // N_DECLARACION ::= CHAR ID COLON N_CALL_FUNCTION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_DECLARACION",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // N_DECLARACION ::= ARRAY N_TIPOS_DECLARACION_MATRIZ ID COLON N_CALL_FUNCTION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_DECLARACION",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // N_DECLARACION ::= MATRIX N_TIPOS_DECLARACION_MATRIZ ID COLON N_CALL_FUNCTION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_DECLARACION",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // N_DECLARACION ::= INTENGER ID COLON N_CALL_FUNCTION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_DECLARACION",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // N_DECLARACION ::= ID COLON N_CALL_FUNCTION 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_DECLARACION",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // N_DECLARACION ::= MATRIX N_TIPOS_DECLARACION_MATRIZ ID COLON OPEN_SQR_BRACKET N_MATRIZ CLOSE_SQR_BRACKET 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_DECLARACION",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // N_DECLARACION ::= MATRIX OPEN_SQR_BRACKET NUMBER CLOSE_SQR_BRACKET OPEN_SQR_BRACKET NUMBER CLOSE_SQR_BRACKET N_TIPOS_DECLARACION_MATRIZ ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_DECLARACION",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // N_DECLARACION ::= ARRAY N_TIPOS_DECLARACION_MATRIZ ID COLON OPEN_SQR_BRACKET N_ARREGLO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_DECLARACION",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // N_DECLARACION ::= ARRAY OPEN_SQR_BRACKET NUMBER CLOSE_SQR_BRACKET N_TIPOS_DECLARACION_MATRIZ ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_DECLARACION",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // N_DECLARACION ::= CHAR ID COLON CHAR_ELEMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_DECLARACION",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // N_DECLARACION ::= N_BOOLEAN_ID N_BOOLEAN_VALUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_DECLARACION",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // N_DECLARACION ::= INTENGER ID COLON EXPR_LIST 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_DECLARACION",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // N_DECLARACION ::= CHAR N_DECLARACION_ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_DECLARACION",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // N_DECLARACION ::= BOOLEAN N_DECLARACION_ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_DECLARACION",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // N_DECLARACION ::= INTENGER N_DECLARACION_ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_DECLARACION",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // N_DECLARACION ::= ID COLON EXPR_LIST 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_DECLARACION",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // N_DECLARACION ::= ID COLON N_SENTENCIA_BOOLEANA_ANIDADA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_DECLARACION",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // N_DECLARACION ::= ID COLON ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_DECLARACION",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // N_SENTENCIA_BOOLEANA_SWITCH ::= FALSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA_SWITCH",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // N_SENTENCIA_BOOLEANA_SWITCH ::= TRUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA_SWITCH",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // N_SENTENCIA_BOOLEANA_SWITCH ::= ID BETWEEN ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA_SWITCH",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // N_SENTENCIA_BOOLEANA_SWITCH ::= NUMBER BETWEEN NUMBER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA_SWITCH",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // N_SENTENCIA_BOOLEANA_SWITCH ::= NUMBER OP_REL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA_SWITCH",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // N_SENTENCIA_BOOLEANA_SWITCH ::= OP_REL TRUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA_SWITCH",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // N_SENTENCIA_BOOLEANA_SWITCH ::= OP_REL FALSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA_SWITCH",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // N_SENTENCIA_BOOLEANA_SWITCH ::= OP_REL NUMBER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA_SWITCH",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // N_SENTENCIA_BOOLEANA_SWITCH ::= OP_REL STRING 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA_SWITCH",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // N_SENTENCIA_BOOLEANA_SWITCH ::= STRING OP_REL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA_SWITCH",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // N_SENTENCIA_BOOLEANA_SWITCH ::= OP_REL ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA_SWITCH",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // N_SENTENCIA_BOOLEANA_SWITCH ::= ID OP_REL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA_SWITCH",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // N_SENTENCIA_BOOLEANA ::= FALSE OP_REL TRUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // N_SENTENCIA_BOOLEANA ::= FALSE OP_REL FALSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // N_SENTENCIA_BOOLEANA ::= TRUE OP_REL TRUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // N_SENTENCIA_BOOLEANA ::= TRUE OP_REL STRING TRUE OP_REL FALSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // N_SENTENCIA_BOOLEANA ::= FALSE OP_REL STRING 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // N_SENTENCIA_BOOLEANA ::= STRING OP_REL TRUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // N_SENTENCIA_BOOLEANA ::= STRING OP_REL FALSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // N_SENTENCIA_BOOLEANA ::= TRUE OP_REL NUMBER STRING OP_REL STRING 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // N_SENTENCIA_BOOLEANA ::= FALSE OP_REL NUMBER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // N_SENTENCIA_BOOLEANA ::= STRING OP_REL NUMBER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // N_SENTENCIA_BOOLEANA ::= NUMBER OP_REL TRUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // N_SENTENCIA_BOOLEANA ::= NUMBER OP_REL FALSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // N_SENTENCIA_BOOLEANA ::= NUMBER OP_REL STRING 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // N_SENTENCIA_BOOLEANA ::= TRUE OP_REL ID NUMBER OP_REL NUMBER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // N_SENTENCIA_BOOLEANA ::= FALSE OP_REL ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // N_SENTENCIA_BOOLEANA ::= STRING OP_REL ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // N_SENTENCIA_BOOLEANA ::= NUMBER OP_REL ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // N_SENTENCIA_BOOLEANA ::= ID OP_REL TRUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // N_SENTENCIA_BOOLEANA ::= ID OP_REL FALSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // N_SENTENCIA_BOOLEANA ::= ID OP_REL STRING 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // N_SENTENCIA_BOOLEANA ::= ID OP_REL NUMBER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // N_SENTENCIA_BOOLEANA ::= ID OP_REL ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // N_AND_OR ::= CON_OR N_SENTENCIA_BOOLEANA_ANIDADA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_AND_OR",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // N_AND_OR ::= CON_AND N_SENTENCIA_BOOLEANA_ANIDADA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_AND_OR",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // N_SENTENCIA_BOOLEANA_ANIDADA ::= OPEN_PARENTESIS N_SENTENCIA_BOOLEANA_ANIDADA CLOSE_PARENTESIS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA_ANIDADA",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // N_SENTENCIA_BOOLEANA_ANIDADA ::= OPEN_PARENTESIS N_SENTENCIA_BOOLEANA_ANIDADA CLOSE_PARENTESIS N_AND_OR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA_ANIDADA",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // N_SENTENCIA_BOOLEANA_ANIDADA ::= N_SENTENCIA_BOOLEANA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA_ANIDADA",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // N_SENTENCIA_BOOLEANA_ANIDADA ::= N_SENTENCIA_BOOLEANA N_AND_OR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA_ANIDADA",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // N_CALL_FUNCTION_PARAMETROS ::= N_VALOR_VARIABLE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_CALL_FUNCTION_PARAMETROS",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // N_CALL_FUNCTION_PARAMETROS ::= N_VALOR_VARIABLE COMA N_CALL_FUNCTION_PARAMETROS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_CALL_FUNCTION_PARAMETROS",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // N_CALL_FUNCTION ::= ID OPEN_PARENTESIS CLOSE_PARENTESIS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_CALL_FUNCTION",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // N_CALL_FUNCTION ::= ID OPEN_PARENTESIS N_CALL_FUNCTION_PARAMETROS CLOSE_PARENTESIS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_CALL_FUNCTION",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // N_SWITCH_CASE ::= OPEN_PARENTESIS ELSE CLOSE_PARENTESIS COLON 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_SWITCH_CASE",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // N_SWITCH_CASE ::= OPEN_PARENTESIS ELSE CLOSE_PARENTESIS COLON N_SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_SWITCH_CASE",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // N_SWITCH_CASE ::= OPEN_PARENTESIS N_SENTENCIA_BOOLEANA_SWITCH CLOSE_PARENTESIS COLON N_SWITCH_CASE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_SWITCH_CASE",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // N_SWITCH_CASE ::= OPEN_PARENTESIS N_SENTENCIA_BOOLEANA_SWITCH CLOSE_PARENTESIS COLON N_SENTENCIA N_SWITCH_CASE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_SWITCH_CASE",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // N_SWITCH ::= OPEN_PARENTESIS ID CLOSE_PARENTESIS OPEN_PARENTESIS IF_SWITCH COLON N_SWITCH_CASE CLOSE_BLOCK 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_SWITCH",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // N_IF ::= OPEN_PARENTESIS N_SENTENCIA_BOOLEANA_ANIDADA CLOSE_PARENTESIS OPEN_PARENTESIS IF_SWITCH COLON OPEN_PARENTESIS ELSE CLOSE_PARENTESIS COLON CLOSE_BLOCK 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_IF",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // N_IF ::= OPEN_PARENTESIS N_SENTENCIA_BOOLEANA_ANIDADA CLOSE_PARENTESIS OPEN_PARENTESIS IF_SWITCH COLON CLOSE_BLOCK 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_IF",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // N_IF ::= OPEN_PARENTESIS N_SENTENCIA_BOOLEANA_ANIDADA CLOSE_PARENTESIS OPEN_PARENTESIS IF_SWITCH COLON N_SENTENCIA OPEN_PARENTESIS ELSE CLOSE_PARENTESIS COLON N_SENTENCIA CLOSE_BLOCK 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_IF",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // N_IF ::= OPEN_PARENTESIS N_SENTENCIA_BOOLEANA_ANIDADA CLOSE_PARENTESIS OPEN_PARENTESIS IF_SWITCH COLON N_SENTENCIA CLOSE_BLOCK 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_IF",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // N_FOR ::= OPEN_PARENTESIS ID COMA NUMBER TO NUMBER COMA INCREMENT CLOSE_PARENTESIS OPEN_PARENTESIS FOR COLON CLOSE_BLOCK 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_FOR",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // N_FOR ::= OPEN_PARENTESIS ID COMA NUMBER TO NUMBER COMA INCREMENT CLOSE_PARENTESIS OPEN_PARENTESIS FOR COLON N_SENTENCIA CLOSE_BLOCK 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_FOR",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-13)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // N_WHILE ::= OPEN_PARENTESIS N_SENTENCIA_BOOLEANA_ANIDADA CLOSE_PARENTESIS OPEN_PARENTESIS WHILE COLON CLOSE_BLOCK 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_WHILE",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // N_WHILE ::= OPEN_PARENTESIS N_SENTENCIA_BOOLEANA_ANIDADA CLOSE_PARENTESIS OPEN_PARENTESIS WHILE COLON N_SENTENCIA CLOSE_BLOCK 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object e4 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int e5left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object e5 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int e6left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int e6right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object e6 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int e7left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int e7right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object e7 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int e8left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int e8right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e8 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_WHILE",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // N_SENTENCIA ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        String report = "Syntax error in line " + parser.getS().right + " Column " + parser.getS().left + ". No se esperaba este componente: " +parser.getS().value;
        //parser.addError(report + "\n");
        parser.report_error(report,e); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // N_SENTENCIA ::= N_CALL_FUNCTION PYC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // N_SENTENCIA ::= N_SENTENCIA N_CALL_FUNCTION PYC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // N_SENTENCIA ::= N_CIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // N_SENTENCIA ::= N_SENTENCIA N_CIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // N_SENTENCIA ::= N_PRINT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // N_SENTENCIA ::= N_SENTENCIA N_PRINT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // N_SENTENCIA ::= N_DECLARACION PYC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // N_SENTENCIA ::= N_SENTENCIA N_DECLARACION PYC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // N_SENTENCIA ::= N_SWITCH 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // N_SENTENCIA ::= N_SENTENCIA N_SWITCH 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // N_SENTENCIA ::= N_IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // N_SENTENCIA ::= N_SENTENCIA N_IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // N_SENTENCIA ::= N_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // N_SENTENCIA ::= N_SENTENCIA N_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // N_SENTENCIA ::= N_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // N_SENTENCIA ::= N_SENTENCIA N_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // N_RETORNO_FUNCTION ::= MATRIX 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_RETORNO_FUNCTION",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // N_RETORNO_FUNCTION ::= ARRAY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_RETORNO_FUNCTION",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // N_RETORNO_FUNCTION ::= CHAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_RETORNO_FUNCTION",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // N_RETORNO_FUNCTION ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_RETORNO_FUNCTION",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // N_RETORNO_FUNCTION ::= INTENGER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_RETORNO_FUNCTION",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // N_PARAMETRO_FUNCTION ::= N_RETORNO_FUNCTION ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_PARAMETRO_FUNCTION",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // N_PARAMETRO_FUNCTION ::= N_RETORNO_FUNCTION ID COMA N_PARAMETRO_FUNCTION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_PARAMETRO_FUNCTION",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // N_PARAMETRO ::= OPEN_PARENTESIS N_PARAMETRO_FUNCTION CLOSE_PARENTESIS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_PARAMETRO",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // N_PARAMETRO ::= OPEN_PARENTESIS CLOSE_PARENTESIS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_PARAMETRO",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // N_FUNCTION ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        String report = "Syntax error in line " + parser.getS().right + " Column " + parser.getS().left + ". No se esperaba este componente: " +parser.getS().value;
        //parser.addError(report + "\n");
        parser.report_error(report,e); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_FUNCTION",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // N_FUNCTION ::= N_PARAMETRO ID OPEN_PARENTESIS FUNCTION COLON N_RETORNO_FUNCTION RETURN N_VALOR_VARIABLE PYC CLOSE_BLOCK 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_FUNCTION",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // N_FUNCTION ::= N_PARAMETRO ID OPEN_PARENTESIS FUNCTION COLON NULL CLOSE_BLOCK 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_FUNCTION",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // N_FUNCTION ::= N_PARAMETRO ID OPEN_PARENTESIS FUNCTION COLON NULL N_SENTENCIA CLOSE_BLOCK 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_FUNCTION",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // N_FUNCTION ::= N_PARAMETRO ID OPEN_PARENTESIS FUNCTION COLON N_RETORNO_FUNCTION N_SENTENCIA RETURN N_VALOR_VARIABLE PYC CLOSE_BLOCK 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object e4 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_FUNCTION",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // N_FUNCTIONS ::= N_FUNCTION 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_FUNCTIONS",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // N_FUNCTIONS ::= N_FUNCTIONS N_FUNCTION 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_FUNCTIONS",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // N_MAIN ::= OPEN_PARENTESIS CLOSE_PARENTESIS OPEN_PARENTESIS MAIN COLON CLOSE_BLOCK 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_MAIN",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // N_MAIN ::= OPEN_PARENTESIS CLOSE_PARENTESIS OPEN_PARENTESIS MAIN COLON N_SENTENCIA CLOSE_BLOCK 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_MAIN",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // N_INICIO ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        String report = "Syntax error in line " + parser.getS().right + " Column " + parser.getS().left + ". No se esperaba este componente: " +parser.getS().value;
        //parser.addError(report + "\n");
        parser.report_error(report,e); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // N_INICIO ::= N_FUNCTIONS N_MAIN 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // N_INICIO ::= N_MAIN N_FUNCTIONS 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // N_INICIO ::= N_MAIN 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= N_INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

