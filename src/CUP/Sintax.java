
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Dec 18 17:44:07 CST 2020
//----------------------------------------------------

package CUP;

import java_cup.runtime.Symbol;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Dec 18 17:44:07 CST 2020
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\376\000\002\002\004\000\002\002\003\000\002\002" +
    "\004\000\002\003\011\000\002\003\011\000\002\003\010" +
    "\000\002\003\011\000\002\003\012\000\002\045\002\000" +
    "\002\003\013\000\002\004\004\000\002\004\003\000\002" +
    "\005\015\000\002\005\012\000\002\005\011\000\002\005" +
    "\014\000\002\005\007\000\002\005\013\000\002\005\015" +
    "\000\002\005\014\000\002\006\004\000\002\006\005\000" +
    "\002\007\006\000\002\007\004\000\002\007\005\000\002" +
    "\010\003\000\002\010\003\000\002\010\003\000\002\010" +
    "\004\000\002\010\004\000\002\010\003\000\002\011\004" +
    "\000\002\011\003\000\002\011\004\000\002\011\003\000" +
    "\002\011\004\000\002\011\003\000\002\011\004\000\002" +
    "\011\003\000\002\011\005\000\002\011\004\000\002\011" +
    "\004\000\002\011\003\000\002\011\004\000\002\011\003" +
    "\000\002\011\005\000\002\011\004\000\002\012\012\000" +
    "\002\012\011\000\002\012\012\000\002\012\012\000\002" +
    "\012\012\000\002\013\021\000\002\013\020\000\002\013" +
    "\021\000\002\013\021\000\002\013\021\000\002\013\021" +
    "\000\002\013\021\000\002\013\021\000\002\013\021\000" +
    "\002\013\021\000\002\014\003\000\002\014\003\000\002" +
    "\014\003\000\002\015\013\000\002\015\012\000\002\015" +
    "\013\000\002\015\013\000\002\016\010\000\002\016\007" +
    "\000\002\016\007\000\002\016\006\000\002\016\002\000" +
    "\002\016\010\000\002\017\012\000\002\017\012\000\002" +
    "\017\012\000\002\017\012\000\002\020\010\000\002\020" +
    "\007\000\002\020\007\000\002\020\006\000\002\020\007" +
    "\000\002\020\010\000\002\022\006\000\002\022\005\000" +
    "\002\022\005\000\002\022\005\000\002\023\005\000\002" +
    "\023\003\000\002\023\005\000\002\024\004\000\002\024" +
    "\003\000\002\024\006\000\002\024\005\000\002\024\005" +
    "\000\002\024\005\000\002\026\004\000\002\026\004\000" +
    "\002\026\004\000\002\026\004\000\002\025\005\000\002" +
    "\025\005\000\002\025\005\000\002\025\005\000\002\025" +
    "\005\000\002\025\005\000\002\025\005\000\002\025\005" +
    "\000\002\025\005\000\002\025\005\000\002\025\005\000" +
    "\002\025\005\000\002\025\005\000\002\025\005\000\002" +
    "\025\005\000\002\025\005\000\002\025\005\000\002\025" +
    "\005\000\002\025\005\000\002\025\005\000\002\025\005" +
    "\000\002\025\005\000\002\025\005\000\002\025\005\000" +
    "\002\025\005\000\002\025\004\000\002\025\004\000\002" +
    "\021\004\000\002\021\004\000\002\021\004\000\002\021" +
    "\004\000\002\021\004\000\002\021\004\000\002\021\004" +
    "\000\002\021\004\000\002\021\005\000\002\021\005\000" +
    "\002\021\005\000\002\021\005\000\002\021\003\000\002" +
    "\021\003\000\002\021\003\000\002\021\003\000\002\021" +
    "\003\000\002\027\005\000\002\027\005\000\002\027\004" +
    "\000\002\027\004\000\002\027\004\000\002\027\006\000" +
    "\002\027\004\000\002\027\006\000\002\027\010\000\002" +
    "\027\010\000\002\027\010\000\002\027\010\000\002\027" +
    "\010\000\002\027\010\000\002\027\010\000\002\027\010" +
    "\000\002\027\013\000\002\027\013\000\002\027\013\000" +
    "\002\027\011\000\002\027\005\000\002\027\006\000\002" +
    "\027\005\000\002\027\005\000\002\027\007\000\002\027" +
    "\007\000\002\027\007\000\002\027\007\000\002\027\005" +
    "\000\002\027\005\000\002\027\006\000\002\027\006\000" +
    "\002\027\005\000\002\027\005\000\002\030\005\000\002" +
    "\030\003\000\002\030\005\000\002\031\003\000\002\031" +
    "\003\000\002\031\003\000\002\031\003\000\002\031\003" +
    "\000\002\031\003\000\002\031\003\000\002\031\002\000" +
    "\002\033\003\000\002\033\003\000\002\033\003\000\002" +
    "\033\003\000\002\032\004\000\002\032\006\000\002\032" +
    "\005\000\002\032\003\000\002\032\003\000\002\034\005" +
    "\000\002\034\004\000\002\034\004\000\002\035\005\000" +
    "\002\035\005\000\002\035\005\000\002\036\003\000\002" +
    "\036\003\000\002\036\003\000\002\036\003\000\002\036" +
    "\003\000\002\037\005\000\002\037\004\000\002\037\004" +
    "\000\002\037\005\000\002\040\005\000\002\040\011\000" +
    "\002\040\011\000\002\040\011\000\002\040\011\000\002" +
    "\040\011\000\002\040\007\000\002\041\005\000\002\041" +
    "\004\000\002\041\005\000\002\041\004\000\002\041\004" +
    "\000\002\041\007\000\002\041\012\000\002\041\002\000" +
    "\002\042\010\000\002\042\005\000\002\042\006\000\002" +
    "\042\007\000\002\042\010\000\002\043\004\000\002\043" +
    "\006\000\002\043\003\000\002\044\004\000\002\044\005" +
    "\000\002\044\005\000\002\044\005\000\002\044\003\000" +
    "\002\044\003\000\002\044\003\000\002\044\003\000\002" +
    "\044\003\000\002\044\003\000\002\044\003\000\002\044" +
    "\006\000\002\044\011\000\002\044\004\000\002\044\004" +
    "\000\002\044\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u024d\000\006\003\005\006\004\001\002\000\006\003" +
    "\u0239\007\u023a\001\002\000\004\006\ufff9\001\002\000\006" +
    "\002\000\006\013\001\002\000\004\002\010\001\002\000" +
    "\004\002\001\001\002\000\004\054\044\001\002\000\006" +
    "\002\uffff\006\013\001\002\000\022\003\023\007\015\046" +
    "\021\047\020\050\026\051\017\052\024\054\022\001\002" +
    "\000\006\002\ufff6\006\ufff6\001\002\000\004\054\uffed\001" +
    "\002\000\004\054\040\001\002\000\012\003\030\046\031" +
    "\047\034\050\033\001\002\000\022\006\uffe7\033\uffe7\046" +
    "\uffe7\047\uffe7\050\uffe7\051\uffe7\052\uffe7\054\uffe7\001\002" +
    "\000\022\006\uffe8\033\uffe8\046\uffe8\047\uffe8\050\uffe8\051" +
    "\uffe8\052\uffe8\054\uffe8\001\002\000\004\054\035\001\002" +
    "\000\022\006\uffe3\033\uffe3\046\uffe3\047\uffe3\050\uffe3\051" +
    "\uffe3\052\uffe3\054\uffe3\001\002\000\012\003\030\046\031" +
    "\047\034\050\033\001\002\000\004\007\027\001\002\000" +
    "\022\006\uffe6\033\uffe6\046\uffe6\047\uffe6\050\uffe6\051\uffe6" +
    "\052\uffe6\054\uffe6\001\002\000\004\054\uffec\001\002\000" +
    "\026\003\uff3f\006\uff3f\015\uff3f\033\uff3f\046\uff3f\047\uff3f" +
    "\050\uff3f\051\uff3f\052\uff3f\054\uff3f\001\002\000\026\003" +
    "\uff42\006\uff42\015\uff42\033\uff42\046\uff42\047\uff42\050\uff42" +
    "\051\uff42\052\uff42\054\uff42\001\002\000\022\006\uffe4\033" +
    "\uffe4\046\uffe4\047\uffe4\050\uffe4\051\uffe4\052\uffe4\054\uffe4" +
    "\001\002\000\026\003\uff40\006\uff40\015\uff40\033\uff40\046" +
    "\uff40\047\uff40\050\uff40\051\uff40\052\uff40\054\uff40\001\002" +
    "\000\026\003\uff41\006\uff41\015\uff41\033\uff41\046\uff41\047" +
    "\uff41\050\uff41\051\uff41\052\uff41\054\uff41\001\002\000\004" +
    "\003\036\001\002\000\004\007\uffe9\001\002\000\022\006" +
    "\uffe5\033\uffe5\046\uffe5\047\uffe5\050\uffe5\051\uffe5\052\uffe5" +
    "\054\uffe5\001\002\000\006\007\uffea\014\041\001\002\000" +
    "\020\003\023\046\021\047\020\050\026\051\017\052\024" +
    "\054\022\001\002\000\004\007\uffeb\001\002\000\006\002" +
    "\ufff7\006\ufff7\001\002\000\004\006\045\001\002\000\004" +
    "\025\046\001\002\000\006\003\047\015\050\001\002\000" +
    "\006\002\ufff1\006\ufff1\001\002\000\020\003\023\020\051" +
    "\046\021\047\020\050\026\051\017\052\024\001\002\000" +
    "\022\005\u022e\006\064\046\073\047\066\050\054\051\074" +
    "\052\056\054\063\001\002\000\022\006\064\033\057\046" +
    "\073\047\066\050\054\051\074\052\056\054\063\001\002" +
    "\000\026\003\uffdf\005\uffdf\006\uffdf\033\uffdf\046\uffdf\047" +
    "\uffdf\050\uffdf\051\uffdf\052\uffdf\054\uffdf\001\002\000\006" +
    "\015\u0228\054\u0226\001\002\000\026\003\uffdb\005\uffdb\006" +
    "\uffdb\033\uffdb\046\uffdb\047\uffdb\050\uffdb\051\uffdb\052\uffdb" +
    "\054\uffdb\001\002\000\014\003\030\012\u020a\046\031\047" +
    "\034\050\033\001\002\000\022\010\uff43\020\112\021\111" +
    "\022\116\023\114\024\113\054\117\055\110\001\002\000" +
    "\026\003\uffd7\005\uffd7\006\uffd7\033\uffd7\046\uffd7\047\uffd7" +
    "\050\uffd7\051\uffd7\052\uffd7\054\uffd7\001\002\000\024\003" +
    "\u0200\006\064\033\u01ff\046\073\047\066\050\054\051\074" +
    "\052\056\054\063\001\002\000\022\003\u01fd\006\252\021" +
    "\u01f9\022\u01fa\023\242\037\237\054\u01fc\055\240\001\002" +
    "\000\012\003\u01d6\006\125\012\u01d8\015\u01d7\001\002\000" +
    "\026\003\245\006\252\021\241\022\243\023\242\027\246" +
    "\034\250\037\237\054\244\055\240\001\002\000\004\010" +
    "\236\001\002\000\006\003\232\054\230\001\002\000\026" +
    "\003\uffdd\005\uffdd\006\uffdd\033\uffdd\046\uffdd\047\uffdd\050" +
    "\uffdd\051\uffdd\052\uffdd\054\uffdd\001\002\000\004\010\227" +
    "\001\002\000\026\003\uffd5\005\uffd5\006\uffd5\033\uffd5\046" +
    "\uffd5\047\uffd5\050\uffd5\051\uffd5\052\uffd5\054\uffd5\001\002" +
    "\000\026\003\uffe1\005\uffe1\006\uffe1\033\uffe1\046\uffe1\047" +
    "\uffe1\050\uffe1\051\uffe1\052\uffe1\054\uffe1\001\002\000\006" +
    "\015\152\054\150\001\002\000\016\003\030\012\076\015" +
    "\075\046\031\047\034\050\033\001\002\000\004\003\147" +
    "\001\002\000\010\003\141\054\140\055\142\001\002\000" +
    "\010\003\101\015\102\054\100\001\002\000\004\015\104" +
    "\001\002\000\004\010\uff52\001\002\000\004\003\103\001" +
    "\002\000\004\010\uff51\001\002\000\006\012\107\054\105" +
    "\001\002\000\006\003\126\006\125\001\002\000\004\010" +
    "\uff54\001\002\000\026\003\uff43\013\uff43\014\uff43\020\112" +
    "\021\111\022\116\023\114\024\113\054\117\055\110\001" +
    "\002\000\020\003\uff4a\005\uff4a\007\uff4a\010\uff4a\013\uff4a" +
    "\014\uff4a\040\uff4a\001\002\000\020\003\uff45\005\uff45\007" +
    "\uff45\010\uff45\013\uff45\014\uff45\040\uff45\001\002\000\020" +
    "\003\uff47\005\uff47\007\uff47\010\uff47\013\uff47\014\uff47\040" +
    "\uff47\001\002\000\020\003\uff46\005\uff46\007\uff46\010\uff46" +
    "\013\uff46\014\uff46\040\uff46\001\002\000\020\003\uff48\005" +
    "\uff48\007\uff48\010\uff48\013\uff48\014\uff48\040\uff48\001\002" +
    "\000\004\010\uff60\001\002\000\020\003\uff44\005\uff44\007" +
    "\uff44\010\uff44\013\uff44\014\uff44\040\uff44\001\002\000\020" +
    "\003\uff49\005\uff49\007\uff49\010\uff49\013\uff49\014\uff49\040" +
    "\uff49\001\002\000\010\003\122\013\123\014\121\001\002" +
    "\000\026\003\uff43\013\uff43\014\uff43\020\112\021\111\022" +
    "\116\023\114\024\113\054\117\055\110\001\002\000\010" +
    "\010\uff37\013\uff37\014\uff37\001\002\000\010\010\uff38\013" +
    "\uff38\014\uff38\001\002\000\010\010\uff39\013\uff39\014\uff39" +
    "\001\002\000\026\003\132\007\130\014\uff43\020\112\021" +
    "\111\022\116\023\114\024\113\054\117\055\110\001\002" +
    "\000\004\006\127\001\002\000\004\010\uffaa\001\002\000" +
    "\004\010\uffab\001\002\000\004\007\137\001\002\000\004" +
    "\010\uffa9\001\002\000\006\007\uffa7\014\134\001\002\000" +
    "\026\003\136\007\uff43\014\uff43\020\112\021\111\022\116" +
    "\023\114\024\113\054\117\055\110\001\002\000\004\007" +
    "\uffa8\001\002\000\004\007\uffa6\001\002\000\004\010\uffac" +
    "\001\002\000\020\003\uffc2\005\uffc2\007\uffc2\013\uffc2\014" +
    "\uffc2\035\uffc2\040\uffc2\001\002\000\020\003\uffc1\005\uffc1" +
    "\007\uffc1\013\uffc1\014\uffc1\035\uffc1\040\uffc1\001\002\000" +
    "\020\003\uffc3\005\uffc3\007\uffc3\013\uffc3\014\uffc3\035\uffc3" +
    "\040\uffc3\001\002\000\004\013\144\001\002\000\012\003" +
    "\030\046\031\047\034\050\033\001\002\000\004\054\146" +
    "\001\002\000\004\010\uff61\001\002\000\004\010\uff53\001" +
    "\002\000\014\003\156\010\uff4c\014\155\015\157\054\154" +
    "\001\002\000\004\010\uff6d\001\002\000\004\003\153\001" +
    "\002\000\004\010\uff59\001\002\000\004\003\226\001\002" +
    "\000\004\054\224\001\002\000\004\010\uff58\001\002\000" +
    "\030\006\175\020\163\021\162\022\167\023\166\024\164" +
    "\040\172\041\165\042\161\054\171\055\160\001\002\000" +
    "\042\003\uff0f\006\uff0f\007\uff0f\010\uff0f\020\uff0f\021\uff0f" +
    "\022\uff0f\023\uff0f\024\uff0f\040\uff0f\041\uff0f\042\uff0f\044" +
    "\uff0f\045\uff0f\054\uff0f\055\uff0f\001\002\000\004\003\223" +
    "\001\002\000\042\003\uff0d\006\uff0d\007\uff0d\010\uff0d\020" +
    "\uff0d\021\uff0d\022\uff0d\023\uff0d\024\uff0d\040\uff0d\041\uff0d" +
    "\042\uff0d\044\uff0d\045\uff0d\054\uff0d\055\uff0d\001\002\000" +
    "\042\003\uff0a\006\uff0a\007\uff0a\010\uff0a\020\uff0a\021\uff0a" +
    "\022\uff0a\023\uff0a\024\uff0a\040\uff0a\041\uff0a\042\uff0a\044" +
    "\uff0a\045\uff0a\054\uff0a\055\uff0a\001\002\000\042\003\uff0b" +
    "\006\uff0b\007\uff0b\010\uff0b\020\uff0b\021\uff0b\022\uff0b\023" +
    "\uff0b\024\uff0b\040\uff0b\041\uff0b\042\uff0b\044\uff0b\045\uff0b" +
    "\054\uff0b\055\uff0b\001\002\000\004\003\222\001\002\000" +
    "\042\003\uff0e\006\uff0e\007\uff0e\010\uff0e\020\uff0e\021\uff0e" +
    "\022\uff0e\023\uff0e\024\uff0e\040\uff0e\041\uff0e\042\uff0e\044" +
    "\uff0e\045\uff0e\054\uff0e\055\uff0e\001\002\000\042\003\uff0c" +
    "\006\uff0c\007\uff0c\010\uff0c\020\uff0c\021\uff0c\022\uff0c\023" +
    "\uff0c\024\uff0c\040\uff0c\041\uff0c\042\uff0c\044\uff0c\045\uff0c" +
    "\054\uff0c\055\uff0c\001\002\000\004\010\uff5a\001\002\000" +
    "\036\003\126\006\125\010\uff09\012\212\020\uff09\021\uff09" +
    "\022\uff09\023\uff09\024\uff09\040\uff09\041\uff09\042\uff09\054" +
    "\uff09\055\uff09\001\002\000\032\003\220\006\202\020\163" +
    "\021\162\022\167\023\166\024\164\040\172\041\165\042" +
    "\161\054\176\055\160\001\002\000\042\003\uff14\006\uff14" +
    "\007\uff14\010\uff14\020\uff14\021\uff14\022\uff14\023\uff14\024" +
    "\uff14\040\uff14\041\206\042\205\044\uff14\045\uff14\054\uff14" +
    "\055\uff14\001\002\000\032\006\202\010\uff6a\020\163\021" +
    "\162\022\167\023\166\024\164\040\172\041\165\042\161" +
    "\054\176\055\160\001\002\000\030\006\175\020\163\021" +
    "\162\022\167\023\166\024\164\040\172\041\165\042\161" +
    "\054\176\055\160\001\002\000\044\003\uff09\006\uff09\007" +
    "\uff09\010\uff09\012\212\020\uff09\021\uff09\022\uff09\023\uff09" +
    "\024\uff09\040\uff09\041\uff09\042\uff09\044\uff09\045\uff09\054" +
    "\uff09\055\uff09\001\002\000\032\006\202\007\200\020\163" +
    "\021\162\022\167\023\166\024\164\040\172\041\165\042" +
    "\161\054\176\055\160\001\002\000\042\003\uff11\006\uff11" +
    "\007\uff11\010\uff11\020\uff11\021\uff11\022\uff11\023\uff11\024" +
    "\uff11\040\uff11\041\uff11\042\uff11\044\uff11\045\uff11\054\uff11" +
    "\055\uff11\001\002\000\042\003\uff16\006\uff16\007\uff16\010" +
    "\uff16\020\uff16\021\uff16\022\uff16\023\uff16\024\uff16\040\uff16" +
    "\041\206\042\205\044\uff16\045\uff16\054\uff16\055\uff16\001" +
    "\002\000\030\006\175\020\163\021\162\022\167\023\166" +
    "\024\164\040\172\041\165\042\161\054\176\055\160\001" +
    "\002\000\032\006\202\007\204\020\163\021\162\022\167" +
    "\023\166\024\164\040\172\041\165\042\161\054\176\055" +
    "\160\001\002\000\042\003\uff11\006\uff11\007\uff11\010\uff11" +
    "\020\uff11\021\uff11\022\uff11\023\uff11\024\uff11\040\uff11\041" +
    "\uff11\042\uff11\044\uff11\045\uff11\054\uff11\055\uff11\001\002" +
    "\000\030\006\202\020\163\021\162\022\167\023\166\024" +
    "\164\040\172\041\165\042\161\054\176\055\160\001\002" +
    "\000\030\006\202\020\163\021\162\022\167\023\166\024" +
    "\164\040\172\041\165\042\161\054\176\055\160\001\002" +
    "\000\042\003\uff12\006\uff12\007\uff12\010\uff12\020\uff12\021" +
    "\uff12\022\uff12\023\uff12\024\uff12\040\uff12\041\uff12\042\uff12" +
    "\044\uff12\045\uff12\054\uff12\055\uff12\001\002\000\042\003" +
    "\uff10\006\uff10\007\uff10\010\uff10\020\uff10\021\uff10\022\uff10" +
    "\023\uff10\024\uff10\040\uff10\041\uff10\042\uff10\044\uff10\045" +
    "\uff10\054\uff10\055\uff10\001\002\000\042\003\uff15\006\uff15" +
    "\007\uff15\010\uff15\020\uff15\021\uff15\022\uff15\023\uff15\024" +
    "\uff15\040\uff15\041\uff15\042\uff15\044\uff15\045\uff15\054\uff15" +
    "\055\uff15\001\002\000\010\003\141\054\140\055\142\001" +
    "\002\000\004\013\214\001\002\000\044\003\uff08\006\uff08" +
    "\007\uff08\010\uff08\012\215\020\uff08\021\uff08\022\uff08\023" +
    "\uff08\024\uff08\040\uff08\041\uff08\042\uff08\044\uff08\045\uff08" +
    "\054\uff08\055\uff08\001\002\000\010\003\141\054\140\055" +
    "\142\001\002\000\004\013\217\001\002\000\042\003\uff07" +
    "\006\uff07\007\uff07\010\uff07\020\uff07\021\uff07\022\uff07\023" +
    "\uff07\024\uff07\040\uff07\041\uff07\042\uff07\044\uff07\045\uff07" +
    "\054\uff07\055\uff07\001\002\000\042\003\uff06\006\uff06\007" +
    "\uff06\010\uff06\020\uff06\021\uff06\022\uff06\023\uff06\024\uff06" +
    "\040\uff06\041\uff06\042\uff06\044\uff06\045\uff06\054\uff06\055" +
    "\uff06\001\002\000\042\003\uff13\006\uff13\007\uff13\010\uff13" +
    "\020\uff13\021\uff13\022\uff13\023\uff13\024\uff13\040\uff13\041" +
    "\206\042\205\044\uff13\045\uff13\054\uff13\055\uff13\001\002" +
    "\000\042\003\uff05\006\uff05\007\uff05\010\uff05\020\uff05\021" +
    "\uff05\022\uff05\023\uff05\024\uff05\040\uff05\041\uff05\042\uff05" +
    "\044\uff05\045\uff05\054\uff05\055\uff05\001\002\000\042\003" +
    "\uff04\006\uff04\007\uff04\010\uff04\020\uff04\021\uff04\022\uff04" +
    "\023\uff04\024\uff04\040\uff04\041\uff04\042\uff04\044\uff04\045" +
    "\uff04\054\uff04\055\uff04\001\002\000\010\010\uff4c\014\155" +
    "\054\154\001\002\000\004\010\uff4d\001\002\000\004\010" +
    "\uff4b\001\002\000\026\003\uffd3\005\uffd3\006\uffd3\033\uffd3" +
    "\046\uffd3\047\uffd3\050\uffd3\051\uffd3\052\uffd3\054\uffd3\001" +
    "\002\000\014\003\234\010\uff4c\014\155\015\235\054\154" +
    "\001\002\000\004\010\uff6c\001\002\000\004\015\233\001" +
    "\002\000\022\003\uff35\006\uff35\021\uff35\022\uff35\023\uff35" +
    "\037\uff35\054\uff35\055\uff35\001\002\000\022\003\uff34\006" +
    "\uff34\021\uff34\022\uff34\023\uff34\037\uff34\054\uff34\055\uff34" +
    "\001\002\000\022\003\uff36\006\uff36\021\uff36\022\uff36\023" +
    "\uff36\037\uff36\054\uff36\055\uff36\001\002\000\026\003\uffd9" +
    "\005\uffd9\006\uffd9\033\uffd9\046\uffd9\047\uffd9\050\uffd9\051" +
    "\uffd9\052\uffd9\054\uffd9\001\002\000\004\003\u018c\001\002" +
    "\000\004\037\u01d5\001\002\000\004\037\u017e\001\002\000" +
    "\004\037\u01d4\001\002\000\004\037\u016b\001\002\000\012" +
    "\003\u0104\007\u0105\014\u0102\037\272\001\002\000\012\006" +
    "\265\007\373\014\345\037\266\001\002\000\006\003\u01b4" +
    "\015\u01b5\001\002\000\006\003\306\007\307\001\002\000" +
    "\006\003\276\015\277\001\002\000\014\003\uffa4\007\uffa4" +
    "\010\uffa4\044\260\045\261\001\002\000\024\003\255\006" +
    "\252\007\253\021\241\022\243\023\242\037\237\054\254" +
    "\055\240\001\002\000\004\003\274\001\002\000\004\037" +
    "\272\001\002\000\006\006\265\037\266\001\002\000\004" +
    "\007\257\001\002\000\014\003\uffa2\007\uffa2\010\uffa2\044" +
    "\260\045\261\001\002\000\022\003\270\006\252\021\241" +
    "\022\243\023\242\037\237\054\254\055\240\001\002\000" +
    "\022\003\263\006\252\021\241\022\243\023\242\037\237" +
    "\054\254\055\240\001\002\000\010\003\uffa3\007\uffa3\010" +
    "\uffa3\001\002\000\014\003\uff9c\006\265\007\uff9c\010\uff9c" +
    "\037\266\001\002\000\010\003\uff9e\007\uff9e\010\uff9e\001" +
    "\002\000\004\007\267\001\002\000\014\003\uff82\007\uff82" +
    "\010\uff82\044\uff82\045\uff82\001\002\000\010\003\uffa0\007" +
    "\uffa0\010\uffa0\001\002\000\014\003\uff9d\006\265\007\uff9d" +
    "\010\uff9d\037\266\001\002\000\010\003\uff9f\007\uff9f\010" +
    "\uff9f\001\002\000\030\006\175\020\163\021\162\022\167" +
    "\023\166\024\164\040\172\041\165\042\161\054\176\055" +
    "\160\001\002\000\042\003\uff9b\006\202\007\uff9b\010\uff9b" +
    "\020\163\021\162\022\167\023\166\024\164\040\172\041" +
    "\165\042\161\044\uff9b\045\uff9b\054\176\055\160\001\002" +
    "\000\010\003\uffa1\007\uffa1\010\uffa1\001\002\000\010\003" +
    "\uffa5\007\uffa5\010\uffa5\001\002\000\026\003\uff1a\005\uff1a" +
    "\006\uff1a\033\uff1a\046\uff1a\047\uff1a\050\uff1a\051\uff1a\052" +
    "\uff1a\054\uff1a\001\002\000\006\003\301\054\300\001\002" +
    "\000\006\003\303\005\302\001\002\000\026\003\uff19\005" +
    "\uff19\006\uff19\033\uff19\046\uff19\047\uff19\050\uff19\051\uff19" +
    "\052\uff19\054\uff19\001\002\000\006\003\304\010\305\001" +
    "\002\000\026\003\uff18\005\uff18\006\uff18\033\uff18\046\uff18" +
    "\047\uff18\050\uff18\051\uff18\052\uff18\054\uff18\001\002\000" +
    "\026\003\uff17\005\uff17\006\uff17\033\uff17\046\uff17\047\uff17" +
    "\050\uff17\051\uff17\052\uff17\054\uff17\001\002\000\026\003" +
    "\uff1b\005\uff1b\006\uff1b\033\uff1b\046\uff1b\047\uff1b\050\uff1b" +
    "\051\uff1b\052\uff1b\054\uff1b\001\002\000\004\006\u01af\001" +
    "\002\000\006\003\311\006\310\001\002\000\006\026\u01a0" +
    "\030\u01a1\001\002\000\006\026\312\030\313\001\002\000" +
    "\004\015\331\001\002\000\004\015\314\001\002\000\020" +
    "\006\064\046\073\047\066\050\054\051\074\052\056\054" +
    "\063\001\002\000\022\005\321\006\064\046\073\047\066" +
    "\050\054\051\074\052\056\054\063\001\002\000\026\003" +
    "\uffdc\005\uffdc\006\uffdc\033\uffdc\046\uffdc\047\uffdc\050\uffdc" +
    "\051\uffdc\052\uffdc\054\uffdc\001\002\000\026\003\uffd8\005" +
    "\uffd8\006\uffd8\033\uffd8\046\uffd8\047\uffd8\050\uffd8\051\uffd8" +
    "\052\uffd8\054\uffd8\001\002\000\026\003\uffd6\005\uffd6\006" +
    "\uffd6\033\uffd6\046\uffd6\047\uffd6\050\uffd6\051\uffd6\052\uffd6" +
    "\054\uffd6\001\002\000\026\003\uffcf\005\uffcf\006\uffcf\033" +
    "\uffcf\046\uffcf\047\uffcf\050\uffcf\051\uffcf\052\uffcf\054\uffcf" +
    "\001\002\000\026\003\uffe2\005\uffe2\006\uffe2\033\uffe2\046" +
    "\uffe2\047\uffe2\050\uffe2\051\uffe2\052\uffe2\054\uffe2\001\002" +
    "\000\026\003\uffe0\005\uffe0\006\uffe0\033\uffe0\046\uffe0\047" +
    "\uffe0\050\uffe0\051\uffe0\052\uffe0\054\uffe0\001\002\000\004" +
    "\010\330\001\002\000\004\010\327\001\002\000\026\003" +
    "\uffde\005\uffde\006\uffde\033\uffde\046\uffde\047\uffde\050\uffde" +
    "\051\uffde\052\uffde\054\uffde\001\002\000\026\003\uffda\005" +
    "\uffda\006\uffda\033\uffda\046\uffda\047\uffda\050\uffda\051\uffda" +
    "\052\uffda\054\uffda\001\002\000\026\003\uffd4\005\uffd4\006" +
    "\uffd4\033\uffd4\046\uffd4\047\uffd4\050\uffd4\051\uffd4\052\uffd4" +
    "\054\uffd4\001\002\000\020\006\064\046\073\047\066\050" +
    "\054\051\074\052\056\054\063\001\002\000\022\005\uffb8" +
    "\006\334\046\073\047\066\050\054\051\074\052\056\054" +
    "\063\001\002\000\004\005\u019f\001\002\000\030\003\336" +
    "\006\252\021\241\022\243\023\242\027\246\032\335\034" +
    "\250\037\237\054\244\055\240\001\002\000\004\007\u019c" +
    "\001\002\000\012\006\265\007\346\014\345\037\266\001" +
    "\002\000\006\003\306\007\340\001\002\000\010\003\311" +
    "\006\310\015\341\001\002\000\022\005\uffb8\006\334\046" +
    "\073\047\066\050\054\051\074\052\056\054\063\001\002" +
    "\000\022\005\uffb8\006\334\046\073\047\066\050\054\051" +
    "\074\052\056\054\063\001\002\000\004\005\uffbb\001\002" +
    "\000\004\005\uffbc\001\002\000\010\003\141\054\140\055" +
    "\142\001\002\000\006\006\347\015\350\001\002\000\004" +
    "\026\353\001\002\000\020\006\064\046\073\047\066\050" +
    "\054\051\074\052\056\054\063\001\002\000\022\005\uffb8" +
    "\006\334\046\073\047\066\050\054\051\074\052\056\054" +
    "\063\001\002\000\004\005\uffb7\001\002\000\004\015\354" +
    "\001\002\000\020\006\357\046\073\047\066\050\054\051" +
    "\074\052\056\054\063\001\002\000\004\005\u018f\001\002" +
    "\000\022\005\uffb8\006\334\046\073\047\066\050\054\051" +
    "\074\052\056\054\063\001\002\000\032\003\371\006\252" +
    "\021\362\022\366\023\365\024\363\027\246\032\367\034" +
    "\250\037\360\054\370\055\361\001\002\000\016\003\u018c" +
    "\021\u011e\022\u0120\023\u011d\054\u011c\055\u011f\001\002\000" +
    "\010\007\uff71\011\u0118\037\u0185\001\002\000\006\007\uff74" +
    "\037\u017e\001\002\000\004\007\uff72\001\002\000\004\007" +
    "\u0179\001\002\000\004\037\u0172\001\002\000\006\007\uff73" +
    "\037\u016b\001\002\000\004\007\u0168\001\002\000\014\003" +
    "\u0104\007\u0105\011\u0103\014\u0102\037\u0106\001\002\000\014" +
    "\006\372\007\373\014\345\015\374\037\266\001\002\000" +
    "\006\007\267\015\377\001\002\000\004\006\347\001\002" +
    "\000\020\006\064\046\073\047\066\050\054\051\074\052" +
    "\056\054\063\001\002\000\020\006\357\046\073\047\066" +
    "\050\054\051\074\052\056\054\063\001\002\000\004\005" +
    "\uffae\001\002\000\020\006\064\046\073\047\066\050\054" +
    "\051\074\052\056\054\063\001\002\000\020\006\357\046" +
    "\073\047\066\050\054\051\074\052\056\054\063\001\002" +
    "\000\004\005\uffad\001\002\000\010\003\141\054\140\055" +
    "\142\001\002\000\006\054\u0134\055\u0135\001\002\000\010" +
    "\003\141\054\140\055\142\001\002\000\006\003\u0108\006" +
    "\u0107\001\002\000\032\006\175\007\uff80\020\163\021\162" +
    "\022\167\023\166\024\164\040\172\041\165\042\161\054" +
    "\176\055\160\001\002\000\004\026\u0121\001\002\000\004" +
    "\026\u0109\001\002\000\004\015\u010a\001\002\000\004\006" +
    "\u010b\001\002\000\024\003\u0114\021\u0110\022\u0112\023\u0111" +
    "\024\363\032\367\037\u010e\054\u0113\055\u010f\001\002\000" +
    "\004\005\u010d\001\002\000\026\003\uffb4\005\uffb4\006\uffb4" +
    "\033\uffb4\046\uffb4\047\uffb4\050\uffb4\051\uffb4\052\uffb4\054" +
    "\uffb4\001\002\000\014\021\u011e\022\u0120\023\u011d\054\u011c" +
    "\055\u011f\001\002\000\010\007\uff71\011\u0118\037\u0119\001" +
    "\002\000\004\007\uff74\001\002\000\004\037\u0117\001\002" +
    "\000\004\007\uff73\001\002\000\006\011\u0103\037\u0116\001" +
    "\002\000\010\006\u0115\007\uff70\015\374\001\002\000\004" +
    "\015\377\001\002\000\004\007\uff80\001\002\000\004\007" +
    "\uff7e\001\002\000\006\054\u011a\055\u011b\001\002\000\004" +
    "\007\uff79\001\002\000\004\007\uff75\001\002\000\004\007" +
    "\uff78\001\002\000\004\007\uff7f\001\002\000\004\007\uff7d" +
    "\001\002\000\004\007\uff7a\001\002\000\004\007\uff7c\001" +
    "\002\000\004\007\uff7b\001\002\000\006\003\u0122\015\u0123" +
    "\001\002\000\004\006\u010b\001\002\000\004\006\u010b\001" +
    "\002\000\004\005\u0125\001\002\000\026\003\uffb6\005\uffb6" +
    "\006\uffb6\033\uffb6\046\uffb6\047\uffb6\050\uffb6\051\uffb6\052" +
    "\uffb6\054\uffb6\001\002\000\004\005\u0127\001\002\000\026" +
    "\003\uffb3\005\uffb3\006\uffb3\033\uffb3\046\uffb3\047\uffb3\050" +
    "\uffb3\051\uffb3\052\uffb3\054\uffb3\001\002\000\004\035\u0129" +
    "\001\002\000\010\003\141\054\140\055\142\001\002\000" +
    "\004\014\u012b\001\002\000\004\040\u012c\001\002\000\010" +
    "\003\141\054\140\055\142\001\002\000\004\007\u012e\001" +
    "\002\000\004\006\u012f\001\002\000\004\031\u0130\001\002" +
    "\000\004\015\u0131\001\002\000\020\006\064\046\073\047" +
    "\066\050\054\051\074\052\056\054\063\001\002\000\022" +
    "\005\u0133\006\064\046\073\047\066\050\054\051\074\052" +
    "\056\054\063\001\002\000\026\003\uffca\005\uffca\006\uffca" +
    "\033\uffca\046\uffca\047\uffca\050\uffca\051\uffca\052\uffca\054" +
    "\uffca\001\002\000\004\007\uff77\001\002\000\004\007\uff76" +
    "\001\002\000\006\003\u0138\035\u0137\001\002\000\010\003" +
    "\141\054\140\055\142\001\002\000\010\003\141\054\140" +
    "\055\142\001\002\000\004\014\u013a\001\002\000\004\040" +
    "\u013b\001\002\000\010\003\141\054\140\055\142\001\002" +
    "\000\004\007\u013d\001\002\000\004\006\u013e\001\002\000" +
    "\004\031\u013f\001\002\000\004\015\u0140\001\002\000\020" +
    "\006\064\046\073\047\066\050\054\051\074\052\056\054" +
    "\063\001\002\000\022\005\u0142\006\064\046\073\047\066" +
    "\050\054\051\074\052\056\054\063\001\002\000\026\003" +
    "\uffc9\005\uffc9\006\uffc9\033\uffc9\046\uffc9\047\uffc9\050\uffc9" +
    "\051\uffc9\052\uffc9\054\uffc9\001\002\000\006\003\u0145\014" +
    "\u0144\001\002\000\006\003\u014e\040\u014f\001\002\000\004" +
    "\040\u0146\001\002\000\010\003\141\054\140\055\142\001" +
    "\002\000\004\007\u0148\001\002\000\004\006\u0149\001\002" +
    "\000\004\031\u014a\001\002\000\004\015\u014b\001\002\000" +
    "\020\006\064\046\073\047\066\050\054\051\074\052\056" +
    "\054\063\001\002\000\022\005\u014d\006\064\046\073\047" +
    "\066\050\054\051\074\052\056\054\063\001\002\000\026" +
    "\003\uffc8\005\uffc8\006\uffc8\033\uffc8\046\uffc8\047\uffc8\050" +
    "\uffc8\051\uffc8\052\uffc8\054\uffc8\001\002\000\010\003\141" +
    "\054\140\055\142\001\002\000\010\003\141\054\140\055" +
    "\142\001\002\000\004\007\u0151\001\002\000\006\003\u0153" +
    "\006\u0152\001\002\000\004\031\u0158\001\002\000\004\031" +
    "\u0154\001\002\000\004\015\u0155\001\002\000\020\006\064" +
    "\046\073\047\066\050\054\051\074\052\056\054\063\001" +
    "\002\000\022\005\u0157\006\064\046\073\047\066\050\054" +
    "\051\074\052\056\054\063\001\002\000\026\003\uffc6\005" +
    "\uffc6\006\uffc6\033\uffc6\046\uffc6\047\uffc6\050\uffc6\051\uffc6" +
    "\052\uffc6\054\uffc6\001\002\000\006\003\u0159\015\u015a\001" +
    "\002\000\020\006\064\046\073\047\066\050\054\051\074" +
    "\052\056\054\063\001\002\000\022\005\u015b\006\064\046" +
    "\073\047\066\050\054\051\074\052\056\054\063\001\002" +
    "\000\026\003\uffcc\005\uffcc\006\uffcc\033\uffcc\046\uffcc\047" +
    "\uffcc\050\uffcc\051\uffcc\052\uffcc\054\uffcc\001\002\000\024" +
    "\003\u015e\005\u015d\006\064\046\073\047\066\050\054\051" +
    "\074\052\056\054\063\001\002\000\026\003\uffcd\005\uffcd" +
    "\006\uffcd\033\uffcd\046\uffcd\047\uffcd\050\uffcd\051\uffcd\052" +
    "\uffcd\054\uffcd\001\002\000\026\003\uffc4\005\uffc4\006\uffc4" +
    "\033\uffc4\046\uffc4\047\uffc4\050\uffc4\051\uffc4\052\uffc4\054" +
    "\uffc4\001\002\000\022\005\u0160\006\064\046\073\047\066" +
    "\050\054\051\074\052\056\054\063\001\002\000\026\003" +
    "\uffc5\005\uffc5\006\uffc5\033\uffc5\046\uffc5\047\uffc5\050\uffc5" +
    "\051\uffc5\052\uffc5\054\uffc5\001\002\000\004\007\u0162\001" +
    "\002\000\004\006\u0163\001\002\000\004\031\u0164\001\002" +
    "\000\004\015\u0165\001\002\000\020\006\064\046\073\047" +
    "\066\050\054\051\074\052\056\054\063\001\002\000\022" +
    "\005\u0167\006\064\046\073\047\066\050\054\051\074\052" +
    "\056\054\063\001\002\000\026\003\uffc7\005\uffc7\006\uffc7" +
    "\033\uffc7\046\uffc7\047\uffc7\050\uffc7\051\uffc7\052\uffc7\054" +
    "\uffc7\001\002\000\004\015\u0169\001\002\000\022\005\uffaf" +
    "\006\064\046\073\047\066\050\054\051\074\052\056\054" +
    "\063\001\002\000\022\005\uffb0\006\064\046\073\047\066" +
    "\050\054\051\074\052\056\054\063\001\002\000\016\003" +
    "\u016e\021\u016f\022\u0171\023\u016d\054\u016c\055\u0170\001\002" +
    "\000\014\003\uff97\007\uff97\010\uff97\044\uff97\045\uff97\001" +
    "\002\000\014\003\uff88\007\uff88\010\uff88\044\uff88\045\uff88" +
    "\001\002\000\014\003\uff96\007\uff96\010\uff96\044\uff96\045" +
    "\uff96\001\002\000\014\003\uff83\007\uff83\010\uff83\044\uff83" +
    "\045\uff83\001\002\000\014\003\uff8d\007\uff8d\010\uff8d\044" +
    "\uff8d\045\uff8d\001\002\000\014\003\uff84\007\uff84\010\uff84" +
    "\044\uff84\045\uff84\001\002\000\020\003\u0175\007\uff7e\021" +
    "\u0176\022\u0178\023\u0174\054\u0173\055\u0177\001\002\000\014" +
    "\003\uff99\007\uff99\010\uff99\044\uff99\045\uff99\001\002\000" +
    "\014\003\uff8b\007\uff8b\010\uff8b\044\uff8b\045\uff8b\001\002" +
    "\000\014\003\uff98\007\uff98\010\uff98\044\uff98\045\uff98\001" +
    "\002\000\014\003\uff89\007\uff89\010\uff89\044\uff89\045\uff89" +
    "\001\002\000\014\003\uff8e\007\uff8e\010\uff8e\044\uff8e\045" +
    "\uff8e\001\002\000\014\003\uff8a\007\uff8a\010\uff8a\044\uff8a" +
    "\045\uff8a\001\002\000\004\015\u017a\001\002\000\020\006" +
    "\357\046\073\047\066\050\054\051\074\052\056\054\063" +
    "\001\002\000\004\005\uffb1\001\002\000\020\006\357\046" +
    "\073\047\066\050\054\051\074\052\056\054\063\001\002" +
    "\000\004\005\uffb2\001\002\000\016\003\u0181\021\u0182\022" +
    "\u0184\023\u0180\054\u017f\055\u0183\001\002\000\014\003\uff95" +
    "\007\uff95\010\uff95\044\uff95\045\uff95\001\002\000\014\003" +
    "\uff87\007\uff87\010\uff87\044\uff87\045\uff87\001\002\000\014" +
    "\003\uff94\007\uff94\010\uff94\044\uff94\045\uff94\001\002\000" +
    "\014\003\uff85\007\uff85\010\uff85\044\uff85\045\uff85\001\002" +
    "\000\014\003\uff8c\007\uff8c\010\uff8c\044\uff8c\045\uff8c\001" +
    "\002\000\014\003\uff86\007\uff86\010\uff86\044\uff86\045\uff86" +
    "\001\002\000\020\003\u0188\007\uff79\021\u0189\022\u018b\023" +
    "\u0187\054\u0186\055\u018a\001\002\000\014\003\uff9a\007\uff9a" +
    "\010\uff9a\044\uff9a\045\uff9a\001\002\000\014\003\uff91\007" +
    "\uff91\010\uff91\044\uff91\045\uff91\001\002\000\014\003\uff92" +
    "\007\uff92\010\uff92\044\uff92\045\uff92\001\002\000\014\003" +
    "\uff8f\007\uff8f\010\uff8f\044\uff8f\045\uff8f\001\002\000\014" +
    "\003\uff93\007\uff93\010\uff93\044\uff93\045\uff93\001\002\000" +
    "\014\003\uff90\007\uff90\010\uff90\044\uff90\045\uff90\001\002" +
    "\000\014\003\uff81\007\uff81\010\uff81\044\uff81\045\uff81\001" +
    "\002\000\004\005\u018e\001\002\000\026\003\uffbd\005\uffbd" +
    "\006\uffbd\033\uffbd\046\uffbd\047\uffbd\050\uffbd\051\uffbd\052" +
    "\uffbd\054\uffbd\001\002\000\026\003\uffb5\005\uffb5\006\uffb5" +
    "\033\uffb5\046\uffb5\047\uffb5\050\uffb5\051\uffb5\052\uffb5\054" +
    "\uffb5\001\002\000\004\035\u0191\001\002\000\010\003\141" +
    "\054\140\055\142\001\002\000\004\014\u0193\001\002\000" +
    "\004\040\u0194\001\002\000\010\003\141\054\140\055\142" +
    "\001\002\000\004\007\u0196\001\002\000\004\006\u0197\001" +
    "\002\000\004\031\u0198\001\002\000\004\015\u0199\001\002" +
    "\000\020\006\064\046\073\047\066\050\054\051\074\052" +
    "\056\054\063\001\002\000\022\005\u019b\006\064\046\073" +
    "\047\066\050\054\051\074\052\056\054\063\001\002\000" +
    "\026\003\uffcb\005\uffcb\006\uffcb\033\uffcb\046\uffcb\047\uffcb" +
    "\050\uffcb\051\uffcb\052\uffcb\054\uffcb\001\002\000\004\015" +
    "\u019d\001\002\000\022\005\uffb9\006\064\046\073\047\066" +
    "\050\054\051\074\052\056\054\063\001\002\000\022\005" +
    "\uffba\006\064\046\073\047\066\050\054\051\074\052\056" +
    "\054\063\001\002\000\026\003\uffbe\005\uffbe\006\uffbe\033" +
    "\uffbe\046\uffbe\047\uffbe\050\uffbe\051\uffbe\052\uffbe\054\uffbe" +
    "\001\002\000\004\015\u01a9\001\002\000\006\003\u01a2\015" +
    "\u01a3\001\002\000\020\006\064\046\073\047\066\050\054" +
    "\051\074\052\056\054\063\001\002\000\022\005\u01a4\006" +
    "\064\046\073\047\066\050\054\051\074\052\056\054\063" +
    "\001\002\000\026\003\uffd1\005\uffd1\006\uffd1\033\uffd1\046" +
    "\uffd1\047\uffd1\050\uffd1\051\uffd1\052\uffd1\054\uffd1\001\002" +
    "\000\022\005\u01a6\006\064\046\073\047\066\050\054\051" +
    "\074\052\056\054\063\001\002\000\026\003\uffd2\005\uffd2" +
    "\006\uffd2\033\uffd2\046\uffd2\047\uffd2\050\uffd2\051\uffd2\052" +
    "\uffd2\054\uffd2\001\002\000\022\005\u01a8\006\064\046\073" +
    "\047\066\050\054\051\074\052\056\054\063\001\002\000" +
    "\026\003\uffce\005\uffce\006\uffce\033\uffce\046\uffce\047\uffce" +
    "\050\uffce\051\uffce\052\uffce\054\uffce\001\002\000\022\005" +
    "\uffb8\006\334\046\073\047\066\050\054\051\074\052\056" +
    "\054\063\001\002\000\022\005\uffb8\006\334\046\073\047" +
    "\066\050\054\051\074\052\056\054\063\001\002\000\004" +
    "\005\u01ac\001\002\000\026\003\uffbf\005\uffbf\006\uffbf\033" +
    "\uffbf\046\uffbf\047\uffbf\050\uffbf\051\uffbf\052\uffbf\054\uffbf" +
    "\001\002\000\004\005\u01ae\001\002\000\026\003\uffc0\005" +
    "\uffc0\006\uffc0\033\uffc0\046\uffc0\047\uffc0\050\uffc0\051\uffc0" +
    "\052\uffc0\054\uffc0\001\002\000\004\030\u01b0\001\002\000" +
    "\004\015\u01b1\001\002\000\020\006\064\046\073\047\066" +
    "\050\054\051\074\052\056\054\063\001\002\000\022\005" +
    "\u01b3\006\064\046\073\047\066\050\054\051\074\052\056" +
    "\054\063\001\002\000\026\003\uffd0\005\uffd0\006\uffd0\033" +
    "\uffd0\046\uffd0\047\uffd0\050\uffd0\051\uffd0\052\uffd0\054\uffd0" +
    "\001\002\000\026\003\uff2a\005\uff2a\006\uff2a\033\uff2a\046" +
    "\uff2a\047\uff2a\050\uff2a\051\uff2a\052\uff2a\054\uff2a\001\002" +
    "\000\016\003\141\005\u01b6\017\u01b9\023\u01b7\054\140\055" +
    "\142\001\002\000\004\010\u01d3\001\002\000\006\005\uff1c" +
    "\040\u01bb\001\002\000\006\005\uff1c\040\u01bb\001\002\000" +
    "\006\005\uff1c\040\u01bb\001\002\000\006\005\u01c6\040\u01c7" +
    "\001\002\000\030\003\u01bd\005\uff43\017\u01be\020\112\021" +
    "\111\022\116\023\114\024\113\040\uff43\054\u01bc\055\110" +
    "\001\002\000\010\005\uff49\012\u01c0\040\uff49\001\002\000" +
    "\006\005\uff1f\040\uff1f\001\002\000\006\005\uff20\040\uff20" +
    "\001\002\000\006\005\uff22\040\uff22\001\002\000\010\003" +
    "\141\054\140\055\142\001\002\000\004\013\u01c2\001\002" +
    "\000\010\005\uff1e\012\u01c3\040\uff1e\001\002\000\010\003" +
    "\141\054\140\055\142\001\002\000\004\013\u01c5\001\002" +
    "\000\006\005\uff1d\040\uff1d\001\002\000\004\010\u01ca\001" +
    "\002\000\026\005\uff43\017\u01c8\020\112\021\111\022\116" +
    "\023\114\024\113\040\uff43\054\117\055\110\001\002\000" +
    "\006\005\uff21\040\uff21\001\002\000\006\005\uff23\040\uff23" +
    "\001\002\000\026\003\uff25\005\uff25\006\uff25\033\uff25\046" +
    "\uff25\047\uff25\050\uff25\051\uff25\052\uff25\054\uff25\001\002" +
    "\000\006\005\u01cc\040\u01c7\001\002\000\006\003\u01cd\010" +
    "\u01ce\001\002\000\026\003\uff28\005\uff28\006\uff28\033\uff28" +
    "\046\uff28\047\uff28\050\uff28\051\uff28\052\uff28\054\uff28\001" +
    "\002\000\026\003\uff26\005\uff26\006\uff26\033\uff26\046\uff26" +
    "\047\uff26\050\uff26\051\uff26\052\uff26\054\uff26\001\002\000" +
    "\006\005\u01d0\040\u01c7\001\002\000\006\003\u01d1\010\u01d2" +
    "\001\002\000\026\003\uff29\005\uff29\006\uff29\033\uff29\046" +
    "\uff29\047\uff29\050\uff29\051\uff29\052\uff29\054\uff29\001\002" +
    "\000\026\003\uff27\005\uff27\006\uff27\033\uff27\046\uff27\047" +
    "\uff27\050\uff27\051\uff27\052\uff27\054\uff27\001\002\000\026" +
    "\003\uff24\005\uff24\006\uff24\033\uff24\046\uff24\047\uff24\050" +
    "\uff24\051\uff24\052\uff24\054\uff24\001\002\000\016\003\u0175" +
    "\021\u0176\022\u0178\023\u0174\054\u0173\055\u0177\001\002\000" +
    "\016\003\u0188\021\u0189\022\u018b\023\u0187\054\u0186\055\u018a" +
    "\001\002\000\012\003\141\006\127\054\140\055\142\001" +
    "\002\000\034\003\255\006\u01e9\020\163\021\u01e3\022\u01e5" +
    "\023\u01e4\024\164\037\237\040\172\041\165\042\161\054" +
    "\u01ec\055\u01e2\001\002\000\010\003\141\054\140\055\142" +
    "\001\002\000\006\003\u01da\013\u01db\001\002\000\004\015" +
    "\u01ef\001\002\000\010\003\u01dc\012\u01de\015\u01dd\001\002" +
    "\000\030\006\175\020\163\021\162\022\167\023\166\024" +
    "\164\040\172\041\165\042\161\054\176\055\160\001\002" +
    "\000\034\003\255\006\u01e9\020\163\021\u01e3\022\u01e5\023" +
    "\u01e4\024\164\037\237\040\172\041\165\042\161\054\u01ec" +
    "\055\u01e2\001\002\000\010\003\141\054\140\055\142\001" +
    "\002\000\004\013\u01e0\001\002\000\004\015\u01e1\001\002" +
    "\000\034\003\255\006\u01e9\020\163\021\u01e3\022\u01e5\023" +
    "\u01e4\024\164\037\237\040\172\041\165\042\161\054\u01e6" +
    "\055\u01e2\001\002\000\036\006\uff0f\007\uff0f\010\uff0f\020" +
    "\uff0f\021\uff0f\022\uff0f\023\uff0f\024\uff0f\037\u01d5\040\uff0f" +
    "\041\uff0f\042\uff0f\054\uff0f\055\uff0f\001\002\000\036\006" +
    "\uff0d\007\uff0d\010\uff0d\020\uff0d\021\uff0d\022\uff0d\023\uff0d" +
    "\024\uff0d\037\u017e\040\uff0d\041\uff0d\042\uff0d\054\uff0d\055" +
    "\uff0d\001\002\000\036\006\uff0e\007\uff0e\010\uff0e\020\uff0e" +
    "\021\uff0e\022\uff0e\023\uff0e\024\uff0e\037\u01d4\040\uff0e\041" +
    "\uff0e\042\uff0e\054\uff0e\055\uff0e\001\002\000\036\006\uff0c" +
    "\007\uff0c\010\uff0c\020\uff0c\021\uff0c\022\uff0c\023\uff0c\024" +
    "\uff0c\037\u016b\040\uff0c\041\uff0c\042\uff0c\054\uff0c\055\uff0c" +
    "\001\002\000\040\006\uff09\007\uff09\010\uff09\012\212\020" +
    "\uff09\021\uff09\022\uff09\023\uff09\024\uff09\037\272\040\uff09" +
    "\041\uff09\042\uff09\054\uff09\055\uff09\001\002\000\004\010" +
    "\uff5e\001\002\000\032\006\202\010\uff5f\020\163\021\162" +
    "\022\167\023\166\024\164\040\172\041\165\042\161\054" +
    "\176\055\160\001\002\000\036\003\255\006\u01e9\007\253" +
    "\020\163\021\u01e3\022\u01e5\023\u01e4\024\164\037\237\040" +
    "\172\041\165\042\161\054\u01e6\055\u01e2\001\002\000\032" +
    "\006\202\010\uff67\020\163\021\162\022\167\023\166\024" +
    "\164\040\172\041\165\042\161\054\176\055\160\001\002" +
    "\000\004\010\uff63\001\002\000\040\003\126\006\125\010" +
    "\uff09\012\212\020\uff09\021\uff09\022\uff09\023\uff09\024\uff09" +
    "\037\272\040\uff09\041\uff09\042\uff09\054\uff09\055\uff09\001" +
    "\002\000\004\010\uff62\001\002\000\032\006\202\010\uff64" +
    "\020\163\021\162\022\167\023\166\024\164\040\172\041" +
    "\165\042\161\054\176\055\160\001\002\000\030\006\175" +
    "\020\163\021\162\022\167\023\166\024\164\040\172\041" +
    "\165\042\161\054\176\055\160\001\002\000\032\006\202" +
    "\010\uff65\020\163\021\162\022\167\023\166\024\164\040" +
    "\172\041\165\042\161\054\176\055\160\001\002\000\032" +
    "\006\202\010\uff6e\020\163\021\162\022\167\023\166\024" +
    "\164\040\172\041\165\042\161\054\176\055\160\001\002" +
    "\000\004\010\uff6f\001\002\000\004\010\uff5b\001\002\000" +
    "\004\013\u01f5\001\002\000\004\015\u01f6\001\002\000\030" +
    "\006\175\020\163\021\162\022\167\023\166\024\164\040" +
    "\172\041\165\042\161\054\176\055\160\001\002\000\032" +
    "\006\202\010\uff66\020\163\021\162\022\167\023\166\024" +
    "\164\040\172\041\165\042\161\054\176\055\160\001\002" +
    "\000\004\010\uff69\001\002\000\006\010\uff32\037\u017e\001" +
    "\002\000\006\010\uff33\037\u016b\001\002\000\004\010\uff30" +
    "\001\002\000\010\003\126\006\125\037\272\001\002\000" +
    "\010\006\265\010\uff2f\037\266\001\002\000\004\010\uff31" +
    "\001\002\000\024\003\uff43\010\uff43\020\112\021\111\022" +
    "\116\023\114\024\113\054\117\055\110\001\002\000\004" +
    "\005\u0201\001\002\000\006\002\ufff0\006\ufff0\001\002\000" +
    "\006\003\u0203\010\u0204\001\002\000\006\002\uffee\006\uffee" +
    "\001\002\000\006\003\u0206\005\u0205\001\002\000\006\002" +
    "\ufff5\006\ufff5\001\002\000\006\002\uffef\006\uffef\001\002" +
    "\000\004\010\u0208\001\002\000\004\005\u0209\001\002\000" +
    "\006\002\ufff2\006\ufff2\001\002\000\010\003\141\054\140" +
    "\055\142\001\002\000\006\003\u020d\054\u020c\001\002\000" +
    "\006\003\u0210\015\u0211\001\002\000\004\015\u020e\001\002" +
    "\000\004\054\105\001\002\000\004\010\uff55\001\002\000" +
    "\004\054\105\001\002\000\006\012\u0213\054\105\001\002" +
    "\000\004\010\uff57\001\002\000\030\003\u0215\012\u0216\013" +
    "\uff43\014\uff43\020\112\021\111\022\116\023\114\024\113" +
    "\054\117\055\110\001\002\000\004\013\u021d\001\002\000" +
    "\004\013\uff3a\001\002\000\026\003\uff43\013\uff43\014\uff43" +
    "\020\112\021\111\022\116\023\114\024\113\054\117\055" +
    "\110\001\002\000\006\013\uff3b\014\u0218\001\002\000\030" +
    "\003\u0215\012\u0216\013\uff43\014\uff43\020\112\021\111\022" +
    "\116\023\114\024\113\054\117\055\110\001\002\000\004" +
    "\013\uff3c\001\002\000\006\013\uff3e\014\u021b\001\002\000" +
    "\030\003\u0215\012\u0216\013\uff43\014\uff43\020\112\021\111" +
    "\022\116\023\114\024\113\054\117\055\110\001\002\000" +
    "\004\013\uff3d\001\002\000\004\010\uff5c\001\002\000\004" +
    "\010\uff56\001\002\000\004\013\u0220\001\002\000\004\012" +
    "\u0221\001\002\000\010\003\141\054\140\055\142\001\002" +
    "\000\004\013\u0223\001\002\000\012\003\030\046\031\047" +
    "\034\050\033\001\002\000\004\054\u0225\001\002\000\004" +
    "\010\uff5d\001\002\000\014\003\u022a\010\uff4c\014\155\015" +
    "\u022b\054\154\001\002\000\004\010\uff6b\001\002\000\004" +
    "\003\u0229\001\002\000\004\010\uff4f\001\002\000\004\010" +
    "\uff4e\001\002\000\006\024\u022d\054\105\001\002\000\004" +
    "\010\uff50\001\002\000\004\010\uff68\001\002\000\006\002" +
    "\ufff3\006\ufff3\001\002\000\022\005\u0230\006\064\046\073" +
    "\047\066\050\054\051\074\052\056\054\063\001\002\000" +
    "\006\002\ufff4\006\ufff4\001\002\000\004\006\u0232\001\002" +
    "\000\004\007\u0233\001\002\000\004\006\u0234\001\002\000" +
    "\004\036\u0235\001\002\000\004\015\u0236\001\002\000\020" +
    "\006\064\046\073\047\066\050\054\051\074\052\056\054" +
    "\063\001\002\000\022\005\u0238\006\064\046\073\047\066" +
    "\050\054\051\074\052\056\054\063\001\002\000\006\002" +
    "\ufff8\006\ufff8\001\002\000\004\007\u024a\001\002\000\006" +
    "\003\u023c\006\u023b\001\002\000\006\003\u0241\036\u0242\001" +
    "\002\000\004\036\u023d\001\002\000\004\015\u023e\001\002" +
    "\000\020\006\064\046\073\047\066\050\054\051\074\052" +
    "\056\054\063\001\002\000\022\005\u0240\006\064\046\073" +
    "\047\066\050\054\051\074\052\056\054\063\001\002\000" +
    "\006\002\ufffd\006\ufffd\001\002\000\004\015\u0247\001\002" +
    "\000\004\015\u0243\001\002\000\022\005\u0244\006\064\046" +
    "\073\047\066\050\054\051\074\052\056\054\063\001\002" +
    "\000\006\002\ufffc\006\ufffc\001\002\000\022\005\u0246\006" +
    "\064\046\073\047\066\050\054\051\074\052\056\054\063" +
    "\001\002\000\006\002\ufffe\006\ufffe\001\002\000\020\006" +
    "\064\046\073\047\066\050\054\051\074\052\056\054\063" +
    "\001\002\000\022\005\u0249\006\064\046\073\047\066\050" +
    "\054\051\074\052\056\054\063\001\002\000\006\002\ufffb" +
    "\006\ufffb\001\002\000\004\006\u024b\001\002\000\004\036" +
    "\u024c\001\002\000\004\015\u024d\001\002\000\020\006\064" +
    "\046\073\047\066\050\054\051\074\052\056\054\063\001" +
    "\002\000\022\005\u024f\006\064\046\073\047\066\050\054" +
    "\051\074\052\056\054\063\001\002\000\006\002\ufffa\006" +
    "\ufffa\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u024d\000\006\002\006\003\005\001\001\000\002\001" +
    "\001\000\004\045\u0230\001\001\000\010\004\011\005\013" +
    "\006\010\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\005\042\006\010\001\001\000\006" +
    "\007\024\010\015\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\033\036\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\033\031\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\007\041\010\015\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\010\051" +
    "\001\001\000\026\011\u022e\012\071\013\052\015\066\017" +
    "\054\022\067\027\064\035\061\040\057\042\070\001\001" +
    "\000\026\011\060\012\071\013\052\015\066\017\054\022" +
    "\067\027\064\035\061\040\057\042\070\001\001\000\002" +
    "\001\001\000\004\030\u0226\001\001\000\002\001\001\000" +
    "\004\033\u020a\001\001\000\004\031\u0206\001\001\000\002" +
    "\001\001\000\024\012\321\013\322\015\325\017\315\022" +
    "\323\027\324\035\061\040\316\042\317\001\001\000\012" +
    "\022\u01fa\024\u01fd\025\250\036\u01f7\001\001\000\002\001" +
    "\001\000\006\024\246\025\250\001\001\000\002\001\001" +
    "\000\004\030\230\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\030\150" +
    "\001\001\000\004\033\076\001\001\000\002\001\001\000" +
    "\004\014\142\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\022\105\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\031\117\034\114\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\031\117\034\123\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\023\130\031\132\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\023\134\031\132\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\033\144\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\030\224\001\001\000\002\001\001\000\010" +
    "\022\167\043\173\044\172\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\044\220" +
    "\001\001\000\002\001\001\000\004\044\200\001\001\000" +
    "\006\043\176\044\172\001\001\000\002\001\001\000\004" +
    "\044\200\001\001\000\006\043\210\044\172\001\001\000" +
    "\002\001\001\000\006\043\202\044\172\001\001\000\004" +
    "\044\200\001\001\000\002\001\001\000\004\044\207\001" +
    "\001\000\004\044\206\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\044\200\001\001\000\004\014\212\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\014\215" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\026\274\001\001\000" +
    "\006\024\255\025\250\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\026" +
    "\261\001\001\000\006\024\270\025\250\001\001\000\006" +
    "\024\263\025\250\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\043\272\044\172\001\001\000\004\044\200\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\011\314\012\071\013\052\015\066\017\054\022\067" +
    "\027\064\035\061\040\057\042\070\001\001\000\024\012" +
    "\321\013\322\015\325\017\315\022\323\027\324\035\061" +
    "\040\316\042\317\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\011\331\012\071\013\052\015\066\017\054\022\067\027" +
    "\064\035\061\040\057\042\070\001\001\000\026\012\321" +
    "\013\322\015\325\016\332\017\315\022\323\027\324\035" +
    "\061\040\316\042\317\001\001\000\002\001\001\000\006" +
    "\024\336\025\250\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\011\341" +
    "\012\071\013\052\015\066\016\342\017\054\022\067\027" +
    "\064\035\061\040\057\042\070\001\001\000\026\012\321" +
    "\013\322\015\325\016\343\017\315\022\323\027\324\035" +
    "\061\040\316\042\317\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\014\u018f\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\011\350\012\071\013\052\015\066" +
    "\017\054\022\067\027\064\035\061\040\057\042\070\001" +
    "\001\000\026\012\321\013\322\015\325\016\351\017\315" +
    "\022\323\027\324\035\061\040\316\042\317\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\011\355\012\071" +
    "\013\052\015\066\017\054\020\354\022\067\027\064\035" +
    "\061\040\057\042\070\001\001\000\002\001\001\000\026" +
    "\012\321\013\322\015\325\016\u018c\017\315\022\323\027" +
    "\324\035\061\040\316\042\317\001\001\000\010\021\363" +
    "\024\246\025\250\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\011\374\012\071\013\052\015\066\017" +
    "\054\022\067\027\064\035\061\040\057\042\070\001\001" +
    "\000\026\012\321\013\322\015\325\017\315\020\375\022" +
    "\323\027\324\035\061\040\316\042\317\001\001\000\002" +
    "\001\001\000\026\011\377\012\071\013\052\015\066\017" +
    "\054\022\067\027\064\035\061\040\057\042\070\001\001" +
    "\000\026\012\321\013\322\015\325\017\315\020\u0100\022" +
    "\323\027\324\035\061\040\316\042\317\001\001\000\002" +
    "\001\001\000\004\014\u0135\001\001\000\002\001\001\000" +
    "\004\014\u0127\001\001\000\002\001\001\000\006\043\272" +
    "\044\172\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\020\u010b\001\001\000\004\021\363" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\020\u0125\001\001\000\004\020\u0123\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\014\u0129\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\014\u012c\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\011\u0131\012\071\013\052\015\066\017" +
    "\054\022\067\027\064\035\061\040\057\042\070\001\001" +
    "\000\024\012\321\013\322\015\325\017\315\022\323\027" +
    "\324\035\061\040\316\042\317\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\014\u0142\001\001\000\004\014\u0138\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\014\u013b\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\011\u0140\012\071\013\052\015\066\017" +
    "\054\022\067\027\064\035\061\040\057\042\070\001\001" +
    "\000\024\012\321\013\322\015\325\017\315\022\323\027" +
    "\324\035\061\040\316\042\317\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\014\u0146\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\011\u014b\012" +
    "\071\013\052\015\066\017\054\022\067\027\064\035\061" +
    "\040\057\042\070\001\001\000\024\012\321\013\322\015" +
    "\325\017\315\022\323\027\324\035\061\040\316\042\317" +
    "\001\001\000\002\001\001\000\004\014\u0160\001\001\000" +
    "\004\014\u014f\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\011\u0155\012\071\013\052\015\066\017\054\022\067" +
    "\027\064\035\061\040\057\042\070\001\001\000\024\012" +
    "\321\013\322\015\325\017\315\022\323\027\324\035\061" +
    "\040\316\042\317\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\011\u015e\012\071\013\052\015\066\017\054" +
    "\022\067\027\064\035\061\040\057\042\070\001\001\000" +
    "\026\011\u015b\012\071\013\052\015\066\017\054\022\067" +
    "\027\064\035\061\040\057\042\070\001\001\000\002\001" +
    "\001\000\024\012\321\013\322\015\325\017\315\022\323" +
    "\027\324\035\061\040\316\042\317\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\012\321\013\322\015\325" +
    "\017\315\022\323\027\324\035\061\040\316\042\317\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\011\u0165\012" +
    "\071\013\052\015\066\017\054\022\067\027\064\035\061" +
    "\040\057\042\070\001\001\000\024\012\321\013\322\015" +
    "\325\017\315\022\323\027\324\035\061\040\316\042\317" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\011" +
    "\u0169\012\071\013\052\015\066\017\054\022\067\027\064" +
    "\035\061\040\057\042\070\001\001\000\024\012\321\013" +
    "\322\015\325\017\315\022\323\027\324\035\061\040\316" +
    "\042\317\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\011\u017b\012\071\013\052\015\066\017\054\020\u017a" +
    "\022\067\027\064\035\061\040\057\042\070\001\001\000" +
    "\002\001\001\000\026\012\321\013\322\015\325\017\315" +
    "\020\u017c\022\323\027\324\035\061\040\316\042\317\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\014\u0191\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\014\u0194\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\011\u0199\012\071\013\052\015\066\017\054\022" +
    "\067\027\064\035\061\040\057\042\070\001\001\000\024" +
    "\012\321\013\322\015\325\017\315\022\323\027\324\035" +
    "\061\040\316\042\317\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\011\u019d\012\071\013\052\015\066\017" +
    "\054\022\067\027\064\035\061\040\057\042\070\001\001" +
    "\000\024\012\321\013\322\015\325\017\315\022\323\027" +
    "\324\035\061\040\316\042\317\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\011\u01a6\012" +
    "\071\013\052\015\066\017\054\022\067\027\064\035\061" +
    "\040\057\042\070\001\001\000\026\011\u01a4\012\071\013" +
    "\052\015\066\017\054\022\067\027\064\035\061\040\057" +
    "\042\070\001\001\000\002\001\001\000\024\012\321\013" +
    "\322\015\325\017\315\022\323\027\324\035\061\040\316" +
    "\042\317\001\001\000\002\001\001\000\024\012\321\013" +
    "\322\015\325\017\315\022\323\027\324\035\061\040\316" +
    "\042\317\001\001\000\002\001\001\000\030\011\u01a9\012" +
    "\071\013\052\015\066\016\u01aa\017\054\022\067\027\064" +
    "\035\061\040\057\042\070\001\001\000\026\012\321\013" +
    "\322\015\325\016\u01ac\017\315\022\323\027\324\035\061" +
    "\040\316\042\317\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\011\u01b1\012\071\013\052\015" +
    "\066\017\054\022\067\027\064\035\061\040\057\042\070" +
    "\001\001\000\024\012\321\013\322\015\325\017\315\022" +
    "\323\027\324\035\061\040\316\042\317\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\014\u01b7\001\001\000" +
    "\002\001\001\000\004\041\u01ce\001\001\000\004\041\u01ca" +
    "\001\001\000\004\041\u01b9\001\001\000\002\001\001\000" +
    "\004\031\u01be\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\014\u01c0\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\014\u01c3" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\031\u01c8\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\014\u01f3\001\001\000\014\022\u01f2\024\u01f1\025\250\043" +
    "\u01f0\044\172\001\001\000\004\014\u01d8\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\043" +
    "\u01ed\044\172\001\001\000\014\022\u01ec\024\u01ea\025\250" +
    "\043\u01e9\044\172\001\001\000\004\014\u01de\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\024\u01e6\025\250" +
    "\043\u01e7\044\172\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\044\200\001\001\000\012\024" +
    "\255\025\250\043\176\044\172\001\001\000\004\044\200" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\044\200\001\001\000\006\043\u01ef\044\172" +
    "\001\001\000\004\044\200\001\001\000\004\044\200\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\043\u01f6\044\172\001\001\000" +
    "\004\044\200\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\031\u0201\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\014\u021e\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\022\u020e\001\001\000" +
    "\002\001\001\000\004\022\u021d\001\001\000\004\022\u0211" +
    "\001\001\000\002\001\001\000\006\031\u0216\032\u0213\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\031\117" +
    "\034\u0219\001\001\000\002\001\001\000\006\031\u0216\032" +
    "\u0218\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\031\u0216\032\u021b\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\014\u0221\001\001\000\002\001\001\000\004\033" +
    "\u0223\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\022\u022b\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\012" +
    "\321\013\322\015\325\017\315\022\323\027\324\035\061" +
    "\040\316\042\317\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\011\u0236\012\071\013\052\015" +
    "\066\017\054\022\067\027\064\035\061\040\057\042\070" +
    "\001\001\000\024\012\321\013\322\015\325\017\315\022" +
    "\323\027\324\035\061\040\316\042\317\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\011\u023e" +
    "\012\071\013\052\015\066\017\054\022\067\027\064\035" +
    "\061\040\057\042\070\001\001\000\024\012\321\013\322" +
    "\015\325\017\315\022\323\027\324\035\061\040\316\042" +
    "\317\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\011\u0244\012\071\013\052\015\066\017" +
    "\054\022\067\027\064\035\061\040\057\042\070\001\001" +
    "\000\002\001\001\000\024\012\321\013\322\015\325\017" +
    "\315\022\323\027\324\035\061\040\316\042\317\001\001" +
    "\000\002\001\001\000\026\011\u0247\012\071\013\052\015" +
    "\066\017\054\022\067\027\064\035\061\040\057\042\070" +
    "\001\001\000\024\012\321\013\322\015\325\017\315\022" +
    "\323\027\324\035\061\040\316\042\317\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\011\u024d\012\071\013\052\015\066\017\054" +
    "\022\067\027\064\035\061\040\057\042\070\001\001\000" +
    "\024\012\321\013\322\015\325\017\315\022\323\027\324" +
    "\035\061\040\316\042\317\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public Symbol getS(){
            return this.s;
        }
    /**
     * Método al que se llama automáticamente ante algún error sintactico.
    **/ 
    public void syntax_error(Symbol s){
        this.s = s;
        System.out.println("Error Sintáctico recuperable en la Línea " + (s.right + 1) +
        " Columna "+s.left+ ". No se esperaba este componente: " +s.value+".");

        String report = "Syntax error in line " + (getS().right + 1) + " Column " + getS().left + ". No se esperaba este componente: " + getS().value;
        if(getS().value == null){
            report = "You didn't close your last code structure";
        }
        addError(report + "\n");
         
    }

    /**
     * Método al que se llama automáticamente ante algún error sintáctico 
     * en el que ya no es posible una recuperación de errores.
     **/ 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error síntactico irrecuperable en la Línea " + 
        (s.right)+ " Columna "+s.left+". Componente " + s.value + 
        " no reconocido."); 
    }
    
    //Guardar los errores encontrados
    private String ERRORES = "";
    private int cERRORES = 0;
    public void addError(String error){
        this.ERRORES += error;
       this.cERRORES++;
    }

    public void addMessageErrorOnly(String desc){
        this.ERRORES += desc;
    }
    public String getERRORES(){
        return this.ERRORES;
    }
    public void setERRORES(String err){
        this.ERRORES = err;
    }

    public int getcERRORES(){
        return this.cERRORES;
    }
    public void setcERRORES(int err){
        this.cERRORES = err;
    }

    public String errorMessage(String error, Symbol s){
        //String report = "Syntax error in line " + s.right + " Column " + s.left + ". No se esperaba este componente: " +s.value+ "\nDescripción: " + error +"\n";
        this.addMessageErrorOnly("Comentario: " + error+"\n");
        System.out.println("Cantidad: " + getcERRORES());
        return "Listo, guapo ;D";
    }

    //Se vino el arbolito papa
    DefaultMutableTreeNode sintaxTree;
    DefaultTreeModel sintaxTreeModel;
    DefaultMutableTreeNode nodoActual;

    public DefaultTreeModel createTreeSintax(String name){
        this.sintaxTree = new DefaultMutableTreeNode(name);
        this.sintaxTreeModel = new DefaultTreeModel(sintaxTree);
        this.nodoActual = this.sintaxTree;
        return sintaxTreeModel;
    }
    
    public DefaultMutableTreeNode getTreeSintax(){
        return this.sintaxTree;
    }
    
    public DefaultTreeModel getTreeSintaxModel(){
        return this.sintaxTreeModel;
    }

     public DefaultMutableTreeNode createNodo(String name){
        return new DefaultMutableTreeNode(name);
    }
    
    public void agregarNodo(DefaultMutableTreeNode nodo){
        this.sintaxTree.add(nodo);
    }
    
    public void setNodoActual(DefaultMutableTreeNode nodo){
        this.nodoActual = nodo;
    }

    public DefaultMutableTreeNode getNodoActual(){
        return this.nodoActual;
    }

    public DefaultMutableTreeNode addAllChildren(DefaultMutableTreeNode father, DefaultMutableTreeNode padrastro){
        for (int i = 0; i < father.getChildCount(); i++) {
            padrastro.add((DefaultMutableTreeNode)father.getChildAt(i));
        }
        return padrastro;
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // EXPR ::= MOD error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                String  desc = "Elemento para sacar mod no es válido";
                String mes = parser.errorMessage(desc, parser.getS());
                DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
                RESULT = nodo;
                //parser.report_(mes ,err);
            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPR",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // EXPR ::= OP_MULTI_DIV error 
            {
              Object RESULT =null;
		int mdleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int mdright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object md = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int errleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                String  desc = "Elemento para multiplicar/división en la expresión no válida";
                String mes = parser.errorMessage(desc, parser.getS());
                DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
                RESULT = nodo;
                //parser.report_(mes ,err);
            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPR",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // EXPR ::= OP_SUM error 
            {
              Object RESULT =null;
		int suleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int suright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object su = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int errleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                String desc = "";
                desc = "Elemento para sumar/restar en la expresión no válida";
                String mes = parser.errorMessage(desc, parser.getS());
                DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
                RESULT = nodo;
                //parser.report_(mes ,err);
            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPR",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // EXPR ::= ID OPEN_SQR_BRACKET N_TO_FOR CLOSE_SQR_BRACKET OPEN_SQR_BRACKET N_TO_FOR CLOSE_SQR_BRACKET 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPR",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // EXPR ::= ID OPEN_SQR_BRACKET N_TO_FOR CLOSE_SQR_BRACKET 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPR",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // EXPR ::= ID 
            {
              Object RESULT =null;
		int nlleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int nlright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		String nl = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPR",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // EXPR ::= NULL 
            {
              Object RESULT =null;
		int nlleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int nlright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object nl = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPR",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // EXPR ::= CHAR_ELEMENT 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPR",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // EXPR ::= FALSE 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPR",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // EXPR ::= TRUE 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPR",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // EXPR ::= STRING 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPR",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // EXPR ::= NUMBER 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPR",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // EXPR ::= EXPR MOD EXPR 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPR",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // EXPR ::= OPEN_PARENTESIS EXPR_LIST CLOSE_PARENTESIS 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPR",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // EXPR ::= EXPR OP_MULTI_DIV EXPR 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPR",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // EXPR ::= OP_SUM EXPR 
            {
              Object RESULT =null;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPR",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // EXPR_LIST ::= EXPR 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPR_LIST",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // EXPR_LIST ::= OPEN_PARENTESIS EXPR_LIST CLOSE_PARENTESIS EXPR_LIST 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPR_LIST",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // EXPR_LIST ::= EXPR_LIST EXPR 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPR_LIST",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // N_CIN ::= OPEN_PARENTESIS CIN COLON ID CLOSE_BLOCK error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        String desc = "Falta PYC";
        String mes = parser.errorMessage(desc, parser.getS());
        DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
        RESULT = nodo;
        //parser.report_(mes ,err);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_CIN",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // N_CIN ::= OPEN_PARENTESIS CIN COLON ID error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        String desc = "Valores de más. CIN solo llama a una variable o falta :)";
        String mes = parser.errorMessage(desc, parser.getS());
        DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
        RESULT = nodo;
        //parser.report_(mes ,err);
        
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_CIN",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // N_CIN ::= OPEN_PARENTESIS CIN COLON error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        String desc = "Falta varibale en el CIN";
        String mes = parser.errorMessage(desc, parser.getS());
        DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
        RESULT = nodo;
        //parser.report_(mes ,err);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_CIN",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // N_CIN ::= OPEN_PARENTESIS CIN error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        String desc = "Falta \":\" en el CIN";
        String mes = parser.errorMessage(desc, parser.getS());
        DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
        RESULT = nodo;
        //parser.report_(mes ,err);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_CIN",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // N_CIN ::= OPEN_PARENTESIS CIN COLON ID CLOSE_BLOCK PYC 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_CIN",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // N_PRINT_IMPRESS ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_PRINT_IMPRESS",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // N_PRINT_IMPRESS ::= OP_SUM ID OPEN_SQR_BRACKET N_TO_FOR CLOSE_SQR_BRACKET OPEN_SQR_BRACKET N_TO_FOR CLOSE_SQR_BRACKET 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_PRINT_IMPRESS",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // N_PRINT_IMPRESS ::= OP_SUM ID OPEN_SQR_BRACKET N_TO_FOR CLOSE_SQR_BRACKET 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_PRINT_IMPRESS",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // N_PRINT_IMPRESS ::= OP_SUM error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        String desc = "Falta cierre de PRINT o hay declaraciones no aceptadas\nDatos aceptados: String, chars, variables, números, saltos de linea (ln)";
        String mes = parser.errorMessage(desc, parser.getS());
        DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
        RESULT = nodo;        
        //parser.report_(mes ,err);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_PRINT_IMPRESS",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // N_PRINT_IMPRESS ::= OP_SUM NEW_LINE 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int nlleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int nlright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object nl = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_PRINT_IMPRESS",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // N_PRINT_IMPRESS ::= N_PRINT_IMPRESS OP_SUM NEW_LINE 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int nlleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int nlright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object nl = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_PRINT_IMPRESS",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // N_PRINT_IMPRESS ::= OP_SUM N_VALOR_VARIABLE 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_PRINT_IMPRESS",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // N_PRINT_IMPRESS ::= N_PRINT_IMPRESS OP_SUM N_VALOR_VARIABLE 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_PRINT_IMPRESS",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // N_PRINT ::= OPEN_PARENTESIS PRINT COLON CLOSE_BLOCK PYC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_PRINT",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // N_PRINT ::= OPEN_PARENTESIS PRINT COLON NEW_LINE N_PRINT_IMPRESS CLOSE_BLOCK PYC 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_PRINT",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // N_PRINT ::= OPEN_PARENTESIS PRINT COLON N_TO_FOR N_PRINT_IMPRESS CLOSE_BLOCK PYC 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_PRINT",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // N_PRINT ::= OPEN_PARENTESIS PRINT COLON STRING N_PRINT_IMPRESS CLOSE_BLOCK PYC 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_PRINT",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // N_PRINT ::= OPEN_PARENTESIS PRINT COLON N_TO_FOR N_PRINT_IMPRESS CLOSE_BLOCK error 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int errleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        String desc = "Falta PYC en el print";
        String mes = parser.errorMessage(desc, parser.getS());
        DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
        RESULT = nodo;
        //parser.report_(mes ,err);
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_PRINT",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // N_PRINT ::= OPEN_PARENTESIS PRINT COLON STRING N_PRINT_IMPRESS CLOSE_BLOCK error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int errleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        String desc = "Falta PYC en el print";
        String mes = parser.errorMessage(desc, parser.getS());
        DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
        RESULT = nodo;
        //parser.report_(mes ,err);
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_PRINT",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // N_PRINT ::= OPEN_PARENTESIS PRINT error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        String desc = "Faltan los \":\" en el print";
        String mes = parser.errorMessage(desc, parser.getS());
        DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
        RESULT = nodo;
        //parser.report_(mes ,err);
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_PRINT",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // N_ARGUMENTOS ::= ID ID error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
            String desc = "Los ids deben ir separados por coma";
            String mes = parser.errorMessage(desc, parser.getS());
            DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
            RESULT = nodo;
            //parser.report_(mes ,err);
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_ARGUMENTOS",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // N_ARGUMENTOS ::= ID error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        String desc = "Falta PYC";
        String mes = parser.errorMessage(desc, parser.getS());
        DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
        RESULT = nodo;
        //parser.report_(mes ,err);
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_ARGUMENTOS",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // N_ARGUMENTOS ::= ID PYC 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_ARGUMENTOS",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // N_ARGUMENTOS ::= ID COMA N_ARGUMENTOS 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int arleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int arright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object ar = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_ARGUMENTOS",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // N_BOOLEAN_VALUE ::= error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        String desc = "Error en la definición del booleno, tipo no compatible con Boolean o falta PYC";
        String mes = parser.errorMessage(desc, parser.getS());
        DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
        RESULT = nodo;
        //parser.report_(mes ,err);
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_BOOLEAN_VALUE",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // N_BOOLEAN_VALUE ::= N_CALL_FUNCTION 
            {
              Object RESULT =null;
		int arleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int arright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object ar = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_BOOLEAN_VALUE",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // N_BOOLEAN_VALUE ::= N_SENTENCIA_BOOLEANA_ANIDADA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_BOOLEAN_VALUE",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // N_BOOLEAN_VALUE ::= TRUE 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_BOOLEAN_VALUE",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // N_BOOLEAN_VALUE ::= FALSE 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_BOOLEAN_VALUE",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // N_BOOLEAN_ID ::= BOOLEAN ID error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        String desc = "Falta \":\" en la declacion booleana";
        String mes = parser.errorMessage(desc, parser.getS());
        DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
        RESULT = nodo;
        //parser.report_(mes ,err);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_BOOLEAN_ID",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // N_BOOLEAN_ID ::= BOOLEAN error COLON 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
        String desc = "Falta el identificador del boolean en la declaracion";
        String mes = parser.errorMessage(desc, parser.getS());
        DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
        RESULT = nodo;
        //parser.report_(mes ,err);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_BOOLEAN_ID",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // N_BOOLEAN_ID ::= BOOLEAN ID COLON 
            {
              Object RESULT =null;
		int blleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int blright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object bl = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_BOOLEAN_ID",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // N_ARREGLO ::= N_VALOR_VARIABLE error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        RESULT = parser.createNodo("ERROR");
        String desc = "Estructura del arreglo incompleta";
        String mes = parser.errorMessage(desc, parser.getS());
        //DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
        RESULT = "ERROR";
        //parser.report_(mes ,err);
      
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_ARREGLO",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // N_ARREGLO ::= N_VALOR_VARIABLE CLOSE_SQR_BRACKET 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_ARREGLO",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // N_ARREGLO ::= N_VALOR_VARIABLE COMA N_ARREGLO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_ARREGLO",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // N_MATRIZ ::= error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        String desc = "Solo se permiten arreglos de dos dimensiones";
        String mes = parser.errorMessage(desc, parser.getS());
        DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
        RESULT = nodo;
        //parser.report_(mes ,err);
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_MATRIZ",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // N_MATRIZ ::= N_VALOR_VARIABLE 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_MATRIZ",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // N_MATRIZ ::= N_VALOR_VARIABLE COMA N_MATRIZ 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_MATRIZ",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // N_MATRIZ ::= OPEN_SQR_BRACKET N_ARREGLO COMA N_MATRIZ 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_MATRIZ",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // N_MATRIZ ::= OPEN_SQR_BRACKET N_ARREGLO 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_MATRIZ",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // N_TIPOS_DECLARACION_MATRIZ ::= error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        String desc = "Solo se permiten Int, boolean y char, id en los arreglos. Usar otro tipo o no especificar el no es válido";
        String mes = parser.errorMessage(desc, parser.getS());
        DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
        RESULT = nodo;
        //parser.report_(mes ,err);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_TIPOS_DECLARACION_MATRIZ",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // N_TIPOS_DECLARACION_MATRIZ ::= CHAR 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 RESULT = (parser.createNodo(e+"")); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_TIPOS_DECLARACION_MATRIZ",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // N_TIPOS_DECLARACION_MATRIZ ::= BOOLEAN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 RESULT = (parser.createNodo(e+"")); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_TIPOS_DECLARACION_MATRIZ",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // N_TIPOS_DECLARACION_MATRIZ ::= INTENGER 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 RESULT = (parser.createNodo(e+"")); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_TIPOS_DECLARACION_MATRIZ",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // N_VALOR_VARIABLE ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_VALOR_VARIABLE",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // N_VALOR_VARIABLE ::= FALSE 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 RESULT = (parser.createNodo(e1+"")); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_VALOR_VARIABLE",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // N_VALOR_VARIABLE ::= TRUE 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 RESULT = (parser.createNodo(e1+"")); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_VALOR_VARIABLE",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // N_VALOR_VARIABLE ::= CHAR_ELEMENT 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 RESULT = (parser.createNodo(e1+"")); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_VALOR_VARIABLE",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // N_VALOR_VARIABLE ::= NULL 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 RESULT = (parser.createNodo(e1+"")); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_VALOR_VARIABLE",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // N_VALOR_VARIABLE ::= STRING 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 RESULT = (parser.createNodo(e1+"")); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_VALOR_VARIABLE",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // N_VALOR_VARIABLE ::= ID 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 RESULT = (parser.createNodo(e1+"")); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_VALOR_VARIABLE",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // N_VALOR_VARIABLE ::= NUMBER 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 RESULT = (parser.createNodo(e1+"")); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_VALOR_VARIABLE",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // N_DECLARACION_ID ::= ID ID error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        String desc = "los ids deben ir separados por comas";
        String mes = parser.errorMessage(desc, parser.getS());
        DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
        RESULT = nodo;
        //parser.report_(mes ,err);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_DECLARACION_ID",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // N_DECLARACION_ID ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_DECLARACION_ID",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // N_DECLARACION_ID ::= ID COMA N_DECLARACION_ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int idsleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object ids = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_DECLARACION_ID",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // N_DECLARACION ::= CHAR ID error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        String desc = "Falta \":\" en la asignación del char";
        String mes = parser.errorMessage(desc, parser.getS());
        DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
        RESULT = nodo;
        //parser.report_(mes ,err);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_DECLARACION",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // N_DECLARACION ::= CHAR COLON error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        String desc = "Fala identificador del char";
        String mes = parser.errorMessage(desc, parser.getS());
        DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
        RESULT = nodo;
        //parser.report_(mes ,err);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_DECLARACION",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // N_DECLARACION ::= CHAR ID COLON N_CALL_FUNCTION 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_DECLARACION",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // N_DECLARACION ::= ARRAY N_TIPOS_DECLARACION_MATRIZ COLON error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        String desc = "Falta id del array";
        String mes = parser.errorMessage(desc, parser.getS());
        DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
        RESULT = nodo;
        //parser.report_(mes ,err);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_DECLARACION",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // N_DECLARACION ::= ARRAY N_TIPOS_DECLARACION_MATRIZ error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        String desc = "Falta \":\" en la asignación del array";
        String mes = parser.errorMessage(desc, parser.getS());
        DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
        RESULT = nodo;
        //parser.report_(mes ,err);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_DECLARACION",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // N_DECLARACION ::= ARRAY COLON error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        String desc = "Fala tipo del array";
        String mes = parser.errorMessage(desc, parser.getS());
        DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
        RESULT = nodo;
        //parser.report_(mes ,err);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_DECLARACION",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // N_DECLARACION ::= ARRAY N_TIPOS_DECLARACION_MATRIZ ID COLON N_CALL_FUNCTION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_DECLARACION",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // N_DECLARACION ::= MATRIX N_TIPOS_DECLARACION_MATRIZ error COLON N_CALL_FUNCTION 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
        String desc = "Falta id de la matriz";
        String mes = parser.errorMessage(desc, parser.getS());
        DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
        RESULT = nodo;
        //parser.report_(mes ,err);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_DECLARACION",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // N_DECLARACION ::= MATRIX N_TIPOS_DECLARACION_MATRIZ ID error N_CALL_FUNCTION 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        String desc = "Falta \":\" en la asignación de la matriz";
        String mes = parser.errorMessage(desc, parser.getS());
        DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
        RESULT = nodo;
        //parser.report_(mes ,err);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_DECLARACION",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // N_DECLARACION ::= MATRIX N_TIPOS_DECLARACION_MATRIZ ID COLON N_CALL_FUNCTION 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_DECLARACION",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // N_DECLARACION ::= INTENGER ID error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        String desc = "Falta \":\" en la asignación del int";
        String mes = parser.errorMessage(desc, parser.getS());
        DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
        RESULT = nodo;
        //parser.report_(mes ,err);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_DECLARACION",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // N_DECLARACION ::= INTENGER COLON error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        String desc = "Fala identificador del int";
        String mes = parser.errorMessage(desc, parser.getS());
        DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
        RESULT = nodo;
        //parser.report_(mes ,err);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_DECLARACION",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // N_DECLARACION ::= INTENGER ID COLON N_CALL_FUNCTION 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_DECLARACION",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // N_DECLARACION ::= ID COLON N_CALL_FUNCTION 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_DECLARACION",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // N_DECLARACION ::= MATRIX N_TIPOS_DECLARACION_MATRIZ ID COLON OPEN_SQR_BRACKET N_MATRIZ CLOSE_SQR_BRACKET 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_DECLARACION",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // N_DECLARACION ::= MATRIX OPEN_SQR_BRACKET N_TO_FOR CLOSE_SQR_BRACKET OPEN_SQR_BRACKET N_TO_FOR CLOSE_SQR_BRACKET N_TIPOS_DECLARACION_MATRIZ ID 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_DECLARACION",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // N_DECLARACION ::= ID OPEN_SQR_BRACKET N_TO_FOR CLOSE_SQR_BRACKET OPEN_SQR_BRACKET N_TO_FOR CLOSE_SQR_BRACKET COLON N_SENTENCIA_BOOLEANA_ANIDADA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_DECLARACION",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // N_DECLARACION ::= ID OPEN_SQR_BRACKET N_TO_FOR CLOSE_SQR_BRACKET OPEN_SQR_BRACKET N_TO_FOR CLOSE_SQR_BRACKET COLON EXPR_LIST 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_DECLARACION",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // N_DECLARACION ::= ARRAY N_TIPOS_DECLARACION_MATRIZ ID COLON OPEN_SQR_BRACKET N_ARREGLO 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int arleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int arright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object ar = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_DECLARACION",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // N_DECLARACION ::= ARRAY OPEN_SQR_BRACKET N_TO_FOR CLOSE_SQR_BRACKET N_TIPOS_DECLARACION_MATRIZ ID 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_DECLARACION",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // N_DECLARACION ::= ID OPEN_SQR_BRACKET N_TO_FOR CLOSE_SQR_BRACKET COLON N_CALL_FUNCTION 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_DECLARACION",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // N_DECLARACION ::= ID OPEN_SQR_BRACKET N_TO_FOR CLOSE_SQR_BRACKET COLON N_SENTENCIA_BOOLEANA_ANIDADA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_DECLARACION",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // N_DECLARACION ::= ID OPEN_SQR_BRACKET N_TO_FOR CLOSE_SQR_BRACKET error EXPR_LIST 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int errleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 String desc = "Fala \"]\" en la declaración del arreglo"; String mes = parser.errorMessage(desc, parser.getS()); DefaultMutableTreeNode nodo = parser.createNodo("ERROR"); RESULT = nodo;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_DECLARACION",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // N_DECLARACION ::= ID OPEN_SQR_BRACKET N_TO_FOR error COLON EXPR_LIST 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int errleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 String desc = "Fala \"]\" en la declaración del arreglo"; String mes = parser.errorMessage(desc, parser.getS()); DefaultMutableTreeNode nodo = parser.createNodo("ERROR"); RESULT = nodo;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_DECLARACION",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // N_DECLARACION ::= ID error N_TO_FOR CLOSE_SQR_BRACKET COLON EXPR_LIST 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int errleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 String desc = "Fala \"[\" en la declaración del arreglo"; String mes = parser.errorMessage(desc, parser.getS()); DefaultMutableTreeNode nodo = parser.createNodo("ERROR"); RESULT = nodo;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_DECLARACION",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // N_DECLARACION ::= ID OPEN_SQR_BRACKET N_TO_FOR CLOSE_SQR_BRACKET COLON EXPR_LIST 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_DECLARACION",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // N_DECLARACION ::= CHAR ID COLON CHAR_ELEMENT 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int chleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int chright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object ch = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_DECLARACION",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // N_DECLARACION ::= N_BOOLEAN_ID N_BOOLEAN_VALUE 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int valeft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int varight = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object va = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_DECLARACION",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // N_DECLARACION ::= INTENGER ID COLON EXPR_LIST 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_DECLARACION",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // N_DECLARACION ::= CHAR N_DECLARACION_ID 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int deleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int deright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object de = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_DECLARACION",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // N_DECLARACION ::= BOOLEAN N_DECLARACION_ID 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int deleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int deright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object de = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_DECLARACION",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // N_DECLARACION ::= INTENGER N_DECLARACION_ID 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_DECLARACION",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // N_DECLARACION ::= ID COLON EXPR_LIST 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_DECLARACION",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // N_DECLARACION ::= ID COLON N_SENTENCIA_BOOLEANA_ANIDADA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int bnleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int bnright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object bn = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_DECLARACION",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // N_SENTENCIA_BOOLEANA_SWITCH ::= error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        String desc = "Error en sentencia booleana del switch: falta identificador u operador relacional";
        String mes = parser.errorMessage(desc, parser.getS());
        DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
        RESULT = nodo;
        //parser.report_(mes ,err);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA_SWITCH",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // N_SENTENCIA_BOOLEANA_SWITCH ::= NUMBER 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Integer f = (Integer)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA_SWITCH",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // N_SENTENCIA_BOOLEANA_SWITCH ::= CHAR_ELEMENT 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA_SWITCH",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // N_SENTENCIA_BOOLEANA_SWITCH ::= FALSE 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA_SWITCH",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // N_SENTENCIA_BOOLEANA_SWITCH ::= TRUE 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA_SWITCH",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // N_SENTENCIA_BOOLEANA_SWITCH ::= NUMBER BETWEEN ID 
            {
              Object RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Integer id1 = (Integer)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA_SWITCH",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // N_SENTENCIA_BOOLEANA_SWITCH ::= ID BETWEEN NUMBER 
            {
              Object RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Integer id2 = (Integer)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA_SWITCH",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // N_SENTENCIA_BOOLEANA_SWITCH ::= ID BETWEEN ID 
            {
              Object RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA_SWITCH",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // N_SENTENCIA_BOOLEANA_SWITCH ::= NUMBER BETWEEN NUMBER 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Integer n1 = (Integer)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Integer n2 = (Integer)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA_SWITCH",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // N_SENTENCIA_BOOLEANA_SWITCH ::= NUMBER OP_REL 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA_SWITCH",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // N_SENTENCIA_BOOLEANA_SWITCH ::= OP_REL TRUE 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA_SWITCH",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // N_SENTENCIA_BOOLEANA_SWITCH ::= OP_REL FALSE 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA_SWITCH",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // N_SENTENCIA_BOOLEANA_SWITCH ::= OP_REL NUMBER 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA_SWITCH",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // N_SENTENCIA_BOOLEANA_SWITCH ::= OP_REL STRING 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA_SWITCH",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // N_SENTENCIA_BOOLEANA_SWITCH ::= STRING OP_REL 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA_SWITCH",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // N_SENTENCIA_BOOLEANA_SWITCH ::= OP_REL ID 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA_SWITCH",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // N_SENTENCIA_BOOLEANA_SWITCH ::= ID OP_REL 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA_SWITCH",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // N_SENTENCIA_BOOLEANA ::= OP_REL error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
            String desc = "Error en sentencia booleana por derecha";
            String mes = parser.errorMessage(desc, parser.getS());
            DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
            RESULT = nodo;
            //parser.report_(mes ,err);
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // N_SENTENCIA_BOOLEANA ::= error OP_REL 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
            String desc = "Error en sentencia booleana por izquierda";
            String mes = parser.errorMessage(desc, parser.getS());
            DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
            RESULT = nodo;
            //parser.report_(mes ,err);
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // N_SENTENCIA_BOOLEANA ::= FALSE OP_REL TRUE 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // N_SENTENCIA_BOOLEANA ::= FALSE OP_REL FALSE 
            {
              Object RESULT =null;
		int f1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object f1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int f2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int f2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object f2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // N_SENTENCIA_BOOLEANA ::= TRUE OP_REL TRUE 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // N_SENTENCIA_BOOLEANA ::= TRUE OP_REL FALSE 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // N_SENTENCIA_BOOLEANA ::= TRUE OP_REL STRING 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // N_SENTENCIA_BOOLEANA ::= FALSE OP_REL STRING 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // N_SENTENCIA_BOOLEANA ::= STRING OP_REL TRUE 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // N_SENTENCIA_BOOLEANA ::= STRING OP_REL FALSE 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // N_SENTENCIA_BOOLEANA ::= STRING OP_REL STRING 
            {
              Object RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // N_SENTENCIA_BOOLEANA ::= TRUE OP_REL NUMBER 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // N_SENTENCIA_BOOLEANA ::= FALSE OP_REL NUMBER 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // N_SENTENCIA_BOOLEANA ::= STRING OP_REL NUMBER 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // N_SENTENCIA_BOOLEANA ::= NUMBER OP_REL TRUE 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // N_SENTENCIA_BOOLEANA ::= NUMBER OP_REL FALSE 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // N_SENTENCIA_BOOLEANA ::= NUMBER OP_REL STRING 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // N_SENTENCIA_BOOLEANA ::= NUMBER OP_REL error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
            String desc = "Operando derecho con número no válido";
            String mes = parser.errorMessage(desc, parser.getS());
            DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
            RESULT = nodo;
            //parser.report_(mes ,err);
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // N_SENTENCIA_BOOLEANA ::= NUMBER OP_REL NUMBER 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Integer n1 = (Integer)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Integer n2 = (Integer)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // N_SENTENCIA_BOOLEANA ::= TRUE OP_REL error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
            String desc = "Operando derecho con true no válido";
            String mes = parser.errorMessage(desc, parser.getS());
            DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
            RESULT = nodo;
            //parser.report_(mes ,err);
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // N_SENTENCIA_BOOLEANA ::= TRUE OP_REL ID 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // N_SENTENCIA_BOOLEANA ::= FALSE OP_REL error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
            String desc = "Operando derecho con false no válido";
            String mes = parser.errorMessage(desc, parser.getS());
            DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
            RESULT = nodo;
            //parser.report_(mes ,err);
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // N_SENTENCIA_BOOLEANA ::= FALSE OP_REL ID 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // N_SENTENCIA_BOOLEANA ::= STRING OP_REL error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
            String desc = "Operando derecho con String no valido";
            String mes = parser.errorMessage(desc, parser.getS());
            DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
            RESULT = nodo;
            //parser.report_(mes ,err);
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // N_SENTENCIA_BOOLEANA ::= STRING OP_REL ID 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // N_SENTENCIA_BOOLEANA ::= NUMBER OP_REL ID 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // N_SENTENCIA_BOOLEANA ::= ID OP_REL EXPR_LIST 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // N_AND_OR ::= CON_OR error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 String desc = "Error en sentencia booleana para comparar con OR"; String mes = parser.errorMessage(desc, parser.getS()); DefaultMutableTreeNode nodo = parser.createNodo("ERROR"); RESULT = nodo;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_AND_OR",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // N_AND_OR ::= CON_AND error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 String desc = "Error en sentencia booleana para comparar con AND."; String mes = parser.errorMessage(desc, parser.getS()); DefaultMutableTreeNode nodo = parser.createNodo("ERROR"); RESULT = nodo;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_AND_OR",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // N_AND_OR ::= CON_OR N_SENTENCIA_BOOLEANA_ANIDADA 
            {
              Object RESULT =null;
		int ndleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int ndright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object nd = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int blleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int blright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object bl = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_AND_OR",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // N_AND_OR ::= CON_AND N_SENTENCIA_BOOLEANA_ANIDADA 
            {
              Object RESULT =null;
		int ndleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int ndright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object nd = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int blleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int blright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object bl = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_AND_OR",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // N_SENTENCIA_BOOLEANA_ANIDADA ::= error OPEN_PARENTESIS CLOSE_PARENTESIS 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
            String desc = "Parentesis vacios en sentencia booleana";
            String mes = parser.errorMessage(desc, parser.getS());
            DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
            RESULT = nodo;
            parser.report_error(mes ,err);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA_ANIDADA",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // N_SENTENCIA_BOOLEANA_ANIDADA ::= OPEN_PARENTESIS CLOSE_PARENTESIS error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
            String desc = "Parentesis vacios en sentencia booleana";
            String mes = parser.errorMessage(desc, parser.getS());
            DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
            RESULT = nodo;
            parser.report_error(mes ,err);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA_ANIDADA",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // N_SENTENCIA_BOOLEANA_ANIDADA ::= OPEN_PARENTESIS N_SENTENCIA_BOOLEANA_ANIDADA CLOSE_PARENTESIS 
            {
              Object RESULT =null;
		int blleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int blright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object bl = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA_ANIDADA",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // N_SENTENCIA_BOOLEANA_ANIDADA ::= OPEN_PARENTESIS N_SENTENCIA_BOOLEANA_ANIDADA CLOSE_PARENTESIS N_AND_OR 
            {
              Object RESULT =null;
		int blleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int blright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object bl = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int ndleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int ndright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object nd = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA_ANIDADA",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // N_SENTENCIA_BOOLEANA_ANIDADA ::= N_SENTENCIA_BOOLEANA 
            {
              Object RESULT =null;
		int blleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int blright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object bl = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA_ANIDADA",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // N_SENTENCIA_BOOLEANA_ANIDADA ::= N_SENTENCIA_BOOLEANA N_AND_OR 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA_ANIDADA",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // N_CALL_FUNCTION_PARAMETROS ::= N_VALOR_VARIABLE COMA error 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int errleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        String desc = "Coma de más o falta valor en parametros de funcion";
        String mes = parser.errorMessage(desc, parser.getS());
        DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
        RESULT = nodo;
        //parser.report_(mes ,err);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_CALL_FUNCTION_PARAMETROS",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // N_CALL_FUNCTION_PARAMETROS ::= N_VALOR_VARIABLE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_CALL_FUNCTION_PARAMETROS",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // N_CALL_FUNCTION_PARAMETROS ::= N_VALOR_VARIABLE COMA N_CALL_FUNCTION_PARAMETROS 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_CALL_FUNCTION_PARAMETROS",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // N_CALL_FUNCTION ::= ID OPEN_PARENTESIS error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        String desc = "Falta cerrar parentesis en llamado de función";
        String mes = parser.errorMessage(desc, parser.getS());
        DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
        RESULT = nodo;
        parser.report_error(mes ,err);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_CALL_FUNCTION",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // N_CALL_FUNCTION ::= ID error OPEN_PARENTESIS 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
        String desc = "Falta el el identificador de la funcion";
        String mes = parser.errorMessage(desc, parser.getS());
        DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
        RESULT = nodo;
        parser.report_error(mes ,err);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_CALL_FUNCTION",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // N_CALL_FUNCTION ::= ID OPEN_PARENTESIS CLOSE_PARENTESIS 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_CALL_FUNCTION",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // N_CALL_FUNCTION ::= ID OPEN_PARENTESIS N_CALL_FUNCTION_PARAMETROS CLOSE_PARENTESIS 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_CALL_FUNCTION",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // N_SWITCH_CASE ::= OPEN_PARENTESIS error OPEN_PARENTESIS COLON N_SENTENCIA N_SWITCH_CASE 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int swleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int swright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object sw = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 String desc = "Error en sentencia booleana del switch, debe ser de la forma: \"(OP_REL valorAComparar):\""; String mes = parser.errorMessage(desc, parser.getS()); DefaultMutableTreeNode nodo = parser.createNodo("ERROR"); RESULT = nodo;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_SWITCH_CASE",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // N_SWITCH_CASE ::= OPEN_PARENTESIS error COLON N_SENTENCIA N_SWITCH_CASE 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int swleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int swright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object sw = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                String desc = "Falta \":\" en la declaraciónd el switcch case";
                String mes = parser.errorMessage(desc, parser.getS());
                DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
                RESULT = nodo;
                //parser.report_(mes ,err);
            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_SWITCH_CASE",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // N_SWITCH_CASE ::= OPEN_PARENTESIS ELSE CLOSE_PARENTESIS COLON 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_SWITCH_CASE",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // N_SWITCH_CASE ::= OPEN_PARENTESIS ELSE CLOSE_PARENTESIS COLON N_SENTENCIA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_SWITCH_CASE",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // N_SWITCH_CASE ::= OPEN_PARENTESIS N_SENTENCIA_BOOLEANA_SWITCH CLOSE_PARENTESIS COLON N_SWITCH_CASE 
            {
              Object RESULT =null;
		int bnleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int bnright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object bn = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_SWITCH_CASE",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // N_SWITCH_CASE ::= OPEN_PARENTESIS N_SENTENCIA_BOOLEANA_SWITCH CLOSE_PARENTESIS COLON N_SENTENCIA N_SWITCH_CASE 
            {
              Object RESULT =null;
		int bnleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int bnright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object bn = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int swleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int swright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object sw = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_SWITCH_CASE",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // N_SWITCH ::= OPEN_PARENTESIS ID CLOSE_PARENTESIS OPEN_PARENTESIS IF_SWITCH error N_SWITCH_CASE CLOSE_BLOCK 
            {
              Object RESULT =null;
		int swleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int swright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object sw = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 String desc = "Falta \":\" en la declaración del switch"; String mes = parser.errorMessage(desc, parser.getS()); DefaultMutableTreeNode nodo = parser.createNodo("ERROR"); RESULT = nodo;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_SWITCH",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // N_SWITCH ::= OPEN_PARENTESIS ID CLOSE_PARENTESIS error IF_SWITCH COLON N_SWITCH_CASE CLOSE_BLOCK 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int swleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int swright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object sw = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 String desc = "Tiene que volver a abrir parentesis en la declaración del switch: (A=B)(if: ... :)"; String mes = parser.errorMessage(desc, parser.getS()); DefaultMutableTreeNode nodo = parser.createNodo("ERROR"); RESULT = nodo;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_SWITCH",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // N_SWITCH ::= OPEN_PARENTESIS error CLOSE_PARENTESIS OPEN_PARENTESIS IF_SWITCH COLON N_SWITCH_CASE CLOSE_BLOCK 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int swleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int swright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object sw = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 String desc = "Falta la variable a comparar en la declaracion del switch"; String mes = parser.errorMessage(desc, parser.getS()); DefaultMutableTreeNode nodo = parser.createNodo("ERROR"); RESULT = nodo;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_SWITCH",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // N_SWITCH ::= OPEN_PARENTESIS ID CLOSE_PARENTESIS OPEN_PARENTESIS IF_SWITCH COLON N_SWITCH_CASE CLOSE_BLOCK 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int swleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int swright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object sw = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_SWITCH",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // N_ELSE_IF ::= OPEN_PARENTESIS error CLOSE_PARENTESIS COLON N_SENTENCIA N_ELSE_IF 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int swleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int swright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object sw = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 String desc = "No tiene sentencia boolena en la condición a evaluar"; String mes = parser.errorMessage(desc, parser.getS()); DefaultMutableTreeNode nodo = parser.createNodo("ERROR"); RESULT = nodo;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_ELSE_IF",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // N_ELSE_IF ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_ELSE_IF",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // N_ELSE_IF ::= OPEN_PARENTESIS ELSE CLOSE_PARENTESIS COLON 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_ELSE_IF",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // N_ELSE_IF ::= OPEN_PARENTESIS ELSE CLOSE_PARENTESIS COLON N_SENTENCIA 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_ELSE_IF",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // N_ELSE_IF ::= OPEN_PARENTESIS N_SENTENCIA_BOOLEANA_ANIDADA CLOSE_PARENTESIS COLON N_ELSE_IF 
            {
              Object RESULT =null;
		int bnleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int bnright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object bn = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int swleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int swright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object sw = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_ELSE_IF",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // N_ELSE_IF ::= OPEN_PARENTESIS N_SENTENCIA_BOOLEANA_ANIDADA CLOSE_PARENTESIS COLON N_SENTENCIA N_ELSE_IF 
            {
              Object RESULT =null;
		int bnleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int bnright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object bn = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int swleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int swright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object sw = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_ELSE_IF",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // N_IF ::= OPEN_PARENTESIS error CLOSE_PARENTESIS OPEN_PARENTESIS IF_SWITCH COLON N_SENTENCIA N_ELSE_IF CLOSE_BLOCK 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		 
        String desc = "No tiene sentencia boolena en la condición a evaluar"; 
        String mes = parser.errorMessage(desc, parser.getS()); 
        DefaultMutableTreeNode nodo = parser.createNodo("ERROR"); 
        RESULT = nodo;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_IF",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // N_IF ::= OPEN_PARENTESIS N_SENTENCIA_BOOLEANA_ANIDADA CLOSE_PARENTESIS error IF_SWITCH COLON N_SENTENCIA N_ELSE_IF CLOSE_BLOCK 
            {
              Object RESULT =null;
		int bnleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).left;
		int bnright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).right;
		Object bn = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).value;
		int errleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		 String desc = "Falta volver a abrir \"(\" en la declaración del if"; String mes = parser.errorMessage(desc, parser.getS()); DefaultMutableTreeNode nodo = parser.createNodo("ERROR"); RESULT = nodo;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_IF",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // N_IF ::= OPEN_PARENTESIS N_SENTENCIA_BOOLEANA_ANIDADA CLOSE_PARENTESIS OPEN_PARENTESIS IF_SWITCH COLON N_ELSE_IF CLOSE_BLOCK 
            {
              Object RESULT =null;
		int bnleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int bnright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object bn = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object el = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_IF",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // N_IF ::= OPEN_PARENTESIS N_SENTENCIA_BOOLEANA_ANIDADA CLOSE_PARENTESIS OPEN_PARENTESIS IF_SWITCH COLON N_SENTENCIA N_ELSE_IF CLOSE_BLOCK 
            {
              Object RESULT =null;
		int bnleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).left;
		int bnright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).right;
		Object bn = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object el = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_IF",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // N_TO_FOR ::= error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        String desc = "Solo se admiten Numeros enteros y variables";
        String mes = parser.errorMessage(desc, parser.getS());
        //parser.report_(mes ,err);
        //DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
        RESULT = "ERROR";
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_TO_FOR",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // N_TO_FOR ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = id;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_TO_FOR",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // N_TO_FOR ::= NUMBER 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = n;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_TO_FOR",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // N_FOR ::= OPEN_PARENTESIS ID COMA N_TO_FOR TO N_TO_FOR COMA OP_SUM N_TO_FOR CLOSE_PARENTESIS OPEN_PARENTESIS FOR COLON N_SENTENCIA error 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-13)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-13)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-13)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int errleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 String desc = "Falta \":)\" para cerrar el bloque for"; String mes = parser.errorMessage(desc, parser.getS()); DefaultMutableTreeNode nodo = parser.createNodo("ERROR"); RESULT = nodo;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_FOR",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-14)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // N_FOR ::= OPEN_PARENTESIS ID COMA N_TO_FOR TO N_TO_FOR COMA OP_SUM N_TO_FOR CLOSE_PARENTESIS OPEN_PARENTESIS FOR error N_SENTENCIA CLOSE_BLOCK 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-13)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-13)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-13)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int errleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		 String desc = "Falta \":\" en la declaración del for"; String mes = parser.errorMessage(desc, parser.getS()); DefaultMutableTreeNode nodo = parser.createNodo("ERROR"); RESULT = nodo;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_FOR",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-14)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // N_FOR ::= OPEN_PARENTESIS ID COMA N_TO_FOR TO N_TO_FOR COMA OP_SUM N_TO_FOR CLOSE_PARENTESIS error FOR COLON N_SENTENCIA CLOSE_BLOCK 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-13)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-13)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-13)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int errleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		 String desc = "Falta otro \"(\" en la declaración del for"; String mes = parser.errorMessage(desc, parser.getS()); DefaultMutableTreeNode nodo = parser.createNodo("ERROR"); RESULT = nodo;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_FOR",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-14)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // N_FOR ::= OPEN_PARENTESIS ID COMA N_TO_FOR TO N_TO_FOR COMA error N_TO_FOR CLOSE_PARENTESIS OPEN_PARENTESIS FOR COLON N_SENTENCIA CLOSE_BLOCK 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-13)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-13)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-13)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).value;
		int errleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		 String desc = "Falta \"+ o -\" en el incremento del for"; String mes = parser.errorMessage(desc, parser.getS()); DefaultMutableTreeNode nodo = parser.createNodo("ERROR"); RESULT = nodo;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_FOR",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-14)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // N_FOR ::= OPEN_PARENTESIS ID COMA N_TO_FOR TO N_TO_FOR error OP_SUM N_TO_FOR CLOSE_PARENTESIS OPEN_PARENTESIS FOR COLON N_SENTENCIA CLOSE_BLOCK 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-13)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-13)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-13)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).value;
		int errleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		 String desc = "Falta \",\"  después del rango en la declaración del for"; String mes = parser.errorMessage(desc, parser.getS()); DefaultMutableTreeNode nodo = parser.createNodo("ERROR"); RESULT = nodo;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_FOR",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-14)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // N_FOR ::= OPEN_PARENTESIS ID COMA N_TO_FOR error N_TO_FOR COMA OP_SUM N_TO_FOR CLOSE_PARENTESIS OPEN_PARENTESIS FOR COLON N_SENTENCIA CLOSE_BLOCK 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-13)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-13)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-13)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)).value;
		int errleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		 String desc = "Falta \"-> o to\" en la declaración del for"; String mes = parser.errorMessage(desc, parser.getS()); DefaultMutableTreeNode nodo = parser.createNodo("ERROR"); RESULT = nodo;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_FOR",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-14)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // N_FOR ::= OPEN_PARENTESIS ID error N_TO_FOR TO N_TO_FOR COMA OP_SUM N_TO_FOR CLOSE_PARENTESIS OPEN_PARENTESIS FOR COLON N_SENTENCIA CLOSE_BLOCK 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-13)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-13)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-13)).value;
		int errleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		 String desc = "Falta \",\"  después del ID contador en la declaración del for"; String mes = parser.errorMessage(desc, parser.getS()); DefaultMutableTreeNode nodo = parser.createNodo("ERROR"); RESULT = nodo;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_FOR",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-14)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // N_FOR ::= OPEN_PARENTESIS error COMA N_TO_FOR TO N_TO_FOR COMA OP_SUM N_TO_FOR CLOSE_PARENTESIS OPEN_PARENTESIS FOR COLON N_SENTENCIA CLOSE_BLOCK 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-13)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-13)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-13)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		 String desc = "Falta el id del contadador en la declaración del while"; String mes = parser.errorMessage(desc, parser.getS()); DefaultMutableTreeNode nodo = parser.createNodo("ERROR"); RESULT = nodo;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_FOR",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-14)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // N_FOR ::= OPEN_PARENTESIS ID COMA N_TO_FOR TO N_TO_FOR COMA OP_SUM N_TO_FOR CLOSE_PARENTESIS OPEN_PARENTESIS FOR COLON CLOSE_BLOCK 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_FOR",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-13)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // N_FOR ::= OPEN_PARENTESIS ID COMA N_TO_FOR TO N_TO_FOR COMA OP_SUM N_TO_FOR CLOSE_PARENTESIS OPEN_PARENTESIS FOR COLON N_SENTENCIA CLOSE_BLOCK 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-13)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-13)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-13)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_FOR",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-14)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // N_WHILE ::= OPEN_PARENTESIS N_SENTENCIA_BOOLEANA_ANIDADA CLOSE_PARENTESIS OPEN_PARENTESIS WHILE error N_SENTENCIA CLOSE_BLOCK 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		 String desc = "Falta \":\" en la declaración del while"; String mes = parser.errorMessage(desc, parser.getS()); DefaultMutableTreeNode nodo = parser.createNodo("ERROR"); RESULT = nodo;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_WHILE",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // N_WHILE ::= OPEN_PARENTESIS N_SENTENCIA_BOOLEANA_ANIDADA CLOSE_PARENTESIS error WHILE COLON N_SENTENCIA CLOSE_BLOCK 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		 String desc = "Falta \"(\" en la declaración del while"; String mes = parser.errorMessage(desc, parser.getS()); DefaultMutableTreeNode nodo = parser.createNodo("ERROR"); RESULT = nodo;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_WHILE",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // N_WHILE ::= OPEN_PARENTESIS N_SENTENCIA_BOOLEANA_ANIDADA error OPEN_PARENTESIS WHILE COLON N_SENTENCIA CLOSE_BLOCK 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		 String desc = "Falta \")\" en la declaración del while"; String mes = parser.errorMessage(desc, parser.getS()); DefaultMutableTreeNode nodo = parser.createNodo("ERROR"); RESULT = nodo;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_WHILE",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // N_WHILE ::= OPEN_PARENTESIS N_SENTENCIA_BOOLEANA_ANIDADA CLOSE_PARENTESIS OPEN_PARENTESIS WHILE COLON CLOSE_BLOCK 
            {
              Object RESULT =null;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_WHILE",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // N_WHILE ::= OPEN_PARENTESIS N_SENTENCIA_BOOLEANA_ANIDADA CLOSE_PARENTESIS OPEN_PARENTESIS WHILE COLON N_SENTENCIA CLOSE_BLOCK 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object e4 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int e5left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object e5 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int e6left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int e6right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object e6 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int e8left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int e8right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e8 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_WHILE",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // N_SENTENCIA ::= N_CALL_FUNCTION PYC 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // N_SENTENCIA ::= N_SENTENCIA N_CALL_FUNCTION PYC 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // N_SENTENCIA ::= N_CIN 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // N_SENTENCIA ::= N_SENTENCIA N_CIN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // N_SENTENCIA ::= N_PRINT 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // N_SENTENCIA ::= N_SENTENCIA N_PRINT 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // N_SENTENCIA ::= N_DECLARACION PYC 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // N_SENTENCIA ::= N_SENTENCIA N_DECLARACION PYC 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // N_SENTENCIA ::= N_SWITCH 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // N_SENTENCIA ::= N_SENTENCIA N_SWITCH 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // N_SENTENCIA ::= N_IF 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // N_SENTENCIA ::= N_SENTENCIA N_IF 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // N_SENTENCIA ::= N_FOR 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // N_SENTENCIA ::= N_SENTENCIA N_FOR 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // N_SENTENCIA ::= N_WHILE 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // N_SENTENCIA ::= N_SENTENCIA N_WHILE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // N_RETORNO_FUNCTION ::= error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    String desc = "En los parametros solo se aceptan los tipos: int, bln, chr, arr, mtx";
    String mes = parser.errorMessage(desc, parser.getS());
    DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
    RESULT = nodo;
    //parser.report_(mes ,err);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_RETORNO_FUNCTION",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // N_RETORNO_FUNCTION ::= MATRIX N_TIPOS_DECLARACION_MATRIZ 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = parser.createNodo(n+" "+m+"");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_RETORNO_FUNCTION",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // N_RETORNO_FUNCTION ::= ARRAY N_TIPOS_DECLARACION_MATRIZ 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = parser.createNodo(n+" "+m+"");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_RETORNO_FUNCTION",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // N_RETORNO_FUNCTION ::= CHAR 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = parser.createNodo(n+"");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_RETORNO_FUNCTION",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // N_RETORNO_FUNCTION ::= BOOLEAN 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = parser.createNodo(n+"");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_RETORNO_FUNCTION",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // N_RETORNO_FUNCTION ::= INTENGER 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = parser.createNodo(n+"");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_RETORNO_FUNCTION",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // N_PARAMETRO_FUNCTION ::= ID ID error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        String desc = "Debe ser un solo identificador. Si tiene varias palabras unasla: \"funcionMuesta o funcion_muestra\"   ";
        String mes = parser.errorMessage(desc, parser.getS());
        DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
        RESULT = nodo;
        //parser.report_(mes ,err);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_PARAMETRO_FUNCTION",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // N_PARAMETRO_FUNCTION ::= N_RETORNO_FUNCTION ID 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_PARAMETRO_FUNCTION",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // N_PARAMETRO_FUNCTION ::= N_RETORNO_FUNCTION ID COMA N_PARAMETRO_FUNCTION 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_PARAMETRO_FUNCTION",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // N_PARAMETRO ::= OPEN_PARENTESIS N_PARAMETRO_FUNCTION CLOSE_PARENTESIS 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_PARAMETRO",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // N_PARAMETRO ::= OPEN_PARENTESIS CLOSE_PARENTESIS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_PARAMETRO",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // N_FUNCTION ::= N_PARAMETRO ID OPEN_PARENTESIS FUNCTION COLON N_RETORNO_FUNCTION N_SENTENCIA RETURN N_VALOR_VARIABLE error 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int vbleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int vbright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object vb = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int errleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                String desc = "Falta el PYC del retorno";
                String mes = parser.errorMessage(desc, parser.getS());
                //parser.report_(mes ,err);
                DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
                RESULT = nodo;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_FUNCTION",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // N_FUNCTION ::= N_PARAMETRO ID OPEN_PARENTESIS FUNCTION COLON N_RETORNO_FUNCTION N_SENTENCIA RETURN N_VALOR_VARIABLE PYC error 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int vbleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int vbright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object vb = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int errleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                String desc = "Falta el close block de la función";
                String mes = parser.errorMessage(desc, parser.getS());
                //parser.report_(mes ,err);
                DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
                RESULT = nodo;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_FUNCTION",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // N_FUNCTION ::= N_PARAMETRO ID OPEN_PARENTESIS FUNCTION COLON N_RETORNO_FUNCTION N_SENTENCIA error CLOSE_BLOCK 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int errleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                String desc = "Falta el return de la función";
                String mes = parser.errorMessage(desc, parser.getS());
                //parser.report_(mes ,err);
                DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
                RESULT = nodo;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_FUNCTION",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // N_FUNCTION ::= N_PARAMETRO ID OPEN_PARENTESIS FUNCTION error 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int errleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                String desc = "Falta \":\" depues de fun";
                String mes = parser.errorMessage(desc, parser.getS());
                //parser.report_(mes ,err);
                DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
                RESULT = nodo;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_FUNCTION",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // N_FUNCTION ::= N_PARAMETRO ID OPEN_PARENTESIS FUNCTION COLON N_RETORNO_FUNCTION RETURN N_VALOR_VARIABLE PYC CLOSE_BLOCK 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int vbleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int vbright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object vb = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_FUNCTION",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // N_FUNCTION ::= N_PARAMETRO ID OPEN_PARENTESIS FUNCTION COLON NULL CLOSE_BLOCK 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int nlleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int nlright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object nl = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_FUNCTION",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // N_FUNCTION ::= N_PARAMETRO ID OPEN_PARENTESIS FUNCTION COLON NULL N_SENTENCIA CLOSE_BLOCK 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_FUNCTION",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // N_FUNCTION ::= N_PARAMETRO ID OPEN_PARENTESIS FUNCTION COLON N_RETORNO_FUNCTION N_SENTENCIA RETURN N_VALOR_VARIABLE PYC CLOSE_BLOCK 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int vbleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int vbright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object vb = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_FUNCTION",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // N_FUNCTIONS ::= N_FUNCTION 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_FUNCTIONS",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // N_FUNCTIONS ::= N_FUNCTIONS N_FUNCTION 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_FUNCTIONS",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // N_MAIN ::= error NT$0 OPEN_PARENTESIS CLOSE_PARENTESIS OPEN_PARENTESIS MAIN COLON N_SENTENCIA CLOSE_BLOCK 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).value;
		int errleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_MAIN",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // NT$0 ::= 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

                String desc = "Debe iniciar con el main primero";
                String mes = parser.errorMessage(desc, parser.getS());
                DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
                System.out.println("error: " + err);
                RESULT = nodo;
                //parser.report_error(mes ,err);
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$0",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // N_MAIN ::= OPEN_PARENTESIS error CLOSE_PARENTESIS OPEN_PARENTESIS MAIN COLON N_SENTENCIA CLOSE_BLOCK 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                String desc = "El main no debe tener parametros";
                String mes = parser.errorMessage(desc, parser.getS());
                DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
                RESULT = nodo;
                //parser.report_(mes ,err);
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_MAIN",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // N_MAIN ::= OPEN_PARENTESIS CLOSE_PARENTESIS OPEN_PARENTESIS error COLON N_SENTENCIA CLOSE_BLOCK 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                String desc = "Falta el \"main\" al inicio" ;
                String mes = parser.errorMessage(desc, parser.getS());
                DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
                RESULT = nodo;
                //parser.report_(mes ,err);
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_MAIN",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // N_MAIN ::= OPEN_PARENTESIS CLOSE_PARENTESIS OPEN_PARENTESIS MAIN COLON CLOSE_BLOCK 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_MAIN",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // N_MAIN ::= OPEN_PARENTESIS CLOSE_PARENTESIS error MAIN COLON N_SENTENCIA CLOSE_BLOCK 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                String desc = "Debe volver a abrir parentesis antes de main \"()(main: -código- :)\" ";
                String mes = parser.errorMessage(desc, parser.getS());
                DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
                RESULT = nodo;
                //parser.report_(mes ,err);
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_MAIN",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // N_MAIN ::= OPEN_PARENTESIS CLOSE_PARENTESIS OPEN_PARENTESIS MAIN COLON N_SENTENCIA CLOSE_BLOCK 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_MAIN",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // N_INICIO ::= N_MAIN N_FUNCTIONS 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // N_INICIO ::= N_MAIN 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= N_INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

