
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Sep 22 00:53:26 CST 2020
//----------------------------------------------------

package CUP;

import java_cup.runtime.Symbol;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Sep 22 00:53:26 CST 2020
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\166\000\002\002\004\000\002\035\005\000\002\035" +
    "\004\000\002\037\005\000\002\037\005\000\002\037\005" +
    "\000\002\037\003\000\002\002\003\000\002\002\004\000" +
    "\002\002\004\000\002\040\002\000\002\027\012\000\002" +
    "\003\012\000\002\004\020\000\002\005\012\000\002\005" +
    "\017\000\002\016\012\000\002\017\010\000\002\017\007" +
    "\000\002\025\004\000\002\025\003\000\002\041\002\000" +
    "\002\020\015\000\002\021\005\000\002\021\003\000\002" +
    "\022\003\000\002\022\003\000\002\022\003\000\002\022" +
    "\003\000\002\022\003\000\002\013\004\000\002\013\003" +
    "\000\002\013\004\000\002\013\003\000\002\013\004\000" +
    "\002\013\003\000\002\013\004\000\002\013\003\000\002" +
    "\013\005\000\002\013\004\000\002\013\004\000\002\013" +
    "\003\000\002\013\004\000\002\013\003\000\002\013\006" +
    "\000\002\013\003\000\002\031\005\000\002\031\003\000" +
    "\002\032\005\000\002\032\004\000\002\033\005\000\002" +
    "\034\003\000\002\034\003\000\002\034\003\000\002\034" +
    "\006\000\002\034\005\000\002\014\006\000\002\014\006" +
    "\000\002\014\006\000\002\014\006\000\002\014\004\000" +
    "\002\014\006\000\002\014\007\000\002\014\010\000\002" +
    "\007\005\000\002\007\004\000\002\010\004\000\002\010" +
    "\006\000\002\010\005\000\002\010\003\000\002\006\003" +
    "\000\002\006\003\000\002\006\003\000\002\006\003\000" +
    "\002\006\003\000\002\023\004\000\002\012\005\000\002" +
    "\012\005\000\002\012\005\000\002\012\005\000\002\012" +
    "\005\000\002\012\005\000\002\012\005\000\002\012\005" +
    "\000\002\012\010\000\002\012\005\000\002\012\005\000" +
    "\002\012\005\000\002\012\005\000\002\012\005\000\002" +
    "\012\010\000\002\012\005\000\002\012\005\000\002\012" +
    "\005\000\002\012\010\000\002\012\005\000\002\012\005" +
    "\000\002\012\007\000\002\012\004\000\002\012\004\000" +
    "\002\012\004\000\002\012\004\000\002\012\004\000\002" +
    "\012\005\000\002\012\005\000\002\015\004\000\002\042" +
    "\002\000\002\015\006\000\002\015\002\000\002\043\002" +
    "\000\002\024\011\000\002\044\002\000\002\026\011\000" +
    "\002\011\003\000\002\011\003\000\002\011\003\000\002" +
    "\011\003\000\002\011\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\356\000\004\006\004\001\002\000\016\007\ufff7\046" +
    "\uffec\047\uffec\050\uffec\051\uffec\052\uffec\001\002\000\004" +
    "\006\004\001\002\000\006\002\ufffa\006\012\001\002\000" +
    "\004\002\011\001\002\000\006\002\uffed\006\uffed\001\002" +
    "\000\004\002\001\001\002\000\014\046\uffec\047\uffec\050" +
    "\uffec\051\uffec\052\uffec\001\002\000\006\002\ufff9\006\012" +
    "\001\002\000\006\002\uffee\006\uffee\001\002\000\014\046" +
    "\021\047\023\050\022\051\024\052\016\001\002\000\004" +
    "\054\335\001\002\000\016\021\321\022\322\023\060\037" +
    "\053\054\323\055\056\001\002\000\006\007\uffe9\014\316" +
    "\001\002\000\004\054\311\001\002\000\004\054\304\001" +
    "\002\000\004\054\275\001\002\000\004\054\265\001\002" +
    "\000\004\007\026\001\002\000\004\054\027\001\002\000" +
    "\004\006\030\001\002\000\004\025\031\001\002\000\004" +
    "\015\032\001\002\000\014\046\034\047\036\050\037\051" +
    "\040\052\033\001\002\000\020\003\uffe4\006\uffe4\046\uffe4" +
    "\047\uffe4\050\uffe4\051\uffe4\052\uffe4\001\002\000\020\003" +
    "\uffe8\006\uffe8\046\uffe8\047\uffe8\050\uffe8\051\uffe8\052\uffe8" +
    "\001\002\000\020\003\047\006\052\046\021\047\023\050" +
    "\022\051\024\052\016\001\002\000\020\003\uffe7\006\uffe7" +
    "\046\uffe7\047\uffe7\050\uffe7\051\uffe7\052\uffe7\001\002\000" +
    "\020\003\uffe6\006\uffe6\046\uffe6\047\uffe6\050\uffe6\051\uffe6" +
    "\052\uffe6\001\002\000\020\003\uffe5\006\uffe5\046\uffe5\047" +
    "\uffe5\050\uffe5\051\uffe5\052\uffe5\001\002\000\022\005\uffdc" +
    "\006\uffdc\033\uffdc\046\uffdc\047\uffdc\050\uffdc\051\uffdc\052" +
    "\uffdc\001\002\000\022\005\uffd8\006\uffd8\033\uffd8\046\uffd8" +
    "\047\uffd8\050\uffd8\051\uffd8\052\uffd8\001\002\000\022\005" +
    "\264\006\052\033\121\046\021\047\023\050\022\051\024" +
    "\052\016\001\002\000\022\005\uffd6\006\uffd6\033\uffd6\046" +
    "\uffd6\047\uffd6\050\uffd6\051\uffd6\052\uffd6\001\002\000\022" +
    "\005\uffe2\006\uffe2\033\uffe2\046\uffe2\047\uffe2\050\uffe2\051" +
    "\uffe2\052\uffe2\001\002\000\022\005\uffe0\006\uffe0\033\uffe0" +
    "\046\uffe0\047\uffe0\050\uffe0\051\uffe0\052\uffe0\001\002\000" +
    "\022\005\uffd4\006\uffd4\033\uffd4\046\uffd4\047\uffd4\050\uffd4" +
    "\051\uffd4\052\uffd4\001\002\000\004\010\263\001\002\000" +
    "\022\005\uffde\006\uffde\033\uffde\046\uffde\047\uffde\050\uffde" +
    "\051\uffde\052\uffde\001\002\000\022\021\057\022\061\023" +
    "\060\027\uff94\034\uff92\037\053\054\062\055\056\001\002" +
    "\000\010\023\261\054\260\055\262\001\002\000\004\034" +
    "\253\001\002\000\004\027\246\001\002\000\006\011\237" +
    "\037\240\001\002\000\004\037\221\001\002\000\004\037" +
    "\214\001\002\000\004\037\204\001\002\000\012\007\146" +
    "\011\073\014\145\037\074\001\002\000\004\007\105\001" +
    "\002\000\014\007\uff95\010\uff95\014\uff95\044\065\045\066" +
    "\001\002\000\016\021\057\022\061\023\060\037\053\054" +
    "\072\055\056\001\002\000\016\021\uff97\022\uff97\023\uff97" +
    "\037\uff97\054\uff97\055\uff97\001\002\000\010\007\uffb6\010" +
    "\uffb6\014\uffb6\001\002\000\016\021\057\022\061\023\060" +
    "\037\053\054\072\055\056\001\002\000\014\007\uff95\010" +
    "\uff95\014\uff95\044\065\045\066\001\002\000\006\011\073" +
    "\037\074\001\002\000\004\054\102\001\002\000\014\021" +
    "\077\022\101\023\076\054\075\055\100\001\002\000\014" +
    "\007\uffb5\010\uffb5\014\uffb5\044\uffb5\045\uffb5\001\002\000" +
    "\014\007\uffb3\010\uffb3\014\uffb3\044\uffb3\045\uffb3\001\002" +
    "\000\014\007\uffb1\010\uffb1\014\uffb1\044\uffb1\045\uffb1\001" +
    "\002\000\014\007\uffb4\010\uffb4\014\uffb4\044\uffb4\045\uffb4" +
    "\001\002\000\014\007\uffb2\010\uffb2\014\uffb2\044\uffb2\045" +
    "\uffb2\001\002\000\014\007\uff99\010\uff99\014\uff99\044\uff99" +
    "\045\uff99\001\002\000\010\007\uff96\010\uff96\014\uff96\001" +
    "\002\000\010\007\uff98\010\uff98\014\uff98\001\002\000\004" +
    "\006\106\001\002\000\006\026\107\030\110\001\002\000" +
    "\004\015\134\001\002\000\004\015\111\001\002\000\020" +
    "\003\047\006\052\046\021\047\023\050\022\051\024\052" +
    "\016\001\002\000\022\005\116\006\052\033\121\046\021" +
    "\047\023\050\022\051\024\052\016\001\002\000\022\005" +
    "\uffdd\006\uffdd\033\uffdd\046\uffdd\047\uffdd\050\uffdd\051\uffdd" +
    "\052\uffdd\001\002\000\022\005\uffd9\006\uffd9\033\uffd9\046" +
    "\uffd9\047\uffd9\050\uffd9\051\uffd9\052\uffd9\001\002\000\022" +
    "\005\uffd7\006\uffd7\033\uffd7\046\uffd7\047\uffd7\050\uffd7\051" +
    "\uffd7\052\uffd7\001\002\000\022\005\ufff5\006\ufff5\033\ufff5" +
    "\046\ufff5\047\ufff5\050\ufff5\051\ufff5\052\ufff5\001\002\000" +
    "\022\005\uffe3\006\uffe3\033\uffe3\046\uffe3\047\uffe3\050\uffe3" +
    "\051\uffe3\052\uffe3\001\002\000\022\005\uffe1\006\uffe1\033" +
    "\uffe1\046\uffe1\047\uffe1\050\uffe1\051\uffe1\052\uffe1\001\002" +
    "\000\014\020\132\023\127\024\130\054\125\055\131\001" +
    "\002\000\022\005\uffdf\006\uffdf\033\uffdf\046\uffdf\047\uffdf" +
    "\050\uffdf\051\uffdf\052\uffdf\001\002\000\004\010\124\001" +
    "\002\000\022\005\uffdb\006\uffdb\033\uffdb\046\uffdb\047\uffdb" +
    "\050\uffdb\051\uffdb\052\uffdb\001\002\000\010\010\uffba\013" +
    "\uffba\014\uffba\001\002\000\004\010\133\001\002\000\010" +
    "\010\uffb9\013\uffb9\014\uffb9\001\002\000\010\010\uffb7\013" +
    "\uffb7\014\uffb7\001\002\000\010\010\uffbb\013\uffbb\014\uffbb" +
    "\001\002\000\010\010\uffb8\013\uffb8\014\uffb8\001\002\000" +
    "\022\005\uffd5\006\uffd5\033\uffd5\046\uffd5\047\uffd5\050\uffd5" +
    "\051\uffd5\052\uffd5\001\002\000\020\003\047\006\052\046" +
    "\021\047\023\050\022\051\024\052\016\001\002\000\022" +
    "\005\136\006\137\033\121\046\021\047\023\050\022\051" +
    "\024\052\016\001\002\000\022\005\ufff3\006\ufff3\033\ufff3" +
    "\046\ufff3\047\ufff3\050\ufff3\051\ufff3\052\ufff3\001\002\000" +
    "\024\021\057\022\061\023\060\027\uff94\032\140\034\uff92" +
    "\037\053\054\062\055\056\001\002\000\004\007\141\001" +
    "\002\000\004\015\142\001\002\000\020\003\047\006\052" +
    "\046\021\047\023\050\022\051\024\052\016\001\002\000" +
    "\022\005\144\006\052\033\121\046\021\047\023\050\022" +
    "\051\024\052\016\001\002\000\022\005\ufff2\006\ufff2\033" +
    "\ufff2\046\ufff2\047\ufff2\050\ufff2\051\ufff2\052\ufff2\001\002" +
    "\000\004\055\171\001\002\000\004\006\147\001\002\000" +
    "\004\026\150\001\002\000\004\015\151\001\002\000\004" +
    "\006\152\001\002\000\020\021\057\022\061\023\060\032" +
    "\155\037\053\054\072\055\056\001\002\000\004\005\154" +
    "\001\002\000\022\005\ufff1\006\ufff1\033\ufff1\046\ufff1\047" +
    "\ufff1\050\ufff1\051\ufff1\052\ufff1\001\002\000\004\007\166" +
    "\001\002\000\004\007\157\001\002\000\004\015\160\001" +
    "\002\000\020\003\047\006\052\046\021\047\023\050\022" +
    "\051\024\052\016\001\002\000\020\006\163\033\121\046" +
    "\021\047\023\050\022\051\024\052\016\001\002\000\004" +
    "\005\ufff0\001\002\000\024\021\057\022\061\023\060\027" +
    "\uff94\032\155\034\uff92\037\053\054\062\055\056\001\002" +
    "\000\004\007\165\001\002\000\006\006\106\015\160\001" +
    "\002\000\004\015\167\001\002\000\020\003\047\006\052" +
    "\046\021\047\023\050\022\051\024\052\016\001\002\000" +
    "\022\005\uffef\006\052\033\121\046\021\047\023\050\022" +
    "\051\024\052\016\001\002\000\004\035\172\001\002\000" +
    "\004\055\173\001\002\000\004\014\174\001\002\000\004" +
    "\043\175\001\002\000\004\007\176\001\002\000\004\006" +
    "\177\001\002\000\004\031\200\001\002\000\004\015\201" +
    "\001\002\000\020\003\047\006\052\046\021\047\023\050" +
    "\022\051\024\052\016\001\002\000\022\005\203\006\052" +
    "\033\121\046\021\047\023\050\022\051\024\052\016\001" +
    "\002\000\022\005\ufff4\006\ufff4\033\ufff4\046\ufff4\047\ufff4" +
    "\050\ufff4\051\ufff4\052\ufff4\001\002\000\014\021\207\022" +
    "\211\023\206\054\205\055\210\001\002\000\014\007\uffae" +
    "\010\uffae\014\uffae\044\uffae\045\uffae\001\002\000\014\007" +
    "\uffa4\010\uffa4\014\uffa4\044\uffa4\045\uffa4\001\002\000\004" +
    "\054\212\001\002\000\014\007\uffa8\010\uffa8\014\uffa8\044" +
    "\uffa8\045\uffa8\001\002\000\014\007\uffa1\010\uffa1\014\uffa1" +
    "\044\uffa1\045\uffa1\001\002\000\004\037\213\001\002\000" +
    "\014\007\uffa0\010\uffa0\014\uffa0\044\uffa0\045\uffa0\001\002" +
    "\000\024\007\uff9e\010\uff9e\014\uff9e\021\216\022\220\044" +
    "\uff9e\045\uff9e\054\215\055\217\001\002\000\014\007\uffaf" +
    "\010\uffaf\014\uffaf\044\uffaf\045\uffaf\001\002\000\014\007" +
    "\uffa5\010\uffa5\014\uffa5\044\uffa5\045\uffa5\001\002\000\014" +
    "\007\uffa9\010\uffa9\014\uffa9\044\uffa9\045\uffa9\001\002\000" +
    "\014\007\uffa6\010\uffa6\014\uffa6\044\uffa6\045\uffa6\001\002" +
    "\000\012\021\224\023\223\054\222\055\225\001\002\000" +
    "\004\055\234\001\002\000\004\021\231\001\002\000\014" +
    "\007\uffa2\010\uffa2\014\uffa2\044\uffa2\045\uffa2\001\002\000" +
    "\004\023\226\001\002\000\004\037\227\001\002\000\004" +
    "\023\230\001\002\000\014\007\uffa7\010\uffa7\014\uffa7\044" +
    "\uffa7\045\uffa7\001\002\000\004\037\232\001\002\000\004" +
    "\022\233\001\002\000\014\007\uffa3\010\uffa3\014\uffa3\044" +
    "\uffa3\045\uffa3\001\002\000\004\037\235\001\002\000\004" +
    "\055\236\001\002\000\014\007\uffad\010\uffad\014\uffad\044" +
    "\uffad\045\uffad\001\002\000\004\055\245\001\002\000\024" +
    "\007\uff9b\010\uff9b\014\uff9b\021\243\022\244\023\242\044" +
    "\uff9b\045\uff9b\054\241\001\002\000\014\007\uffb0\010\uffb0" +
    "\014\uffb0\044\uffb0\045\uffb0\001\002\000\014\007\uffac\010" +
    "\uffac\014\uffac\044\uffac\045\uffac\001\002\000\014\007\uffaa" +
    "\010\uffaa\014\uffaa\044\uffaa\045\uffaa\001\002\000\014\007" +
    "\uffab\010\uffab\014\uffab\044\uffab\045\uffab\001\002\000\014" +
    "\007\uff9a\010\uff9a\014\uff9a\044\uff9a\045\uff9a\001\002\000" +
    "\004\015\247\001\002\000\004\023\250\001\002\000\004" +
    "\005\251\001\002\000\004\010\252\001\002\000\022\005" +
    "\uff93\006\uff93\033\uff93\046\uff93\047\uff93\050\uff93\051\uff93" +
    "\052\uff93\001\002\000\004\015\254\001\002\000\004\054" +
    "\255\001\002\000\004\005\256\001\002\000\004\010\257" +
    "\001\002\000\022\005\uff91\006\uff91\033\uff91\046\uff91\047" +
    "\uff91\050\uff91\051\uff91\052\uff91\001\002\000\014\007\uff9f" +
    "\010\uff9f\014\uff9f\044\uff9f\045\uff9f\001\002\000\014\007" +
    "\uff9d\010\uff9d\014\uff9d\044\uff9d\045\uff9d\001\002\000\014" +
    "\007\uff9c\010\uff9c\014\uff9c\044\uff9c\045\uff9c\001\002\000" +
    "\022\005\uffda\006\uffda\033\uffda\046\uffda\047\uffda\050\uffda" +
    "\051\uffda\052\uffda\001\002\000\006\002\uffeb\006\uffeb\001" +
    "\002\000\004\015\266\001\002\000\004\012\267\001\002" +
    "\000\014\020\132\023\127\024\130\054\125\055\131\001" +
    "\002\000\006\013\273\014\272\001\002\000\010\007\uffc3" +
    "\010\uffc3\014\uffc3\001\002\000\014\020\132\023\127\024" +
    "\130\054\125\055\131\001\002\000\012\007\uffc0\010\uffc0" +
    "\013\uffc0\014\uffc0\001\002\000\012\007\uffc1\010\uffc1\013" +
    "\uffc1\014\uffc1\001\002\000\006\015\300\054\276\001\002" +
    "\000\006\010\uffd2\014\uffd2\001\002\000\006\010\302\014" +
    "\301\001\002\000\016\021\uffcf\022\uffcf\023\uffcf\037\uffcf" +
    "\054\uffcf\055\uffcf\001\002\000\004\054\303\001\002\000" +
    "\010\007\uffc8\010\uffc8\014\uffc8\001\002\000\006\010\uffd3" +
    "\014\uffd3\001\002\000\006\015\306\054\276\001\002\000" +
    "\006\010\310\014\301\001\002\000\004\024\307\001\002" +
    "\000\010\007\uffc4\010\uffc4\014\uffc4\001\002\000\010\007" +
    "\uffc7\010\uffc7\014\uffc7\001\002\000\006\015\313\054\276" +
    "\001\002\000\006\010\315\014\301\001\002\000\004\055" +
    "\314\001\002\000\010\007\uffc6\010\uffc6\014\uffc6\001\002" +
    "\000\010\007\uffc9\010\uffc9\014\uffc9\001\002\000\014\046" +
    "\021\047\023\050\022\051\024\052\016\001\002\000\004" +
    "\007\uffea\001\002\000\010\007\uffc5\010\uffc5\014\uffc5\001" +
    "\002\000\012\007\uffcd\010\uffcd\014\uffcd\037\221\001\002" +
    "\000\012\007\uffce\010\uffce\014\uffce\037\204\001\002\000" +
    "\010\006\325\011\073\037\074\001\002\000\010\007\uffcc" +
    "\010\uffcc\014\uffcc\001\002\000\006\007\327\054\326\001" +
    "\002\000\006\010\333\014\332\001\002\000\010\007\uffca" +
    "\010\uffca\014\uffca\001\002\000\004\007\331\001\002\000" +
    "\010\007\uffcb\010\uffcb\014\uffcb\001\002\000\004\054\326" +
    "\001\002\000\004\007\uffd0\001\002\000\004\007\uffd1\001" +
    "\002\000\004\015\336\001\002\000\004\012\337\001\002" +
    "\000\016\012\342\020\132\023\127\024\130\054\125\055" +
    "\131\001\002\000\006\013\uffbc\014\347\001\002\000\004" +
    "\013\346\001\002\000\014\020\132\023\127\024\130\054" +
    "\125\055\131\001\002\000\006\013\uffbf\014\344\001\002" +
    "\000\016\012\342\020\132\023\127\024\130\054\125\055" +
    "\131\001\002\000\004\013\uffbe\001\002\000\010\007\uffc2" +
    "\010\uffc2\014\uffc2\001\002\000\016\012\342\020\132\023" +
    "\127\024\130\054\125\055\131\001\002\000\004\013\uffbd" +
    "\001\002\000\004\002\ufff8\001\002\000\004\007\353\001" +
    "\002\000\004\006\354\001\002\000\004\036\355\001\002" +
    "\000\004\015\356\001\002\000\020\003\047\006\052\046" +
    "\021\047\023\050\022\051\024\052\016\001\002\000\022" +
    "\005\360\006\052\033\121\046\021\047\023\050\022\051" +
    "\024\052\016\001\002\000\006\002\ufff6\006\ufff6\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\356\000\012\002\006\020\007\025\004\027\005\001" +
    "\001\000\006\040\351\041\014\001\001\000\006\020\013" +
    "\027\350\001\001\000\006\020\007\025\012\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\041\014\001\001\000\004\020\013\001\001\000\002\001" +
    "\001\000\010\014\017\021\024\033\016\001\001\000\002" +
    "\001\001\000\010\012\063\023\323\034\317\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\022\034\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\003\044\004\045\005\050\013\042\014\047" +
    "\016\040\024\041\026\043\033\016\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\003\116\004\117\005\121\014" +
    "\122\016\112\024\113\026\114\033\016\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\012\063" +
    "\023\062\043\054\044\053\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\015\066\001\001\000\004" +
    "\012\103\001\001\000\004\042\067\001\001\000\002\001" +
    "\001\000\004\012\070\001\001\000\004\015\102\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\003\044\004" +
    "\045\005\050\013\111\014\047\016\040\024\041\026\043" +
    "\033\016\001\001\000\022\003\116\004\117\005\121\014" +
    "\122\016\112\024\113\026\114\033\016\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\006\125" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\003\044\004\045\005\050\013\134" +
    "\014\047\016\040\024\041\026\043\033\016\001\001\000" +
    "\022\003\116\004\117\005\121\014\122\016\112\024\113" +
    "\026\114\033\016\001\001\000\002\001\001\000\012\012" +
    "\063\023\062\043\054\044\053\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\003\044\004\045\005\050\013" +
    "\142\014\047\016\040\024\041\026\043\033\016\001\001" +
    "\000\022\003\116\004\117\005\121\014\122\016\112\024" +
    "\113\026\114\033\016\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\017\152\001\001\000\006\012\063\023\155" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\003\044" +
    "\004\045\005\050\013\160\014\047\016\040\024\041\026" +
    "\043\033\016\001\001\000\024\003\116\004\117\005\121" +
    "\014\122\016\112\017\161\024\113\026\114\033\016\001" +
    "\001\000\002\001\001\000\012\012\063\023\163\043\054" +
    "\044\053\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\003\044\004\045\005\050\013\167" +
    "\014\047\016\040\024\041\026\043\033\016\001\001\000" +
    "\022\003\116\004\117\005\121\014\122\016\112\024\113" +
    "\026\114\033\016\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\003\044\004\045\005\050\013\201\014\047\016\040" +
    "\024\041\026\043\033\016\001\001\000\022\003\116\004" +
    "\117\005\121\014\122\016\112\024\113\026\114\033\016" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\006\267\007\270\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\006\267\007\273\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\031\276\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\031\304\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\031\311\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\014\017\021\316\033\016\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\032\327\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\032\333\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\006\337\010\340\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\006\267\007\342" +
    "\001\001\000\002\001\001\000\006\006\337\010\344\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\006\337" +
    "\010\347\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\003\044\004\045\005\050\013\356\014" +
    "\047\016\040\024\041\026\043\033\016\001\001\000\022" +
    "\003\116\004\117\005\121\014\122\016\112\024\113\026" +
    "\114\033\016\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    /**
     * Método al que se llama automáticamente ante algún error sintactico.
    **/ 
    public void syntax_error(Symbol s){
        this.s = s;
        System.out.println("Error Sintáctico recuperable en la Línea " + (s.right) +
        " Columna "+s.left+ ". No se esperaba este componente: " +s.value+".");
    }

    /**
     * Método al que se llama automáticamente ante algún error sintáctico 
     * en el que ya no es posible una recuperación de errores.
     **/ 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error síntactico irrecuperable en la Línea " + 
        (s.right)+ " Columna "+s.left+". Componente " + s.value + 
        " no reconocido."); 
    }
    public Symbol getS(){
        return this.s;
    }
    //Guardar los errores encontrados
    private String ERRORES = "";
    public void addError(String error){
        this.ERRORES += error;
    }
    public String getERRORES(){
        return this.ERRORES;
    }

    //Se vino el arbolito papa
    DefaultMutableTreeNode sintaxTree;
    DefaultTreeModel sintaxTreeModel;
    DefaultMutableTreeNode nodoActual;

    public DefaultTreeModel createTreeSintax(String name){
        this.sintaxTree = new DefaultMutableTreeNode(name);
        this.sintaxTreeModel = new DefaultTreeModel(sintaxTree);
        this.nodoActual = this.sintaxTree;
        return sintaxTreeModel;
    }
    
    public DefaultMutableTreeNode getTreeSintax(){
        return this.sintaxTree;
    }
    
    public DefaultTreeModel getTreeSintaxModel(){
        return this.sintaxTreeModel;
    }

     public DefaultMutableTreeNode createNodo(String name){
        return new DefaultMutableTreeNode(name);
    }
    
    public void agregarNodo(DefaultMutableTreeNode nodo){
        this.nodoActual.add(nodo);
    }
    
    public void setNodoActual(DefaultMutableTreeNode nodo){
        this.nodoActual = nodo;
    }

    public DefaultMutableTreeNode getNodoActual(){
        return this.nodoActual;
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // N_OPERACIONAL ::= ERROR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_OPERACIONAL",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // N_OPERACIONAL ::= BACK_SLASH 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_OPERACIONAL",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // N_OPERACIONAL ::= RETURN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_OPERACIONAL",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // N_OPERACIONAL ::= ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_OPERACIONAL",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // N_OPERACIONAL ::= MOD 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_OPERACIONAL",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // N_CIN ::= OPEN_PARENTESIS NT$4 CIN COLON ID CLOSE_BLOCK PYC 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		parser.agregarNodo(parser.createNodo("PYC"));
         parser.setNodoActual((DefaultMutableTreeNode)parser.getNodoActual().getParent());
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_CIN",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // NT$4 ::= 
            {
              Object RESULT =null;
parser.agregarNodo(parser.createNodo("N_CIN"));
          parser.setNodoActual((DefaultMutableTreeNode)parser.getNodoActual().getLastChild());
            parser.agregarNodo(parser.createNodo("OPEN_PARENTESIS"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$4",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // N_PRINT ::= OPEN_PARENTESIS NT$3 PRINT COLON STRING CLOSE_BLOCK PYC 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		parser.agregarNodo(parser.createNodo("PYC"));
         parser.setNodoActual((DefaultMutableTreeNode)parser.getNodoActual().getParent());
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_PRINT",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // NT$3 ::= 
            {
              Object RESULT =null;
parser.agregarNodo(parser.createNodo("N_PRINT"));
          parser.setNodoActual((DefaultMutableTreeNode)parser.getNodoActual().getLastChild());
            parser.agregarNodo(parser.createNodo("OPEN_PARENTESIS"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$3",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // N_AND_OR ::= 
            {
              Object RESULT =null;
		parser.setNodoActual((DefaultMutableTreeNode)parser.getNodoActual().getParent());
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_AND_OR",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // N_AND_OR ::= CON_OR NT$2 N_SENTENCIA_BOOLEANA N_AND_OR 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		 parser.setNodoActual((DefaultMutableTreeNode)parser.getNodoActual().getParent());
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_AND_OR",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // NT$2 ::= 
            {
              Object RESULT =null;
parser.agregarNodo(parser.createNodo("CON_OR"));
          parser.setNodoActual((DefaultMutableTreeNode)parser.getNodoActual().getLastChild());
            parser.agregarNodo(parser.createNodo("N_SENTENCIA_BOOLEANA"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$2",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // N_AND_OR ::= CON_AND N_SENTENCIA_BOOLEANA 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
            DefaultMutableTreeNode nodo = parser.createNodo("N_AND_OR");
                    nodo.add((parser.createNodo(e1+"")));
                    nodo.add((DefaultMutableTreeNode)e2);
            RESULT = nodo;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_AND_OR",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // N_SENTENCIA_BOOLEANA ::= ID BETWEEN ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // N_SENTENCIA_BOOLEANA ::= NUMBER BETWEEN NUMBER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // N_SENTENCIA_BOOLEANA ::= NUMBER OP_REL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // N_SENTENCIA_BOOLEANA ::= OP_REL NUMBER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // N_SENTENCIA_BOOLEANA ::= OP_REL STRING 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // N_SENTENCIA_BOOLEANA ::= STRING OP_REL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // N_SENTENCIA_BOOLEANA ::= OP_REL ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // N_SENTENCIA_BOOLEANA ::= FALSE OP_REL TRUE ID OP_REL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // N_SENTENCIA_BOOLEANA ::= FALSE OP_REL FALSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // N_SENTENCIA_BOOLEANA ::= TRUE OP_REL TRUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // N_SENTENCIA_BOOLEANA ::= TRUE OP_REL STRING TRUE OP_REL FALSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // N_SENTENCIA_BOOLEANA ::= FALSE OP_REL STRING 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // N_SENTENCIA_BOOLEANA ::= STRING OP_REL TRUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // N_SENTENCIA_BOOLEANA ::= STRING OP_REL FALSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // N_SENTENCIA_BOOLEANA ::= TRUE OP_REL NUMBER STRING OP_REL STRING 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // N_SENTENCIA_BOOLEANA ::= FALSE OP_REL NUMBER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // N_SENTENCIA_BOOLEANA ::= STRING OP_REL NUMBER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // N_SENTENCIA_BOOLEANA ::= NUMBER OP_REL TRUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // N_SENTENCIA_BOOLEANA ::= NUMBER OP_REL FALSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // N_SENTENCIA_BOOLEANA ::= NUMBER OP_REL STRING 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // N_SENTENCIA_BOOLEANA ::= TRUE OP_REL ID NUMBER OP_REL NUMBER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // N_SENTENCIA_BOOLEANA ::= FALSE OP_REL ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // N_SENTENCIA_BOOLEANA ::= STRING OP_REL ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // N_SENTENCIA_BOOLEANA ::= NUMBER OP_REL ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // N_SENTENCIA_BOOLEANA ::= ID OP_REL TRUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // N_SENTENCIA_BOOLEANA ::= ID OP_REL FALSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // N_SENTENCIA_BOOLEANA ::= ID OP_REL STRING 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // N_SENTENCIA_BOOLEANA ::= ID OP_REL NUMBER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // N_SENTENCIA_BOOLEANA ::= ID OP_REL ID 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		String e3 = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
            DefaultMutableTreeNode nodo = parser.createNodo("N_SENTENCIA_BOOLEANA");
                nodo.add(parser.createNodo(e1+""));
                nodo.add(parser.createNodo(e2+""));
                nodo.add(parser.createNodo(e3+""));
            RESULT = nodo;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // N_SENTENCIA_BOOLEANA_ANIDADA ::= N_SENTENCIA_BOOLEANA N_AND_OR 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
            DefaultMutableTreeNode nodo = parser.createNodo("N_SENTENCIA_BOOLEANA_ANIDADA");
                    nodo.add((DefaultMutableTreeNode)e1);
                    nodo.add((DefaultMutableTreeNode)e2);
                    
            RESULT = nodo;
            System.out.println("Nodo desde Boolean: " + RESULT);
//                    parser.setNodoActual((DefaultMutableTreeNode)parser.getNodoActual().getLastChild());
//                    parser.agregarNodo(parser.createNodo(e1+""));
//                    parser.agregarNodo(parser.createNodo(e2+""));
//                    parser.setNodoActual((DefaultMutableTreeNode)parser.getNodoActual().getParent());
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA_ANIDADA",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // N_TIPO_VARIABLE ::= CHAR_ELEMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_TIPO_VARIABLE",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // N_TIPO_VARIABLE ::= NULL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_TIPO_VARIABLE",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // N_TIPO_VARIABLE ::= STRING 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_TIPO_VARIABLE",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // N_TIPO_VARIABLE ::= ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_TIPO_VARIABLE",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // N_TIPO_VARIABLE ::= NUMBER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_TIPO_VARIABLE",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // N_MATRIZ ::= N_TIPO_VARIABLE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_MATRIZ",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // N_MATRIZ ::= N_TIPO_VARIABLE COMA N_MATRIZ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_MATRIZ",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // N_MATRIZ ::= OPEN_SQR_BRACKET N_ARREGLO COMA N_MATRIZ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_MATRIZ",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // N_MATRIZ ::= OPEN_SQR_BRACKET N_ARREGLO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_MATRIZ",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // N_ARREGLO ::= N_TIPO_VARIABLE CLOSE_SQR_BRACKET 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_ARREGLO",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // N_ARREGLO ::= N_TIPO_VARIABLE COMA N_ARREGLO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_ARREGLO",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // N_DECLARACION ::= MATRIX ID COLON OPEN_SQR_BRACKET N_MATRIZ CLOSE_SQR_BRACKET 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_DECLARACION",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // N_DECLARACION ::= ARRAY ID COLON OPEN_SQR_BRACKET N_ARREGLO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_DECLARACION",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // N_DECLARACION ::= CHAR ID COLON CHAR_ELEMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_DECLARACION",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // N_DECLARACION ::= N_BOOLEAN_ID N_BOOLEAN_VALUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_DECLARACION",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // N_DECLARACION ::= INTENGER ID COLON NUMBER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_DECLARACION",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // N_DECLARACION ::= CHAR ID N_DECLARACION_ID PYC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_DECLARACION",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // N_DECLARACION ::= BOOLEAN ID N_DECLARACION_ID PYC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_DECLARACION",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // N_DECLARACION ::= INTENGER ID N_DECLARACION_ID PYC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_DECLARACION",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // N_BOOLEAN_VALUE ::= ID OPEN_PARENTESIS CLOSE_PARENTESIS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_BOOLEAN_VALUE",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // N_BOOLEAN_VALUE ::= ID OPEN_PARENTESIS N_ARGUMENTOS CLOSE_PARENTESIS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_BOOLEAN_VALUE",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // N_BOOLEAN_VALUE ::= N_SENTENCIA_BOOLEANA_ANIDADA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_BOOLEAN_VALUE",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // N_BOOLEAN_VALUE ::= TRUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_BOOLEAN_VALUE",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // N_BOOLEAN_VALUE ::= FALSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_BOOLEAN_VALUE",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // N_BOOLEAN_ID ::= BOOLEAN ID COLON 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_BOOLEAN_ID",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // N_ARGUMENTOS ::= ID PYC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_ARGUMENTOS",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // N_ARGUMENTOS ::= ID COMA N_ARGUMENTOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_ARGUMENTOS",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // N_DECLARACION_ID ::= ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_DECLARACION_ID",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // N_DECLARACION_ID ::= N_DECLARACION_ID COMA ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_DECLARACION_ID",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // N_SENTENCIA ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        String report = "Syntax error in line " + parser.getS().right + " Column " + parser.getS().left + ". No se esperaba este componente: " +parser.getS().value;
        parser.addError(report + "\n");
        parser.report_error(report,e); 


              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // N_SENTENCIA ::= N_SENTENCIA RETURN N_TIPO_VARIABLE PYC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // N_SENTENCIA ::= N_CIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // N_SENTENCIA ::= N_SENTENCIA N_CIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // N_SENTENCIA ::= N_PRINT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // N_SENTENCIA ::= N_SENTENCIA N_PRINT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // N_SENTENCIA ::= N_DECLARACION PYC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // N_SENTENCIA ::= N_SENTENCIA N_DECLARACION PYC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // N_SENTENCIA ::= N_SWITCH 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // N_SENTENCIA ::= N_SENTENCIA N_SWITCH 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // N_SENTENCIA ::= N_IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // N_SENTENCIA ::= N_SENTENCIA N_IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // N_SENTENCIA ::= N_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // N_SENTENCIA ::= N_SENTENCIA N_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // N_SENTENCIA ::= N_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // N_SENTENCIA ::= N_SENTENCIA N_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // N_RETORNO_FUNCTION ::= MATRIX 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_RETORNO_FUNCTION",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // N_RETORNO_FUNCTION ::= ARRAY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_RETORNO_FUNCTION",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // N_RETORNO_FUNCTION ::= CHAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_RETORNO_FUNCTION",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // N_RETORNO_FUNCTION ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_RETORNO_FUNCTION",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // N_RETORNO_FUNCTION ::= INTENGER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_RETORNO_FUNCTION",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // N_PARAMETRO_FUNCTION ::= N_DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_PARAMETRO_FUNCTION",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // N_PARAMETRO_FUNCTION ::= N_DECLARACION COMA N_PARAMETRO_FUNCTION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_PARAMETRO_FUNCTION",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // N_FUNCTION ::= OPEN_PARENTESIS NT$1 N_PARAMETRO_FUNCTION CLOSE_PARENTESIS ID OPEN_PARENTESIS FUNCTION COLON N_RETORNO_FUNCTION N_SENTENCIA CLOSE_BLOCK 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).value;
		parser.agregarNodo(parser.createNodo("CLOSE_BLOCK"));
             parser.setNodoActual((DefaultMutableTreeNode)parser.getNodoActual().getParent());
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_FUNCTION",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // NT$1 ::= 
            {
              Object RESULT =null;
parser.agregarNodo(parser.createNodo("N_FUNCTION"));
          parser.setNodoActual((DefaultMutableTreeNode)parser.getNodoActual().getLastChild());
            parser.agregarNodo(parser.createNodo("OPEN_PARENTESIS"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$1",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // N_FUNCTIONS ::= N_FUNCTION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_FUNCTIONS",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // N_FUNCTIONS ::= N_FUNCTIONS N_FUNCTION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_FUNCTIONS",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // N_SWITCH_CASE ::= OPEN_PARENTESIS ELSE CLOSE_PARENTESIS COLON N_SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_SWITCH_CASE",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // N_SWITCH_CASE ::= OPEN_PARENTESIS N_SENTENCIA_BOOLEANA_ANIDADA CLOSE_PARENTESIS COLON N_SENTENCIA N_SWITCH_CASE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_SWITCH_CASE",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // N_SWITCH ::= OPEN_PARENTESIS ID CLOSE_PARENTESIS OPEN_PARENTESIS IF_SWITCH COLON N_SWITCH_CASE CLOSE_BLOCK 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_SWITCH",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // N_IF ::= OPEN_PARENTESIS N_SENTENCIA_BOOLEANA_ANIDADA CLOSE_PARENTESIS OPEN_PARENTESIS IF_SWITCH COLON N_SENTENCIA OPEN_PARENTESIS ELSE CLOSE_PARENTESIS COLON N_SENTENCIA CLOSE_BLOCK 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_IF",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // N_IF ::= OPEN_PARENTESIS N_SENTENCIA_BOOLEANA_ANIDADA CLOSE_PARENTESIS OPEN_PARENTESIS IF_SWITCH COLON N_SENTENCIA CLOSE_BLOCK 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_IF",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // N_FOR ::= OPEN_PARENTESIS ID COMA NUMBER TO NUMBER COMA INCREMENT CLOSE_PARENTESIS OPEN_PARENTESIS FOR COLON N_SENTENCIA CLOSE_BLOCK 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_FOR",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-13)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // N_WHILE ::= OPEN_PARENTESIS N_SENTENCIA_BOOLEANA_ANIDADA CLOSE_PARENTESIS OPEN_PARENTESIS WHILE COLON N_SENTENCIA CLOSE_BLOCK 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object e4 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int e5left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object e5 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int e6left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int e6right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object e6 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int e7left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int e7right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object e7 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int e8left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int e8right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e8 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		parser.agregarNodo(parser.createNodo("N_WHILE"));
            parser.setNodoActual((DefaultMutableTreeNode)parser.getNodoActual().getLastChild());
            parser.agregarNodo(parser.createNodo(e1+""));
            parser.agregarNodo((DefaultMutableTreeNode)e2);
            parser.agregarNodo(parser.createNodo(e3+""));
            parser.agregarNodo(parser.createNodo(e4+""));
            parser.agregarNodo(parser.createNodo(e5+""));
            parser.agregarNodo(parser.createNodo(e6+""));
            System.out.println("RESULT " + e7);
            //parser.agregarNodo((DefaultMutableTreeNode)e7);
            System.out.println("Gogogo2");
            parser.agregarNodo(parser.createNodo(e8+""));
            System.out.println("Gogogo3");
            parser.setNodoActual((DefaultMutableTreeNode)parser.getNodoActual().getParent());
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_WHILE",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // N_MAIN ::= OPEN_PARENTESIS NT$0 CLOSE_PARENTESIS OPEN_PARENTESIS MAIN COLON N_SENTENCIA CLOSE_BLOCK 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		parser.agregarNodo(parser.createNodo("CLOSE_BLOCK"));
                 parser.setNodoActual((DefaultMutableTreeNode)parser.getNodoActual().getParent());
            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_MAIN",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // NT$0 ::= 
            {
              Object RESULT =null;
parser.agregarNodo(parser.createNodo("MAIN"));
          parser.setNodoActual((DefaultMutableTreeNode)parser.getNodoActual().getLastChild());
            parser.agregarNodo(parser.createNodo("Open_Parentesis"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$0",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // N_INICIO ::= N_FUNCTIONS N_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // N_INICIO ::= N_MAIN N_FUNCTIONS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // N_INICIO ::= N_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // expr ::= NUMBER 
            {
              Integer RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 RESULT = n;      
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expr",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // expr ::= OPEN_PARENTESIS expr CLOSE_PARENTESIS 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 RESULT = e;      
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expr",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // expr ::= expr OP_MULTI_DIV expr 
            {
              Integer RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Integer e2 = (Integer)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 RESULT = e1*e2;  
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expr",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // expr ::= expr OP_SUM expr 
            {
              Integer RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Integer e2 = (Integer)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 RESULT = e1+e2;  
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expr",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // EXPR_LIST ::= expr PYC 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 System.out.println(e);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPR_LIST",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // EXPR_LIST ::= EXPR_LIST expr PYC 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 System.out.println(e);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPR_LIST",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= N_INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

