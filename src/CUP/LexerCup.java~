/* The following code was generated by JFlex 1.4.3 on 09-20-20 11:56 AM */

package CUP;
//Clase numeracion donde incluiremos los numeros de todos los tokens
import java_cup.runtime.Symbol;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 09-20-20 11:56 AM from the specification file
 * <tt>./src/CUP/LexerCup.flex</tt>
 */
public class LexerCup implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\53\1\30\1\27\1\0\1\30\1\26\16\53\4\0\1\30\1\0"+
    "\1\23\1\0\1\25\1\45\1\0\1\24\1\4\1\3\1\44\1\43"+
    "\1\6\1\36\1\5\1\44\1\54\11\55\1\2\1\0\1\42\1\41"+
    "\1\37\2\0\32\25\1\7\1\11\1\10\1\0\1\25\1\0\1\21"+
    "\1\47\1\50\1\46\1\17\1\20\1\25\1\34\1\31\2\25\1\12"+
    "\1\40\1\13\1\35\1\32\1\25\1\15\1\22\1\14\1\16\1\52"+
    "\1\33\1\51\2\25\1\0\1\1\2\0\41\53\2\0\4\25\4\0"+
    "\1\25\2\0\1\53\7\0\1\25\4\0\1\25\5\0\27\25\1\0"+
    "\37\25\1\0\u01ca\25\4\0\14\25\16\0\5\25\7\0\1\25\1\0"+
    "\1\25\21\0\160\53\5\25\1\0\2\25\2\0\4\25\10\0\1\25"+
    "\1\0\3\25\1\0\1\25\1\0\24\25\1\0\123\25\1\0\213\25"+
    "\1\0\5\53\2\0\236\25\11\0\46\25\2\0\1\25\7\0\47\25"+
    "\7\0\1\25\1\0\55\53\1\0\1\53\1\0\2\53\1\0\2\53"+
    "\1\0\1\53\10\0\33\25\5\0\3\25\15\0\5\53\6\0\1\25"+
    "\4\0\13\53\5\0\53\25\37\53\4\0\2\25\1\53\143\25\1\0"+
    "\1\25\10\53\1\0\6\53\2\25\2\53\1\0\4\53\2\25\12\53"+
    "\3\25\2\0\1\25\17\0\1\53\1\25\1\53\36\25\33\53\2\0"+
    "\131\25\13\53\1\25\16\0\12\53\41\25\11\53\2\25\4\0\1\25"+
    "\5\0\26\25\4\53\1\25\11\53\1\25\3\53\1\25\5\53\22\0"+
    "\31\25\3\53\104\0\1\25\1\0\13\25\67\0\33\53\1\0\4\53"+
    "\66\25\3\53\1\25\22\53\1\25\7\53\12\25\2\53\2\0\12\53"+
    "\1\0\7\25\1\0\7\25\1\0\3\53\1\0\10\25\2\0\2\25"+
    "\2\0\26\25\1\0\7\25\1\0\1\25\3\0\4\25\2\0\1\53"+
    "\1\25\7\53\2\0\2\53\2\0\3\53\1\25\10\0\1\53\4\0"+
    "\2\25\1\0\3\25\2\53\2\0\12\53\4\25\7\0\1\25\5\0"+
    "\3\53\1\0\6\25\4\0\2\25\2\0\26\25\1\0\7\25\1\0"+
    "\2\25\1\0\2\25\1\0\2\25\2\0\1\53\1\0\5\53\4\0"+
    "\2\53\2\0\3\53\3\0\1\53\7\0\4\25\1\0\1\25\7\0"+
    "\14\53\3\25\1\53\13\0\3\53\1\0\11\25\1\0\3\25\1\0"+
    "\26\25\1\0\7\25\1\0\2\25\1\0\5\25\2\0\1\53\1\25"+
    "\10\53\1\0\3\53\1\0\3\53\2\0\1\25\17\0\2\25\2\53"+
    "\2\0\12\53\1\0\1\25\17\0\3\53\1\0\10\25\2\0\2\25"+
    "\2\0\26\25\1\0\7\25\1\0\2\25\1\0\5\25\2\0\1\53"+
    "\1\25\7\53\2\0\2\53\2\0\3\53\10\0\2\53\4\0\2\25"+
    "\1\0\3\25\2\53\2\0\12\53\1\0\1\25\20\0\1\53\1\25"+
    "\1\0\6\25\3\0\3\25\1\0\4\25\3\0\2\25\1\0\1\25"+
    "\1\0\2\25\3\0\2\25\3\0\3\25\3\0\14\25\4\0\5\53"+
    "\3\0\3\53\1\0\4\53\2\0\1\25\6\0\1\53\16\0\12\53"+
    "\11\0\1\25\7\0\3\53\1\0\10\25\1\0\3\25\1\0\27\25"+
    "\1\0\12\25\1\0\5\25\3\0\1\25\7\53\1\0\3\53\1\0"+
    "\4\53\7\0\2\53\1\0\2\25\6\0\2\25\2\53\2\0\12\53"+
    "\22\0\2\53\1\0\10\25\1\0\3\25\1\0\27\25\1\0\12\25"+
    "\1\0\5\25\2\0\1\53\1\25\7\53\1\0\3\53\1\0\4\53"+
    "\7\0\2\53\7\0\1\25\1\0\2\25\2\53\2\0\12\53\1\0"+
    "\2\25\17\0\2\53\1\0\10\25\1\0\3\25\1\0\51\25\2\0"+
    "\1\25\7\53\1\0\3\53\1\0\4\53\1\25\10\0\1\53\10\0"+
    "\2\25\2\53\2\0\12\53\12\0\6\25\2\0\2\53\1\0\22\25"+
    "\3\0\30\25\1\0\11\25\1\0\1\25\2\0\7\25\3\0\1\53"+
    "\4\0\6\53\1\0\1\53\1\0\10\53\22\0\2\53\15\0\60\25"+
    "\1\53\2\25\7\53\4\0\10\25\10\53\1\0\12\53\47\0\2\25"+
    "\1\0\1\25\2\0\2\25\1\0\1\25\2\0\1\25\6\0\4\25"+
    "\1\0\7\25\1\0\3\25\1\0\1\25\1\0\1\25\2\0\2\25"+
    "\1\0\4\25\1\53\2\25\6\53\1\0\2\53\1\25\2\0\5\25"+
    "\1\0\1\25\1\0\6\53\2\0\12\53\2\0\4\25\40\0\1\25"+
    "\27\0\2\53\6\0\12\53\13\0\1\53\1\0\1\53\1\0\1\53"+
    "\4\0\2\53\10\25\1\0\44\25\4\0\24\53\1\0\2\53\5\25"+
    "\13\53\1\0\44\53\11\0\1\53\71\0\53\25\24\53\1\25\12\53"+
    "\6\0\6\25\4\53\4\25\3\53\1\25\3\53\2\25\7\53\3\25"+
    "\4\53\15\25\14\53\1\25\17\53\2\0\46\25\1\0\1\25\5\0"+
    "\1\25\2\0\53\25\1\0\u014d\25\1\0\4\25\2\0\7\25\1\0"+
    "\1\25\1\0\4\25\2\0\51\25\1\0\4\25\2\0\41\25\1\0"+
    "\4\25\2\0\7\25\1\0\1\25\1\0\4\25\2\0\17\25\1\0"+
    "\71\25\1\0\4\25\2\0\103\25\2\0\3\53\40\0\20\25\20\0"+
    "\125\25\14\0\u026c\25\2\0\21\25\1\0\32\25\5\0\113\25\3\0"+
    "\3\25\17\0\15\25\1\0\4\25\3\53\13\0\22\25\3\53\13\0"+
    "\22\25\2\53\14\0\15\25\1\0\3\25\1\0\2\53\14\0\64\25"+
    "\40\53\3\0\1\25\3\0\2\25\1\53\2\0\12\53\41\0\3\53"+
    "\2\0\12\53\6\0\130\25\10\0\51\25\1\53\1\25\5\0\106\25"+
    "\12\0\35\25\3\0\14\53\4\0\14\53\12\0\12\53\36\25\2\0"+
    "\5\25\13\0\54\25\4\0\21\53\7\25\2\53\6\0\12\53\46\0"+
    "\27\25\5\53\4\0\65\25\12\53\1\0\35\53\2\0\13\53\6\0"+
    "\12\53\15\0\1\25\130\0\5\53\57\25\21\53\7\25\4\0\12\53"+
    "\21\0\11\53\14\0\3\53\36\25\15\53\2\25\12\53\54\25\16\53"+
    "\14\0\44\25\24\53\10\0\12\53\3\0\3\25\12\53\44\25\122\0"+
    "\3\53\1\0\25\53\4\25\1\53\4\25\3\53\2\25\11\0\300\25"+
    "\47\53\25\0\4\53\u0116\25\2\0\6\25\2\0\46\25\2\0\6\25"+
    "\2\0\10\25\1\0\1\25\1\0\1\25\1\0\1\25\1\0\37\25"+
    "\2\0\65\25\1\0\7\25\1\0\1\25\3\0\3\25\1\0\7\25"+
    "\3\0\4\25\2\0\6\25\4\0\15\25\5\0\3\25\1\0\7\25"+
    "\16\0\5\53\32\0\5\53\20\0\2\25\23\0\1\25\13\0\5\53"+
    "\5\0\6\53\1\0\1\25\15\0\1\25\20\0\15\25\3\0\33\25"+
    "\25\0\15\53\4\0\1\53\3\0\14\53\21\0\1\25\4\0\1\25"+
    "\2\0\12\25\1\0\1\25\3\0\5\25\6\0\1\25\1\0\1\25"+
    "\1\0\1\25\1\0\4\25\1\0\13\25\2\0\4\25\5\0\5\25"+
    "\4\0\1\25\21\0\51\25\u0a77\0\57\25\1\0\57\25\1\0\205\25"+
    "\6\0\4\25\3\53\2\25\14\0\46\25\1\0\1\25\5\0\1\25"+
    "\2\0\70\25\7\0\1\25\17\0\1\53\27\25\11\0\7\25\1\0"+
    "\7\25\1\0\7\25\1\0\7\25\1\0\7\25\1\0\7\25\1\0"+
    "\7\25\1\0\7\25\1\0\40\53\57\0\1\25\u01d5\0\3\25\31\0"+
    "\11\25\6\53\1\0\5\25\2\0\5\25\4\0\126\25\2\0\2\53"+
    "\2\0\3\25\1\0\132\25\1\0\4\25\5\0\51\25\3\0\136\25"+
    "\21\0\33\25\65\0\20\25\u0200\0\u19b6\25\112\0\u51cd\25\63\0\u048d\25"+
    "\103\0\56\25\2\0\u010d\25\3\0\20\25\12\53\2\25\24\0\57\25"+
    "\1\53\4\0\12\53\1\0\31\25\7\0\1\53\120\25\2\53\45\0"+
    "\11\25\2\0\147\25\2\0\4\25\1\0\4\25\14\0\13\25\115\0"+
    "\12\25\1\53\3\25\1\53\4\25\1\53\27\25\5\53\20\0\1\25"+
    "\7\0\64\25\14\0\2\53\62\25\21\53\13\0\12\53\6\0\22\53"+
    "\6\25\3\0\1\25\4\0\12\53\34\25\10\53\2\0\27\25\15\53"+
    "\14\0\35\25\3\0\4\53\57\25\16\53\16\0\1\25\12\53\46\0"+
    "\51\25\16\53\11\0\3\25\1\53\10\25\2\53\2\0\12\53\6\0"+
    "\27\25\3\0\1\25\1\53\4\0\60\25\1\53\1\25\3\53\2\25"+
    "\2\53\5\25\2\53\1\25\1\53\1\25\30\0\3\25\2\0\13\25"+
    "\5\53\2\0\3\25\2\53\12\0\6\25\2\0\6\25\2\0\6\25"+
    "\11\0\7\25\1\0\7\25\221\0\43\25\10\53\1\0\2\53\2\0"+
    "\12\53\6\0\u2ba4\25\14\0\27\25\4\0\61\25\u2104\0\u016e\25\2\0"+
    "\152\25\46\0\7\25\14\0\5\25\5\0\1\25\1\53\12\25\1\0"+
    "\15\25\1\0\5\25\1\0\1\25\1\0\2\25\1\0\2\25\1\0"+
    "\154\25\41\0\u016b\25\22\0\100\25\2\0\66\25\50\0\15\25\3\0"+
    "\20\53\20\0\7\53\14\0\2\25\30\0\3\25\31\0\1\25\6\0"+
    "\5\25\1\0\207\25\2\0\1\53\4\0\1\25\13\0\12\53\7\0"+
    "\32\25\4\0\1\25\1\0\32\25\13\0\131\25\3\0\6\25\2\0"+
    "\6\25\2\0\6\25\2\0\3\25\3\0\2\25\3\0\2\25\22\0"+
    "\3\53\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\2\1\1\2\1\3\1\4\1\1\1\5\1\6"+
    "\1\7\1\10\10\11\2\1\2\12\4\11\1\13\1\14"+
    "\1\11\1\14\1\13\1\15\1\16\3\11\2\17\1\0"+
    "\1\20\1\0\1\21\1\22\2\11\1\23\2\11\1\24"+
    "\4\11\1\0\1\25\1\0\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\23\4\11\1\34\1\35\1\36\1\11"+
    "\1\37\1\40\1\41\1\11\1\42\1\43\1\44\1\45"+
    "\1\46\1\11\1\47\1\50\1\51\1\11\1\52\1\53";

  private static int [] zzUnpackAction() {
    int [] result = new int[88];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\56\0\134\0\212\0\56\0\56\0\270\0\56"+
    "\0\56\0\56\0\56\0\346\0\u0114\0\u0142\0\u0170\0\u019e"+
    "\0\u01cc\0\u01fa\0\u0228\0\u0256\0\u0284\0\u02b2\0\56\0\u02e0"+
    "\0\u030e\0\u033c\0\u036a\0\u0398\0\u03c6\0\u03f4\0\56\0\u0422"+
    "\0\56\0\56\0\u0450\0\u047e\0\u04ac\0\56\0\u04da\0\134"+
    "\0\56\0\u0508\0\56\0\u019e\0\u0536\0\u0564\0\u019e\0\u0592"+
    "\0\u05c0\0\u019e\0\u05ee\0\u061c\0\u064a\0\u0678\0\u0256\0\56"+
    "\0\u06a6\0\u06d4\0\u019e\0\u019e\0\u019e\0\u019e\0\56\0\56"+
    "\0\u0702\0\u0730\0\u075e\0\u078c\0\u019e\0\56\0\u019e\0\u07ba"+
    "\0\u019e\0\u019e\0\u019e\0\u07e8\0\u019e\0\u019e\0\56\0\u019e"+
    "\0\u019e\0\u0816\0\u019e\0\u019e\0\u019e\0\u0844\0\u019e\0\u019e";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[88];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\20\1\24\1\25\1\20\1\26\2\27"+
    "\1\30\1\31\1\32\1\20\1\33\1\34\1\35\1\36"+
    "\1\37\1\35\1\40\1\41\1\42\1\20\1\43\1\44"+
    "\1\20\1\45\1\2\1\46\1\47\56\0\1\50\1\27"+
    "\54\50\3\0\1\51\57\0\1\52\1\53\61\0\1\20"+
    "\1\54\7\20\2\0\1\20\3\0\5\20\2\0\1\20"+
    "\5\0\10\20\12\0\1\55\10\20\2\0\1\20\3\0"+
    "\5\20\2\0\1\20\5\0\10\20\12\0\3\20\1\56"+
    "\5\20\2\0\1\20\3\0\4\20\1\57\2\0\1\20"+
    "\5\0\10\20\12\0\5\20\1\60\3\20\2\0\1\20"+
    "\3\0\5\20\2\0\1\20\5\0\10\20\12\0\11\20"+
    "\2\0\1\20\3\0\5\20\2\0\1\20\5\0\10\20"+
    "\12\0\1\61\10\20\2\0\1\20\3\0\5\20\2\0"+
    "\1\20\5\0\10\20\12\0\3\20\1\62\1\63\2\20"+
    "\1\64\1\20\2\0\1\20\3\0\5\20\2\0\1\20"+
    "\5\0\10\20\12\0\1\20\1\65\1\20\1\66\5\20"+
    "\2\0\1\20\3\0\5\20\2\0\1\20\5\0\10\20"+
    "\23\67\1\70\32\67\12\0\11\71\2\0\1\71\3\0"+
    "\5\71\2\0\1\71\5\0\5\71\32\0\1\27\40\0"+
    "\1\20\1\72\4\20\1\73\2\20\2\0\1\20\3\0"+
    "\5\20\2\0\1\20\5\0\10\20\12\0\11\20\2\0"+
    "\1\20\3\0\1\20\1\74\3\20\2\0\1\20\5\0"+
    "\10\20\12\0\11\20\2\0\1\20\3\0\3\20\1\75"+
    "\1\20\2\0\1\20\5\0\10\20\12\0\3\20\1\76"+
    "\5\20\2\0\1\20\3\0\5\20\2\0\1\20\5\0"+
    "\10\20\36\0\1\77\1\100\57\0\1\37\26\0\2\20"+
    "\1\101\4\20\1\102\1\20\2\0\1\20\3\0\5\20"+
    "\2\0\1\20\5\0\10\20\43\0\1\77\24\0\1\103"+
    "\10\20\2\0\1\20\3\0\5\20\2\0\1\20\5\0"+
    "\10\20\12\0\11\20\2\0\1\20\3\0\3\20\1\104"+
    "\1\20\2\0\1\20\5\0\10\20\12\0\11\20\2\0"+
    "\1\20\3\0\5\20\2\0\1\20\5\0\1\20\1\105"+
    "\6\20\54\0\2\47\5\0\1\106\62\0\1\107\10\20"+
    "\2\0\1\20\3\0\5\20\2\0\1\20\5\0\10\20"+
    "\12\0\4\20\1\110\4\20\2\0\1\20\3\0\5\20"+
    "\2\0\1\20\5\0\10\20\12\0\2\20\1\111\6\20"+
    "\2\0\1\20\3\0\5\20\2\0\1\20\5\0\10\20"+
    "\12\0\10\20\1\112\2\0\1\20\3\0\5\20\2\0"+
    "\1\20\5\0\10\20\12\0\1\20\1\113\7\20\2\0"+
    "\1\20\3\0\5\20\2\0\1\20\5\0\10\20\12\0"+
    "\1\114\10\20\2\0\1\20\3\0\5\20\2\0\1\20"+
    "\5\0\10\20\12\0\11\20\2\0\1\20\3\0\5\20"+
    "\2\0\1\20\5\0\1\115\7\20\12\0\3\20\1\116"+
    "\5\20\2\0\1\20\3\0\5\20\2\0\1\20\5\0"+
    "\10\20\24\0\1\117\43\0\2\20\1\120\6\20\2\0"+
    "\1\20\3\0\5\20\2\0\1\20\5\0\10\20\12\0"+
    "\11\20\2\0\1\20\3\0\5\20\2\0\1\20\5\0"+
    "\3\20\1\121\4\20\12\0\11\20\2\0\1\20\3\0"+
    "\1\122\4\20\2\0\1\20\5\0\10\20\12\0\1\20"+
    "\1\123\7\20\2\0\1\20\3\0\5\20\2\0\1\20"+
    "\5\0\10\20\12\0\3\20\1\124\5\20\2\0\1\20"+
    "\3\0\5\20\2\0\1\20\5\0\10\20\12\0\5\20"+
    "\1\125\3\20\2\0\1\20\3\0\5\20\2\0\1\20"+
    "\5\0\10\20\12\0\10\20\1\126\2\0\1\20\3\0"+
    "\5\20\2\0\1\20\5\0\10\20\12\0\1\20\1\127"+
    "\7\20\2\0\1\20\3\0\5\20\2\0\1\20\5\0"+
    "\10\20\12\0\5\20\1\130\3\20\2\0\1\20\3\0"+
    "\5\20\2\0\1\20\5\0\10\20";

  private static int [] zzUnpackTrans() {
    int [] result = new int[2162];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\2\11\1\1\4\11\13\1\1\11"+
    "\7\1\1\11\1\1\2\11\3\1\1\11\1\1\1\0"+
    "\1\11\1\0\1\11\13\1\1\0\1\11\1\0\5\1"+
    "\2\11\5\1\1\11\10\1\1\11\11\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[88];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    public Symbol symbol(int type, Object value){
        return new Symbol(type, yycolumn, yyline, value);
    };

    public Symbol symbol(int type){
        return new Symbol(type, yycolumn, yyline);
    };



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LexerCup(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public LexerCup(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2244) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 43: 
          { System.out.println("<FALSE," + yytext() + ">");
                            return new Symbol(sym.FALSE, yycolumn, yyline, yytext());
          }
        case 44: break;
        case 10: 
          { /* ignore */
          }
        case 45: break;
        case 5: 
          { System.out.println("<COMA," + yytext() + ">");
                            return new Symbol(sym.COMA, yycolumn, yyline, yytext());
          }
        case 46: break;
        case 24: 
          { System.out.println("<PRINT," + yytext() + ">");
                            return new Symbol(sym.PRINT, yycolumn, yyline, yytext());
          }
        case 47: break;
        case 28: 
          { System.out.println("<VARIABLE," + yytext() + ">");
                            return new Symbol(sym.VARIABLE, yycolumn, yyline, yytext());
          }
        case 48: break;
        case 30: 
          { System.out.println("<NULL," + yytext() + ">");
                            return new Symbol(sym.NULL, yycolumn, yyline, yytext());
          }
        case 49: break;
        case 8: 
          { System.out.println("<BACK_SLASH," + yytext() + ">");
                            return new Symbol(sym.BACK_SLASH, yycolumn, yyline, yytext());
          }
        case 50: break;
        case 32: 
          { System.out.println("<ELSE," + yytext() + ">");
                            return new Symbol(sym.ELSE, yycolumn, yyline, yytext());
          }
        case 51: break;
        case 26: 
          { System.out.println("<CON_OR," + yytext() + ">");
                            return new Symbol(sym.CON_OR, yycolumn, yyline, yytext());
          }
        case 52: break;
        case 34: 
          { System.out.println("<CON_AND," + yytext() + ">");
                            return new Symbol(sym.CON_AND, yycolumn, yyline, yytext());
          }
        case 53: break;
        case 22: 
          { System.out.println("<CIN," + yytext() + ">");
                            return new Symbol(sym.CIN, yycolumn, yyline, yytext());
          }
        case 54: break;
        case 16: 
          { System.out.println("<CLOSE_BLOCK," + yytext() + ">");
                            return new Symbol(sym.CLOSE_BLOCK, yycolumn, yyline, yytext());
          }
        case 55: break;
        case 18: 
          { System.out.println("<NEW_LINE," + yytext() + ">");
                            return new Symbol(sym.NEW_LINE, yycolumn, yyline, yytext());
          }
        case 56: break;
        case 27: 
          { System.out.println("<INCREMENT," + yytext() + ">");
                            return new Symbol(sym.INCREMENT, yycolumn, yyline, yytext());
          }
        case 57: break;
        case 33: 
          { System.out.println("<FUNCTION," + yytext() + ">");
                            return new Symbol(sym.FUNCTION, yycolumn, yyline, yytext());
          }
        case 58: break;
        case 36: 
          { System.out.println("<CHAR_ELEMENT," + yytext() + ">");
                            return new Symbol(sym.CHAR_ELEMENT, yycolumn, yyline, yytext());
          }
        case 59: break;
        case 1: 
          { return new Symbol(sym.ERROR, yycolumn, yyline, yytext());
          }
        case 60: break;
        case 14: 
          { System.out.println("<MOD," + yytext() + ">");
                            return new Symbol(sym.MOD, yycolumn, yyline, yytext());
          }
        case 61: break;
        case 4: 
          { System.out.println("<OPEN_PARENTESIS," + yytext() + ">");
                            return new Symbol(sym.OPEN_PARENTESIS, yycolumn, yyline, yytext());
          }
        case 62: break;
        case 15: 
          { System.out.println("<NUMBER," + yytext() + ">");
                            return new Symbol(sym.NUMBER, yycolumn, yyline, new Integer(Integer.parseInt(yytext())));
          }
        case 63: break;
        case 42: 
          { System.out.println("<MAIN," + yytext() + ">");
                            return new Symbol(sym.MAIN, yycolumn, yyline, yytext());
          }
        case 64: break;
        case 6: 
          { System.out.println("<OPEN_SQR_BRACKET," + yytext() + ">");
                            return new Symbol(sym.OPEN_SQR_BRACKET, yycolumn, yyline, yytext());
          }
        case 65: break;
        case 40: 
          { System.out.println("<CHAR," + yytext() + ">");
                            return new Symbol(sym.CHAR, yycolumn, yyline, yytext());
          }
        case 66: break;
        case 41: 
          { System.out.println("<TRUE," + yytext() + ">");
                            return new Symbol(sym.TRUE, yycolumn, yyline, yytext());
          }
        case 67: break;
        case 39: 
          { System.out.println("<BOOLEAN," + yytext() + ">");
                            return new Symbol(sym.BOOLEAN, yycolumn, yyline, yytext());
          }
        case 68: break;
        case 21: 
          { System.out.println("<STRING," + yytext() + ">");
                            return new Symbol(sym.STRING, yycolumn, yyline, yytext());
          }
        case 69: break;
        case 13: 
          { System.out.println("<OP_MULTI_DIV," + yytext() + ">");
                            return new Symbol(sym.OP_MULTI_DIV, yycolumn, yyline, yytext());
          }
        case 70: break;
        case 29: 
          { System.out.println("<BETWEEN," + yytext() + ">");
                            return new Symbol(sym.BETWEEN, yycolumn, yyline, yytext());
          }
        case 71: break;
        case 17: 
          { System.out.println("<PYC," + yytext() + ">");
                            return new Symbol(sym.PYC, yycolumn, yyline, yytext());
          }
        case 72: break;
        case 35: 
          { System.out.println("<ARRAY," + yytext() + ">");
                            return new Symbol(sym.ARRAY, yycolumn, yyline, yytext());
          }
        case 73: break;
        case 19: 
          { System.out.println("<TO," + yytext() + ">");
                            return new Symbol(sym.TO, yycolumn, yyline, yytext());
          }
        case 74: break;
        case 11: 
          { System.out.println("<OP_SUM," + yytext() + ">");
                            return new Symbol(sym.OP_SUM, yycolumn, yyline, yytext());
          }
        case 75: break;
        case 31: 
          { System.out.println("<RETURN," + yytext() + ">");
                            return new Symbol(sym.RETURN, yycolumn, yyline, yytext());
          }
        case 76: break;
        case 12: 
          { System.out.println("<OP_REL," + yytext() + ">");
                            return new Symbol(sym.OP_REL, yycolumn, yyline, yytext());
          }
        case 77: break;
        case 20: 
          { System.out.println("<FOR," + yytext() + ">");
                            return new Symbol(sym.FOR, yycolumn, yyline, yytext());
          }
        case 78: break;
        case 25: 
          { System.out.println("<WHILE," + yytext() + ">");
                            return new Symbol(sym.WHILE, yycolumn, yyline, yytext());
          }
        case 79: break;
        case 3: 
          { System.out.println("<CLOSE_PARENTESIS," + yytext() + ">");
                            return new Symbol(sym.CLOSE_PARENTESIS, yycolumn, yyline, yytext());
          }
        case 80: break;
        case 23: 
          { System.out.println("<IF_SWITCH," + yytext() + ">");
                            return new Symbol(sym.IF_SWITCH, yycolumn, yyline, yytext());
          }
        case 81: break;
        case 37: 
          { System.out.println("<INTENGER," + yytext() + ">");
                            return new Symbol(sym.INTENGER, yycolumn, yyline, yytext());
          }
        case 82: break;
        case 2: 
          { System.out.println("<COLON," + yytext() + ">");
                            return new Symbol(sym.COLON, yycolumn, yyline, yytext());
          }
        case 83: break;
        case 38: 
          { System.out.println("<MATRIX," + yytext() + ">");
                            return new Symbol(sym.MATRIX, yycolumn, yyline, yytext());
          }
        case 84: break;
        case 7: 
          { System.out.println("<CLOSE_SQR_BRACKET," + yytext() + ">");
                            return new Symbol(sym.CLOSE_SQR_BRACKET, yycolumn, yyline, yytext());
          }
        case 85: break;
        case 9: 
          { System.out.println("<ID," + yytext() + ">");
                            return new Symbol(sym.ID, yycolumn, yyline, yytext());
          }
        case 86: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
