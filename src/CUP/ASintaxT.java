
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Nov 08 18:25:35 CST 2020
//----------------------------------------------------

package CUP;

import java_cup.runtime.Symbol;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Nov 08 18:25:35 CST 2020
  */
public class ASintaxT extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public ASintaxT() {super();}

  /** Constructor which sets the default scanner. */
  public ASintaxT(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ASintaxT(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\351\000\002\002\004\000\002\002\003\000\002\002" +
    "\004\000\002\002\004\000\002\003\011\000\002\003\011" +
    "\000\002\003\004\000\002\003\010\000\002\004\004\000" +
    "\002\004\003\000\002\005\015\000\002\005\012\000\002" +
    "\005\011\000\002\005\014\000\002\005\007\000\002\005" +
    "\012\000\002\005\015\000\002\005\015\000\002\006\004" +
    "\000\002\006\005\000\002\007\006\000\002\007\004\000" +
    "\002\007\005\000\002\010\003\000\002\010\003\000\002" +
    "\010\003\000\002\010\004\000\002\010\004\000\002\010" +
    "\003\000\002\011\004\000\002\011\003\000\002\011\004" +
    "\000\002\011\003\000\002\011\004\000\002\011\003\000" +
    "\002\011\004\000\002\011\003\000\002\011\005\000\002" +
    "\011\004\000\002\011\004\000\002\011\003\000\002\011" +
    "\004\000\002\011\003\000\002\011\005\000\002\011\004" +
    "\000\002\012\012\000\002\012\011\000\002\013\021\000" +
    "\002\013\020\000\002\014\003\000\002\014\003\000\002" +
    "\014\003\000\002\015\013\000\002\015\012\000\002\016" +
    "\010\000\002\016\007\000\002\016\007\000\002\016\006" +
    "\000\002\016\002\000\002\017\012\000\002\020\010\000" +
    "\002\020\007\000\002\020\007\000\002\020\006\000\002" +
    "\020\007\000\002\020\010\000\002\022\006\000\002\022" +
    "\005\000\002\022\005\000\002\022\005\000\002\023\005" +
    "\000\002\023\003\000\002\023\005\000\002\024\004\000" +
    "\002\024\003\000\002\024\006\000\002\024\005\000\002" +
    "\024\005\000\002\024\005\000\002\026\004\000\002\026" +
    "\004\000\002\025\005\000\002\025\005\000\002\025\005" +
    "\000\002\025\005\000\002\025\005\000\002\025\005\000" +
    "\002\025\005\000\002\025\005\000\002\025\005\000\002" +
    "\025\005\000\002\025\005\000\002\025\005\000\002\025" +
    "\005\000\002\025\005\000\002\025\005\000\002\025\005" +
    "\000\002\025\005\000\002\025\005\000\002\025\005\000" +
    "\002\025\005\000\002\025\005\000\002\025\005\000\002" +
    "\025\005\000\002\025\005\000\002\025\005\000\002\025" +
    "\004\000\002\025\004\000\002\021\004\000\002\021\004" +
    "\000\002\021\004\000\002\021\004\000\002\021\004\000" +
    "\002\021\004\000\002\021\004\000\002\021\004\000\002" +
    "\021\005\000\002\021\005\000\002\021\005\000\002\021" +
    "\005\000\002\021\003\000\002\021\003\000\002\021\003" +
    "\000\002\021\003\000\002\021\003\000\002\027\005\000" +
    "\002\027\005\000\002\027\004\000\002\027\004\000\002" +
    "\027\004\000\002\027\006\000\002\027\004\000\002\027" +
    "\006\000\002\027\010\000\002\027\010\000\002\027\010" +
    "\000\002\027\010\000\002\027\013\000\002\027\013\000" +
    "\002\027\013\000\002\027\011\000\002\027\005\000\002" +
    "\027\006\000\002\027\005\000\002\027\005\000\002\027" +
    "\007\000\002\027\005\000\002\027\005\000\002\027\006" +
    "\000\002\027\007\000\002\027\005\000\002\027\005\000" +
    "\002\027\006\000\002\027\006\000\002\027\005\000\002" +
    "\027\005\000\002\030\005\000\002\030\003\000\002\030" +
    "\005\000\002\031\003\000\002\031\003\000\002\031\003" +
    "\000\002\031\003\000\002\031\003\000\002\031\003\000" +
    "\002\031\003\000\002\031\002\000\002\033\003\000\002" +
    "\033\003\000\002\033\003\000\002\033\003\000\002\032" +
    "\004\000\002\032\006\000\002\032\005\000\002\032\003" +
    "\000\002\032\003\000\002\034\005\000\002\034\004\000" +
    "\002\034\004\000\002\035\005\000\002\035\005\000\002" +
    "\035\005\000\002\036\003\000\002\036\003\000\002\036" +
    "\003\000\002\036\006\000\002\036\005\000\002\036\003" +
    "\000\002\037\005\000\002\037\004\000\002\037\004\000" +
    "\002\037\005\000\002\040\005\000\002\040\011\000\002" +
    "\040\011\000\002\040\011\000\002\040\011\000\002\040" +
    "\011\000\002\040\007\000\002\041\005\000\002\041\004" +
    "\000\002\041\005\000\002\041\004\000\002\041\004\000" +
    "\002\041\007\000\002\041\012\000\002\041\002\000\002" +
    "\042\010\000\002\042\005\000\002\042\006\000\002\042" +
    "\007\000\002\042\010\000\002\043\004\000\002\043\006" +
    "\000\002\043\003\000\002\043\004\000\002\043\004\000" +
    "\002\044\004\000\002\044\004\000\002\044\005\000\002" +
    "\044\004\000\002\044\003\000\002\044\003\000\002\044" +
    "\003\000\002\044\003\000\002\044\003\000\002\044\003" +
    "\000\002\044\003\000\002\044\006\000\002\044\011\000" +
    "\002\044\004\000\002\044\004\000\002\044\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u01d3\000\004\006\006\001\002\000\004\054\u01bf\001" +
    "\002\000\004\006\006\001\002\000\022\003\045\007\044" +
    "\046\022\047\021\050\027\051\020\052\025\054\023\001" +
    "\002\000\006\002\000\006\013\001\002\000\004\002\012" +
    "\001\002\000\006\002\ufff8\006\ufff8\001\002\000\004\002" +
    "\001\001\002\000\022\003\024\007\016\046\022\047\021" +
    "\050\027\051\020\052\025\054\023\001\002\000\006\002" +
    "\uffff\006\013\001\002\000\006\002\ufff9\006\ufff9\001\002" +
    "\000\004\054\uffef\001\002\000\004\054\041\001\002\000" +
    "\012\003\031\046\032\047\034\050\035\001\002\000\022" +
    "\006\uffe9\033\uffe9\046\uffe9\047\uffe9\050\uffe9\051\uffe9\052" +
    "\uffe9\054\uffe9\001\002\000\022\006\uffea\033\uffea\046\uffea" +
    "\047\uffea\050\uffea\051\uffea\052\uffea\054\uffea\001\002\000" +
    "\004\054\036\001\002\000\022\006\uffe5\033\uffe5\046\uffe5" +
    "\047\uffe5\050\uffe5\051\uffe5\052\uffe5\054\uffe5\001\002\000" +
    "\012\003\031\046\032\047\034\050\035\001\002\000\004" +
    "\007\030\001\002\000\022\006\uffe8\033\uffe8\046\uffe8\047" +
    "\uffe8\050\uffe8\051\uffe8\052\uffe8\054\uffe8\001\002\000\004" +
    "\054\uffee\001\002\000\026\003\uff57\006\uff57\015\uff57\033" +
    "\uff57\046\uff57\047\uff57\050\uff57\051\uff57\052\uff57\054\uff57" +
    "\001\002\000\026\003\uff5a\006\uff5a\015\uff5a\033\uff5a\046" +
    "\uff5a\047\uff5a\050\uff5a\051\uff5a\052\uff5a\054\uff5a\001\002" +
    "\000\022\006\uffe6\033\uffe6\046\uffe6\047\uffe6\050\uffe6\051" +
    "\uffe6\052\uffe6\054\uffe6\001\002\000\026\003\uff59\006\uff59" +
    "\015\uff59\033\uff59\046\uff59\047\uff59\050\uff59\051\uff59\052" +
    "\uff59\054\uff59\001\002\000\026\003\uff58\006\uff58\015\uff58" +
    "\033\uff58\046\uff58\047\uff58\050\uff58\051\uff58\052\uff58\054" +
    "\uff58\001\002\000\004\003\037\001\002\000\004\007\uffeb" +
    "\001\002\000\022\006\uffe7\033\uffe7\046\uffe7\047\uffe7\050" +
    "\uffe7\051\uffe7\052\uffe7\054\uffe7\001\002\000\006\007\uffec" +
    "\014\042\001\002\000\020\003\024\046\022\047\021\050" +
    "\027\051\020\052\025\054\023\001\002\000\004\007\uffed" +
    "\001\002\000\010\003\047\006\046\054\uffef\001\002\000" +
    "\010\002\ufffb\006\ufffb\054\uffe5\001\002\000\004\036\u01b9" +
    "\001\002\000\004\036\050\001\002\000\004\015\051\001" +
    "\002\000\020\006\071\046\061\047\060\050\072\051\057" +
    "\052\066\054\064\001\002\000\022\003\u01ac\006\146\021" +
    "\u01a9\022\u01aa\023\136\037\133\054\u01ab\055\134\001\002" +
    "\000\026\003\uffdd\005\uffdd\006\uffdd\033\uffdd\046\uffdd\047" +
    "\uffdd\050\uffdd\051\uffdd\052\uffdd\054\uffdd\001\002\000\026" +
    "\003\uffd9\005\uffd9\006\uffd9\033\uffd9\046\uffd9\047\uffd9\050" +
    "\uffd9\051\uffd9\052\uffd9\054\uffd9\001\002\000\022\005\u01a7" +
    "\006\071\046\061\047\060\050\072\051\057\052\066\054" +
    "\064\001\002\000\026\003\uffd7\005\uffd7\006\uffd7\033\uffd7" +
    "\046\uffd7\047\uffd7\050\uffd7\051\uffd7\052\uffd7\054\uffd7\001" +
    "\002\000\016\003\031\012\u0198\015\u0197\046\032\047\034" +
    "\050\035\001\002\000\006\003\u0192\054\u0191\001\002\000" +
    "\006\015\u018a\054\u0188\001\002\000\026\003\uffe3\005\uffe3" +
    "\006\uffe3\033\uffe3\046\uffe3\047\uffe3\050\uffe3\051\uffe3\052" +
    "\uffe3\054\uffe3\001\002\000\026\003\uffe1\005\uffe1\006\uffe1" +
    "\033\uffe1\046\uffe1\047\uffe1\050\uffe1\051\uffe1\052\uffe1\054" +
    "\uffe1\001\002\000\012\003\107\006\106\012\u0170\015\u016f" +
    "\001\002\000\004\010\u016e\001\002\000\016\003\031\012" +
    "\u014e\015\u014d\046\032\047\034\050\035\001\002\000\026" +
    "\003\uffdf\005\uffdf\006\uffdf\033\uffdf\046\uffdf\047\uffdf\050" +
    "\uffdf\051\uffdf\052\uffdf\054\uffdf\001\002\000\004\010\u014c" +
    "\001\002\000\026\003\141\006\146\021\135\022\137\023" +
    "\136\027\142\034\144\037\133\054\140\055\134\001\002" +
    "\000\006\015\075\054\073\001\002\000\014\003\101\010" +
    "\uff64\014\100\015\102\054\077\001\002\000\004\010\uff80" +
    "\001\002\000\004\003\076\001\002\000\004\010\uff67\001" +
    "\002\000\004\003\132\001\002\000\004\054\130\001\002" +
    "\000\004\010\uff66\001\002\000\006\024\105\054\103\001" +
    "\002\000\006\003\107\006\106\001\002\000\004\010\uff68" +
    "\001\002\000\004\010\uff7d\001\002\000\026\003\122\007" +
    "\111\014\uff5b\020\115\021\114\022\120\023\117\024\116" +
    "\054\121\055\113\001\002\000\004\006\110\001\002\000" +
    "\004\010\uffbd\001\002\000\004\010\uffbe\001\002\000\004" +
    "\007\127\001\002\000\020\003\uff62\005\uff62\007\uff62\010" +
    "\uff62\013\uff62\014\uff62\040\uff62\001\002\000\020\003\uff5d" +
    "\005\uff5d\007\uff5d\010\uff5d\013\uff5d\014\uff5d\040\uff5d\001" +
    "\002\000\020\003\uff5f\005\uff5f\007\uff5f\010\uff5f\013\uff5f" +
    "\014\uff5f\040\uff5f\001\002\000\020\003\uff5e\005\uff5e\007" +
    "\uff5e\010\uff5e\013\uff5e\014\uff5e\040\uff5e\001\002\000\020" +
    "\003\uff60\005\uff60\007\uff60\010\uff60\013\uff60\014\uff60\040" +
    "\uff60\001\002\000\020\003\uff5c\005\uff5c\007\uff5c\010\uff5c" +
    "\013\uff5c\014\uff5c\040\uff5c\001\002\000\020\003\uff61\005" +
    "\uff61\007\uff61\010\uff61\013\uff61\014\uff61\040\uff61\001\002" +
    "\000\004\010\uffbc\001\002\000\006\007\uffba\014\124\001" +
    "\002\000\026\003\126\007\uff5b\014\uff5b\020\115\021\114" +
    "\022\120\023\117\024\116\054\121\055\113\001\002\000" +
    "\004\007\uffbb\001\002\000\004\007\uffb9\001\002\000\004" +
    "\010\uffbf\001\002\000\010\010\uff64\014\100\054\077\001" +
    "\002\000\004\010\uff65\001\002\000\004\010\uff63\001\002" +
    "\000\004\003\u012e\001\002\000\004\037\u014b\001\002\000" +
    "\004\037\u011b\001\002\000\004\037\u014a\001\002\000\004" +
    "\037\u010d\001\002\000\010\007\350\014\347\037\160\001" +
    "\002\000\006\006\344\037\345\001\002\000\006\003\304" +
    "\015\305\001\002\000\004\007\241\001\002\000\006\003" +
    "\231\015\232\001\002\000\012\007\uffb7\010\uffb7\044\154" +
    "\045\153\001\002\000\024\003\141\006\146\007\147\021" +
    "\135\022\137\023\136\037\133\054\150\055\134\001\002" +
    "\000\004\003\227\001\002\000\004\037\160\001\002\000" +
    "\004\007\152\001\002\000\012\007\uffb5\010\uffb5\044\154" +
    "\045\153\001\002\000\022\003\141\006\146\021\135\022" +
    "\137\023\136\037\133\054\150\055\134\001\002\000\022" +
    "\003\141\006\146\021\135\022\137\023\136\037\133\054" +
    "\150\055\134\001\002\000\006\007\uffb6\010\uffb6\001\002" +
    "\000\006\007\uffb2\010\uffb2\001\002\000\006\007\uffb1\010" +
    "\uffb1\001\002\000\032\003\172\006\176\020\164\021\163" +
    "\022\170\023\166\024\165\040\173\041\167\042\161\054" +
    "\171\055\162\001\002\000\032\003\225\006\203\020\164" +
    "\021\163\022\170\023\166\024\165\040\173\041\167\042" +
    "\161\054\171\055\162\001\002\000\040\006\uff24\007\uff24" +
    "\010\uff24\020\uff24\021\uff24\022\uff24\023\uff24\024\uff24\040" +
    "\uff24\041\uff24\042\uff24\044\uff24\045\uff24\054\uff24\055\uff24" +
    "\001\002\000\040\006\uff22\007\uff22\010\uff22\020\uff22\021" +
    "\uff22\022\uff22\023\uff22\024\uff22\040\uff22\041\uff22\042\uff22" +
    "\044\uff22\045\uff22\054\uff22\055\uff22\001\002\000\040\006" +
    "\uff1f\007\uff1f\010\uff1f\020\uff1f\021\uff1f\022\uff1f\023\uff1f" +
    "\024\uff1f\040\uff1f\041\uff1f\042\uff1f\044\uff1f\045\uff1f\054" +
    "\uff1f\055\uff1f\001\002\000\040\006\uff20\007\uff20\010\uff20" +
    "\020\uff20\021\uff20\022\uff20\023\uff20\024\uff20\040\uff20\041" +
    "\uff20\042\uff20\044\uff20\045\uff20\054\uff20\055\uff20\001\002" +
    "\000\040\006\uff23\007\uff23\010\uff23\020\uff23\021\uff23\022" +
    "\uff23\023\uff23\024\uff23\040\uff23\041\uff23\042\uff23\044\uff23" +
    "\045\uff23\054\uff23\055\uff23\001\002\000\032\003\223\006" +
    "\203\020\164\021\163\022\170\023\166\024\165\040\173" +
    "\041\167\042\161\054\171\055\162\001\002\000\040\006" +
    "\uff21\007\uff21\010\uff21\020\uff21\021\uff21\022\uff21\023\uff21" +
    "\024\uff21\040\uff21\041\uff21\042\uff21\044\uff21\045\uff21\054" +
    "\uff21\055\uff21\001\002\000\042\006\uff1e\007\uff1e\010\uff1e" +
    "\012\212\020\uff1e\021\uff1e\022\uff1e\023\uff1e\024\uff1e\040" +
    "\uff1e\041\uff1e\042\uff1e\044\uff1e\045\uff1e\054\uff1e\055\uff1e" +
    "\001\002\000\004\007\207\001\002\000\032\003\210\006" +
    "\203\020\164\021\163\022\170\023\166\024\165\040\173" +
    "\041\167\042\161\054\171\055\162\001\002\000\040\006" +
    "\uff2b\007\uff2b\010\uff2b\020\uff2b\021\uff2b\022\uff2b\023\uff2b" +
    "\024\uff2b\040\uff2b\041\uff2b\042\uff2b\044\uff2b\045\uff2b\054" +
    "\uff2b\055\uff2b\001\002\000\040\006\203\007\uffb0\010\uffb0" +
    "\020\164\021\163\022\170\023\166\024\165\040\173\041" +
    "\167\042\161\044\uffb0\045\uffb0\054\171\055\162\001\002" +
    "\000\032\003\177\006\176\020\164\021\163\022\170\023" +
    "\166\024\165\040\173\041\167\042\161\054\171\055\162" +
    "\001\002\000\040\006\uff29\007\207\010\uff29\020\uff29\021" +
    "\uff29\022\uff29\023\uff29\024\uff29\040\uff29\041\uff29\042\uff29" +
    "\044\uff29\045\uff29\054\uff29\055\uff29\001\002\000\032\006" +
    "\203\007\201\020\164\021\163\022\170\023\166\024\165" +
    "\040\173\041\167\042\161\054\171\055\162\001\002\000" +
    "\042\003\172\006\uff26\007\uff26\010\uff26\020\uff26\021\uff26" +
    "\022\uff26\023\uff26\024\uff26\040\uff26\041\uff26\042\uff26\044" +
    "\uff26\045\uff26\054\uff26\055\uff26\001\002\000\040\006\uff2d" +
    "\007\uff2d\010\uff2d\020\uff2d\021\uff2d\022\uff2d\023\uff2d\024" +
    "\uff2d\040\uff2d\041\uff2d\042\uff2d\044\uff2d\045\uff2d\054\uff2d" +
    "\055\uff2d\001\002\000\032\003\172\006\176\020\164\021" +
    "\163\022\170\023\166\024\165\040\173\041\167\042\161" +
    "\054\171\055\162\001\002\000\032\006\203\007\205\020" +
    "\164\021\163\022\170\023\166\024\165\040\173\041\167" +
    "\042\161\054\171\055\162\001\002\000\040\006\uff26\007" +
    "\uff26\010\uff26\020\uff26\021\uff26\022\uff26\023\uff26\024\uff26" +
    "\040\uff26\041\uff26\042\uff26\044\uff26\045\uff26\054\uff26\055" +
    "\uff26\001\002\000\040\006\uff2c\007\uff2c\010\uff2c\020\uff2c" +
    "\021\uff2c\022\uff2c\023\uff2c\024\uff2c\040\uff2c\041\uff2c\042" +
    "\uff2c\044\uff2c\045\uff2c\054\uff2c\055\uff2c\001\002\000\040" +
    "\006\uff2a\007\uff2a\010\uff2a\020\uff2a\021\uff2a\022\uff2a\023" +
    "\uff2a\024\uff2a\040\uff2a\041\uff2a\042\uff2a\044\uff2a\045\uff2a" +
    "\054\uff2a\055\uff2a\001\002\000\040\006\uff1b\007\uff1b\010" +
    "\uff1b\020\uff1b\021\uff1b\022\uff1b\023\uff1b\024\uff1b\040\uff1b" +
    "\041\uff1b\042\uff1b\044\uff1b\045\uff1b\054\uff1b\055\uff1b\001" +
    "\002\000\040\006\uff28\007\uff28\010\uff28\020\uff28\021\uff28" +
    "\022\uff28\023\uff28\024\uff28\040\uff28\041\uff28\042\uff28\044" +
    "\uff28\045\uff28\054\uff28\055\uff28\001\002\000\010\003\214" +
    "\054\213\055\215\001\002\000\016\005\uffcf\007\uffcf\013" +
    "\uffcf\014\uffcf\035\uffcf\040\uffcf\001\002\000\016\005\uffce" +
    "\007\uffce\013\uffce\014\uffce\035\uffce\040\uffce\001\002\000" +
    "\016\005\uffd0\007\uffd0\013\uffd0\014\uffd0\035\uffd0\040\uffd0" +
    "\001\002\000\004\013\217\001\002\000\042\006\uff1d\007" +
    "\uff1d\010\uff1d\012\220\020\uff1d\021\uff1d\022\uff1d\023\uff1d" +
    "\024\uff1d\040\uff1d\041\uff1d\042\uff1d\044\uff1d\045\uff1d\054" +
    "\uff1d\055\uff1d\001\002\000\010\003\214\054\213\055\215" +
    "\001\002\000\004\013\222\001\002\000\040\006\uff1c\007" +
    "\uff1c\010\uff1c\020\uff1c\021\uff1c\022\uff1c\023\uff1c\024\uff1c" +
    "\040\uff1c\041\uff1c\042\uff1c\044\uff1c\045\uff1c\054\uff1c\055" +
    "\uff1c\001\002\000\040\006\uff1a\007\uff1a\010\uff1a\020\uff1a" +
    "\021\uff1a\022\uff1a\023\uff1a\024\uff1a\040\uff1a\041\uff1a\042" +
    "\uff1a\044\uff1a\045\uff1a\054\uff1a\055\uff1a\001\002\000\040" +
    "\006\uff27\007\uff27\010\uff27\020\uff27\021\uff27\022\uff27\023" +
    "\uff27\024\uff27\040\uff27\041\uff27\042\uff27\044\uff27\045\uff27" +
    "\054\uff27\055\uff27\001\002\000\040\006\uff19\007\uff19\010" +
    "\uff19\020\uff19\021\uff19\022\uff19\023\uff19\024\uff19\040\uff19" +
    "\041\uff19\042\uff19\044\uff19\045\uff19\054\uff19\055\uff19\001" +
    "\002\000\040\006\uff25\007\uff25\010\uff25\020\uff25\021\uff25" +
    "\022\uff25\023\uff25\024\uff25\040\uff25\041\uff25\042\uff25\044" +
    "\uff25\045\uff25\054\uff25\055\uff25\001\002\000\006\007\uffb4" +
    "\010\uffb4\001\002\000\006\007\uffb8\010\uffb8\001\002\000" +
    "\026\003\uff31\005\uff31\006\uff31\033\uff31\046\uff31\047\uff31" +
    "\050\uff31\051\uff31\052\uff31\054\uff31\001\002\000\006\003" +
    "\234\054\233\001\002\000\006\003\236\005\235\001\002" +
    "\000\026\003\uff30\005\uff30\006\uff30\033\uff30\046\uff30\047" +
    "\uff30\050\uff30\051\uff30\052\uff30\054\uff30\001\002\000\006" +
    "\003\237\010\240\001\002\000\026\003\uff2f\005\uff2f\006" +
    "\uff2f\033\uff2f\046\uff2f\047\uff2f\050\uff2f\051\uff2f\052\uff2f" +
    "\054\uff2f\001\002\000\026\003\uff2e\005\uff2e\006\uff2e\033" +
    "\uff2e\046\uff2e\047\uff2e\050\uff2e\051\uff2e\052\uff2e\054\uff2e" +
    "\001\002\000\026\003\uff32\005\uff32\006\uff32\033\uff32\046" +
    "\uff32\047\uff32\050\uff32\051\uff32\052\uff32\054\uff32\001\002" +
    "\000\004\006\242\001\002\000\006\026\243\030\244\001" +
    "\002\000\004\015\263\001\002\000\004\015\245\001\002" +
    "\000\022\005\246\006\071\046\061\047\060\050\072\051" +
    "\057\052\066\054\064\001\002\000\026\003\uffd3\005\uffd3" +
    "\006\uffd3\033\uffd3\046\uffd3\047\uffd3\050\uffd3\051\uffd3\052" +
    "\uffd3\054\uffd3\001\002\000\022\005\253\006\071\046\061" +
    "\047\060\050\072\051\057\052\066\054\064\001\002\000" +
    "\026\003\uffde\005\uffde\006\uffde\033\uffde\046\uffde\047\uffde" +
    "\050\uffde\051\uffde\052\uffde\054\uffde\001\002\000\026\003" +
    "\uffda\005\uffda\006\uffda\033\uffda\046\uffda\047\uffda\050\uffda" +
    "\051\uffda\052\uffda\054\uffda\001\002\000\026\003\uffd8\005" +
    "\uffd8\006\uffd8\033\uffd8\046\uffd8\047\uffd8\050\uffd8\051\uffd8" +
    "\052\uffd8\054\uffd8\001\002\000\026\003\uffd4\005\uffd4\006" +
    "\uffd4\033\uffd4\046\uffd4\047\uffd4\050\uffd4\051\uffd4\052\uffd4" +
    "\054\uffd4\001\002\000\026\003\uffe4\005\uffe4\006\uffe4\033" +
    "\uffe4\046\uffe4\047\uffe4\050\uffe4\051\uffe4\052\uffe4\054\uffe4" +
    "\001\002\000\026\003\uffe2\005\uffe2\006\uffe2\033\uffe2\046" +
    "\uffe2\047\uffe2\050\uffe2\051\uffe2\052\uffe2\054\uffe2\001\002" +
    "\000\004\010\262\001\002\000\026\003\uffe0\005\uffe0\006" +
    "\uffe0\033\uffe0\046\uffe0\047\uffe0\050\uffe0\051\uffe0\052\uffe0" +
    "\054\uffe0\001\002\000\004\010\261\001\002\000\026\003" +
    "\uffdc\005\uffdc\006\uffdc\033\uffdc\046\uffdc\047\uffdc\050\uffdc" +
    "\051\uffdc\052\uffdc\054\uffdc\001\002\000\026\003\uffd6\005" +
    "\uffd6\006\uffd6\033\uffd6\046\uffd6\047\uffd6\050\uffd6\051\uffd6" +
    "\052\uffd6\054\uffd6\001\002\000\022\005\uffc7\006\265\046" +
    "\061\047\060\050\072\051\057\052\066\054\064\001\002" +
    "\000\022\005\uffc7\006\265\046\061\047\060\050\072\051" +
    "\057\052\066\054\064\001\002\000\030\003\141\006\146" +
    "\021\135\022\137\023\136\027\142\032\270\034\144\037" +
    "\133\054\140\055\134\001\002\000\004\005\267\001\002" +
    "\000\026\003\uffcc\005\uffcc\006\uffcc\033\uffcc\046\uffcc\047" +
    "\uffcc\050\uffcc\051\uffcc\052\uffcc\054\uffcc\001\002\000\004" +
    "\007\277\001\002\000\004\007\272\001\002\000\006\006" +
    "\242\015\273\001\002\000\022\005\uffc7\006\265\046\061" +
    "\047\060\050\072\051\057\052\066\054\064\001\002\000" +
    "\022\005\uffc7\006\265\046\061\047\060\050\072\051\057" +
    "\052\066\054\064\001\002\000\004\005\uffca\001\002\000" +
    "\004\005\uffcb\001\002\000\004\015\300\001\002\000\022" +
    "\005\uffc8\006\071\046\061\047\060\050\072\051\057\052" +
    "\066\054\064\001\002\000\022\005\uffc9\006\071\046\061" +
    "\047\060\050\072\051\057\052\066\054\064\001\002\000" +
    "\004\005\303\001\002\000\026\003\uffcd\005\uffcd\006\uffcd" +
    "\033\uffcd\046\uffcd\047\uffcd\050\uffcd\051\uffcd\052\uffcd\054" +
    "\uffcd\001\002\000\026\003\uff41\005\uff41\006\uff41\033\uff41" +
    "\046\uff41\047\uff41\050\uff41\051\uff41\052\uff41\054\uff41\001" +
    "\002\000\016\003\214\005\306\017\311\023\307\054\213" +
    "\055\215\001\002\000\004\010\343\001\002\000\006\005" +
    "\uff33\040\313\001\002\000\006\005\uff33\040\313\001\002" +
    "\000\006\005\uff33\040\313\001\002\000\006\005\326\040" +
    "\327\001\002\000\030\003\315\005\uff5b\017\316\020\115" +
    "\021\114\022\120\023\117\024\116\040\uff5b\054\314\055" +
    "\113\001\002\000\010\005\uff61\012\320\040\uff61\001\002" +
    "\000\006\005\uff36\040\uff36\001\002\000\006\005\uff37\040" +
    "\uff37\001\002\000\006\005\uff39\040\uff39\001\002\000\010" +
    "\003\214\054\213\055\215\001\002\000\004\013\322\001" +
    "\002\000\010\005\uff35\012\323\040\uff35\001\002\000\010" +
    "\003\214\054\213\055\215\001\002\000\004\013\325\001" +
    "\002\000\006\005\uff34\040\uff34\001\002\000\004\010\332" +
    "\001\002\000\026\005\uff5b\017\330\020\115\021\114\022" +
    "\120\023\117\024\116\040\uff5b\054\121\055\113\001\002" +
    "\000\006\005\uff38\040\uff38\001\002\000\006\005\uff3a\040" +
    "\uff3a\001\002\000\026\003\uff3c\005\uff3c\006\uff3c\033\uff3c" +
    "\046\uff3c\047\uff3c\050\uff3c\051\uff3c\052\uff3c\054\uff3c\001" +
    "\002\000\006\005\334\040\327\001\002\000\006\003\335" +
    "\010\336\001\002\000\026\003\uff3f\005\uff3f\006\uff3f\033" +
    "\uff3f\046\uff3f\047\uff3f\050\uff3f\051\uff3f\052\uff3f\054\uff3f" +
    "\001\002\000\026\003\uff3d\005\uff3d\006\uff3d\033\uff3d\046" +
    "\uff3d\047\uff3d\050\uff3d\051\uff3d\052\uff3d\054\uff3d\001\002" +
    "\000\006\005\340\040\327\001\002\000\006\003\341\010" +
    "\342\001\002\000\026\003\uff40\005\uff40\006\uff40\033\uff40" +
    "\046\uff40\047\uff40\050\uff40\051\uff40\052\uff40\054\uff40\001" +
    "\002\000\026\003\uff3e\005\uff3e\006\uff3e\033\uff3e\046\uff3e" +
    "\047\uff3e\050\uff3e\051\uff3e\052\uff3e\054\uff3e\001\002\000" +
    "\026\003\uff3b\005\uff3b\006\uff3b\033\uff3b\046\uff3b\047\uff3b" +
    "\050\uff3b\051\uff3b\052\uff3b\054\uff3b\001\002\000\004\007" +
    "\346\001\002\000\012\007\uff97\010\uff97\044\uff97\045\uff97" +
    "\001\002\000\006\007\uffb3\010\uffb3\001\002\000\010\003" +
    "\214\054\213\055\215\001\002\000\004\006\351\001\002" +
    "\000\004\026\352\001\002\000\004\015\353\001\002\000" +
    "\004\006\354\001\002\000\024\003\370\021\361\022\365" +
    "\023\364\024\362\032\366\037\357\054\367\055\360\001" +
    "\002\000\004\005\356\001\002\000\026\003\uffc6\005\uffc6" +
    "\006\uffc6\033\uffc6\046\uffc6\047\uffc6\050\uffc6\051\uffc6\052" +
    "\uffc6\054\uffc6\001\002\000\014\021\u012f\022\u0131\023\u012d" +
    "\054\u012c\055\u0130\001\002\000\010\007\uff86\011\u0122\037" +
    "\u013c\001\002\000\004\007\uff89\001\002\000\004\007\uff87" +
    "\001\002\000\004\007\u0137\001\002\000\004\037\u0136\001" +
    "\002\000\004\007\uff88\001\002\000\004\007\u0133\001\002" +
    "\000\006\011\u0109\037\u0132\001\002\000\010\006\371\007" +
    "\uff85\015\372\001\002\000\004\015\u0106\001\002\000\020" +
    "\006\071\046\061\047\060\050\072\051\057\052\066\054" +
    "\064\001\002\000\020\006\375\046\061\047\060\050\072" +
    "\051\057\052\066\054\064\001\002\000\004\005\uffc1\001" +
    "\002\000\032\003\u0104\006\146\021\u0100\022\u0102\023\u0101" +
    "\024\362\027\142\032\366\034\144\037\376\054\u0103\055" +
    "\377\001\002\000\016\003\u012e\021\u012f\022\u0131\023\u012d" +
    "\054\u012c\055\u0130\001\002\000\010\007\uff86\011\u0122\037" +
    "\u0123\001\002\000\006\007\uff89\037\u011b\001\002\000\004" +
    "\037\u0114\001\002\000\006\007\uff88\037\u010d\001\002\000" +
    "\012\007\350\011\u0109\014\347\037\u010a\001\002\000\012" +
    "\006\u0105\007\uff85\015\372\037\345\001\002\000\006\007" +
    "\346\015\u0106\001\002\000\020\006\071\046\061\047\060" +
    "\050\072\051\057\052\066\054\064\001\002\000\020\006" +
    "\375\046\061\047\060\050\072\051\057\052\066\054\064" +
    "\001\002\000\004\005\uffc0\001\002\000\006\054\u010b\055" +
    "\u010c\001\002\000\034\003\172\006\176\007\uff95\020\164" +
    "\021\163\022\170\023\166\024\165\040\173\041\167\042" +
    "\161\054\171\055\162\001\002\000\004\007\uff8c\001\002" +
    "\000\004\007\uff8b\001\002\000\016\003\u0110\021\u0111\022" +
    "\u0113\023\u010f\054\u010e\055\u0112\001\002\000\012\007\uffac" +
    "\010\uffac\044\uffac\045\uffac\001\002\000\012\007\uff9d\010" +
    "\uff9d\044\uff9d\045\uff9d\001\002\000\012\007\uffab\010\uffab" +
    "\044\uffab\045\uffab\001\002\000\012\007\uff98\010\uff98\044" +
    "\uff98\045\uff98\001\002\000\012\007\uffa2\010\uffa2\044\uffa2" +
    "\045\uffa2\001\002\000\012\007\uff99\010\uff99\044\uff99\045" +
    "\uff99\001\002\000\020\003\u0117\007\uff93\021\u0118\022\u011a" +
    "\023\u0116\054\u0115\055\u0119\001\002\000\012\007\uffae\010" +
    "\uffae\044\uffae\045\uffae\001\002\000\012\007\uffa0\010\uffa0" +
    "\044\uffa0\045\uffa0\001\002\000\012\007\uffad\010\uffad\044" +
    "\uffad\045\uffad\001\002\000\012\007\uff9e\010\uff9e\044\uff9e" +
    "\045\uff9e\001\002\000\012\007\uffa3\010\uffa3\044\uffa3\045" +
    "\uffa3\001\002\000\012\007\uff9f\010\uff9f\044\uff9f\045\uff9f" +
    "\001\002\000\016\003\u011e\021\u011f\022\u0121\023\u011d\054" +
    "\u011c\055\u0120\001\002\000\012\007\uffaa\010\uffaa\044\uffaa" +
    "\045\uffaa\001\002\000\012\007\uff9c\010\uff9c\044\uff9c\045" +
    "\uff9c\001\002\000\012\007\uffa9\010\uffa9\044\uffa9\045\uffa9" +
    "\001\002\000\012\007\uff9a\010\uff9a\044\uff9a\045\uff9a\001" +
    "\002\000\012\007\uffa1\010\uffa1\044\uffa1\045\uffa1\001\002" +
    "\000\012\007\uff9b\010\uff9b\044\uff9b\045\uff9b\001\002\000" +
    "\006\054\u012a\055\u012b\001\002\000\020\003\u0126\007\uff8e" +
    "\021\u0127\022\u0129\023\u0125\054\u0124\055\u0128\001\002\000" +
    "\012\007\uffaf\010\uffaf\044\uffaf\045\uffaf\001\002\000\012" +
    "\007\uffa6\010\uffa6\044\uffa6\045\uffa6\001\002\000\012\007" +
    "\uffa7\010\uffa7\044\uffa7\045\uffa7\001\002\000\012\007\uffa4" +
    "\010\uffa4\044\uffa4\045\uffa4\001\002\000\012\007\uffa8\010" +
    "\uffa8\044\uffa8\045\uffa8\001\002\000\012\007\uffa5\010\uffa5" +
    "\044\uffa5\045\uffa5\001\002\000\004\007\uff8a\001\002\000" +
    "\004\007\uff8d\001\002\000\004\007\uff94\001\002\000\004" +
    "\007\uff92\001\002\000\012\007\uff96\010\uff96\044\uff96\045" +
    "\uff96\001\002\000\004\007\uff8f\001\002\000\004\007\uff91" +
    "\001\002\000\004\007\uff90\001\002\000\004\007\uff95\001" +
    "\002\000\004\015\u0134\001\002\000\022\005\uffc2\006\071" +
    "\046\061\047\060\050\072\051\057\052\066\054\064\001" +
    "\002\000\022\005\uffc3\006\071\046\061\047\060\050\072" +
    "\051\057\052\066\054\064\001\002\000\004\007\uff93\001" +
    "\002\000\004\015\u0138\001\002\000\020\006\375\046\061" +
    "\047\060\050\072\051\057\052\066\054\064\001\002\000" +
    "\004\005\uffc4\001\002\000\020\006\375\046\061\047\060" +
    "\050\072\051\057\052\066\054\064\001\002\000\004\005" +
    "\uffc5\001\002\000\004\007\uff8e\001\002\000\004\035\u013e" +
    "\001\002\000\010\003\214\054\213\055\215\001\002\000" +
    "\004\014\u0140\001\002\000\004\040\u0141\001\002\000\010" +
    "\003\214\054\213\055\215\001\002\000\004\007\u0143\001" +
    "\002\000\004\006\u0144\001\002\000\004\031\u0145\001\002" +
    "\000\004\015\u0146\001\002\000\022\005\u0147\006\071\046" +
    "\061\047\060\050\072\051\057\052\066\054\064\001\002" +
    "\000\026\003\uffd1\005\uffd1\006\uffd1\033\uffd1\046\uffd1\047" +
    "\uffd1\050\uffd1\051\uffd1\052\uffd1\054\uffd1\001\002\000\022" +
    "\005\u0149\006\071\046\061\047\060\050\072\051\057\052" +
    "\066\054\064\001\002\000\026\003\uffd2\005\uffd2\006\uffd2" +
    "\033\uffd2\046\uffd2\047\uffd2\050\uffd2\051\uffd2\052\uffd2\054" +
    "\uffd2\001\002\000\016\003\u0117\021\u0118\022\u011a\023\u0116" +
    "\054\u0115\055\u0119\001\002\000\016\003\u0126\021\u0127\022" +
    "\u0129\023\u0125\054\u0124\055\u0128\001\002\000\026\003\uffdb" +
    "\005\uffdb\006\uffdb\033\uffdb\046\uffdb\047\uffdb\050\uffdb\051" +
    "\uffdb\052\uffdb\054\uffdb\001\002\000\004\003\u016d\001\002" +
    "\000\010\003\214\054\213\055\215\001\002\000\010\003" +
    "\u0151\015\u0152\054\u0150\001\002\000\004\015\u0154\001\002" +
    "\000\004\010\uff6e\001\002\000\004\003\u0153\001\002\000" +
    "\004\010\uff6d\001\002\000\006\012\u0156\054\103\001\002" +
    "\000\004\010\uff70\001\002\000\030\003\u0159\012\u0158\013" +
    "\uff5b\014\uff5b\020\115\021\114\022\120\023\117\024\116" +
    "\054\121\055\113\001\002\000\004\013\u0165\001\002\000" +
    "\026\003\uff5b\013\uff5b\014\uff5b\020\115\021\114\022\120" +
    "\023\117\024\116\054\121\055\113\001\002\000\004\013" +
    "\uff52\001\002\000\006\013\uff53\014\u015b\001\002\000\030" +
    "\003\u0159\012\u0158\013\uff5b\014\uff5b\020\115\021\114\022" +
    "\120\023\117\024\116\054\121\055\113\001\002\000\004" +
    "\013\uff54\001\002\000\006\013\uff56\014\u0163\001\002\000" +
    "\010\003\u0160\013\u0161\014\u015f\001\002\000\026\003\uff5b" +
    "\013\uff5b\014\uff5b\020\115\021\114\022\120\023\117\024" +
    "\116\054\121\055\113\001\002\000\010\010\uff4f\013\uff4f" +
    "\014\uff4f\001\002\000\010\010\uff50\013\uff50\014\uff50\001" +
    "\002\000\010\010\uff51\013\uff51\014\uff51\001\002\000\030" +
    "\003\u0159\012\u0158\013\uff5b\014\uff5b\020\115\021\114\022" +
    "\120\023\117\024\116\054\121\055\113\001\002\000\004" +
    "\013\uff55\001\002\000\004\010\uff75\001\002\000\004\013" +
    "\u0167\001\002\000\004\012\u0168\001\002\000\010\003\214" +
    "\054\213\055\215\001\002\000\004\013\u016a\001\002\000" +
    "\012\003\031\046\032\047\034\050\035\001\002\000\004" +
    "\054\u016c\001\002\000\004\010\uff76\001\002\000\004\010" +
    "\uff6f\001\002\000\026\003\uffd5\005\uffd5\006\uffd5\033\uffd5" +
    "\046\uffd5\047\uffd5\050\uffd5\051\uffd5\052\uffd5\054\uffd5\001" +
    "\002\000\034\003\u017d\006\u0180\020\164\021\u0179\022\u017b" +
    "\023\u017a\024\165\037\133\040\173\041\167\042\161\054" +
    "\u0186\055\u0178\001\002\000\010\003\214\054\213\055\215" +
    "\001\002\000\004\013\u0172\001\002\000\006\012\u0174\015" +
    "\u0173\001\002\000\034\003\u017d\006\u0180\020\164\021\u0179" +
    "\022\u017b\023\u017a\024\165\037\133\040\173\041\167\042" +
    "\161\054\u017c\055\u0178\001\002\000\010\003\214\054\213" +
    "\055\215\001\002\000\004\013\u0176\001\002\000\004\015" +
    "\u0177\001\002\000\034\003\u017d\006\u0180\020\164\021\u0179" +
    "\022\u017b\023\u017a\024\165\037\133\040\173\041\167\042" +
    "\161\054\u017c\055\u0178\001\002\000\036\006\uff24\007\uff24" +
    "\010\uff24\020\uff24\021\uff24\022\uff24\023\uff24\024\uff24\037" +
    "\u014b\040\uff24\041\uff24\042\uff24\054\uff24\055\uff24\001\002" +
    "\000\036\006\uff22\007\uff22\010\uff22\020\uff22\021\uff22\022" +
    "\uff22\023\uff22\024\uff22\037\u011b\040\uff22\041\uff22\042\uff22" +
    "\054\uff22\055\uff22\001\002\000\036\006\uff23\007\uff23\010" +
    "\uff23\020\uff23\021\uff23\022\uff23\023\uff23\024\uff23\037\u014a" +
    "\040\uff23\041\uff23\042\uff23\054\uff23\055\uff23\001\002\000" +
    "\036\006\uff21\007\uff21\010\uff21\020\uff21\021\uff21\022\uff21" +
    "\023\uff21\024\uff21\037\u010d\040\uff21\041\uff21\042\uff21\054" +
    "\uff21\055\uff21\001\002\000\040\006\uff1e\007\uff1e\010\uff1e" +
    "\012\212\020\uff1e\021\uff1e\022\uff1e\023\uff1e\024\uff1e\037" +
    "\160\040\uff1e\041\uff1e\042\uff1e\054\uff1e\055\uff1e\001\002" +
    "\000\010\006\344\007\207\037\345\001\002\000\004\010" +
    "\uff77\001\002\000\032\006\203\010\uff78\020\164\021\163" +
    "\022\170\023\166\024\165\040\173\041\167\042\161\054" +
    "\171\055\162\001\002\000\036\003\u0181\006\u0180\007\147" +
    "\020\164\021\u0179\022\u017b\023\u017a\024\165\037\133\040" +
    "\173\041\167\042\161\054\u017c\055\u0178\001\002\000\036" +
    "\006\344\007\207\010\uff29\020\uff29\021\uff29\022\uff29\023" +
    "\uff29\024\uff29\037\345\040\uff29\041\uff29\042\uff29\054\uff29" +
    "\055\uff29\001\002\000\004\010\uff7b\001\002\000\032\006" +
    "\203\010\uff7c\020\164\021\163\022\170\023\166\024\165" +
    "\040\173\041\167\042\161\054\171\055\162\001\002\000" +
    "\032\006\203\010\uff83\020\164\021\163\022\170\023\166" +
    "\024\165\040\173\041\167\042\161\054\171\055\162\001" +
    "\002\000\004\010\uff84\001\002\000\040\003\107\006\106" +
    "\010\uff1e\012\212\020\uff1e\021\uff1e\022\uff1e\023\uff1e\024" +
    "\uff1e\037\160\040\uff1e\041\uff1e\042\uff1e\054\uff1e\055\uff1e" +
    "\001\002\000\004\010\uff74\001\002\000\014\003\u018c\010" +
    "\uff64\014\100\015\u018d\054\077\001\002\000\004\010\uff82" +
    "\001\002\000\004\003\u018b\001\002\000\004\010\uff72\001" +
    "\002\000\004\010\uff71\001\002\000\032\003\172\006\176" +
    "\020\164\021\163\022\170\023\166\024\165\040\173\041" +
    "\167\042\161\054\u018f\055\162\001\002\000\004\010\uff73" +
    "\001\002\000\036\003\107\006\106\010\uff1e\012\212\020" +
    "\uff1e\021\uff1e\022\uff1e\023\uff1e\024\uff1e\040\uff1e\041\uff1e" +
    "\042\uff1e\054\uff1e\055\uff1e\001\002\000\032\006\203\010" +
    "\uff7f\020\164\021\163\022\170\023\166\024\165\040\173" +
    "\041\167\042\161\054\171\055\162\001\002\000\014\003" +
    "\u0195\010\uff64\014\100\015\u0196\054\077\001\002\000\004" +
    "\015\u0194\001\002\000\004\010\uff81\001\002\000\022\003" +
    "\uff4d\006\uff4d\021\uff4d\022\uff4d\023\uff4d\037\uff4d\054\uff4d" +
    "\055\uff4d\001\002\000\022\003\uff4c\006\uff4c\021\uff4c\022" +
    "\uff4c\023\uff4c\037\uff4c\054\uff4c\055\uff4c\001\002\000\022" +
    "\003\uff4e\006\uff4e\021\uff4e\022\uff4e\023\uff4e\037\uff4e\054" +
    "\uff4e\055\uff4e\001\002\000\004\003\u01a6\001\002\000\010" +
    "\003\214\054\213\055\215\001\002\000\010\003\u019b\015" +
    "\u019c\054\u019a\001\002\000\004\015\u019e\001\002\000\004" +
    "\010\uff6a\001\002\000\004\003\u019d\001\002\000\004\010" +
    "\uff69\001\002\000\006\012\u01a0\054\103\001\002\000\004" +
    "\010\uff6c\001\002\000\026\003\uff5b\013\uff5b\014\uff5b\020" +
    "\115\021\114\022\120\023\117\024\116\054\121\055\113" +
    "\001\002\000\004\010\uff79\001\002\000\004\013\u01a3\001" +
    "\002\000\012\003\031\046\032\047\034\050\035\001\002" +
    "\000\004\054\u01a5\001\002\000\004\010\uff7a\001\002\000" +
    "\004\010\uff6b\001\002\000\006\002\ufffc\006\ufffc\001\002" +
    "\000\004\010\uff7e\001\002\000\006\010\uff4a\037\u011b\001" +
    "\002\000\006\010\uff4b\037\u010d\001\002\000\006\006\u01ae" +
    "\037\160\001\002\000\010\006\344\010\uff46\037\345\001" +
    "\002\000\004\010\uff49\001\002\000\006\007\u01b0\054\u01af" +
    "\001\002\000\012\003\u01b5\010\u01b6\014\u01b3\054\u01b4\001" +
    "\002\000\004\010\uff47\001\002\000\004\007\u01b2\001\002" +
    "\000\004\010\uff48\001\002\000\004\054\u01af\001\002\000" +
    "\004\003\u01b7\001\002\000\004\007\uff43\001\002\000\004" +
    "\007\uff44\001\002\000\004\007\uff42\001\002\000\004\007" +
    "\uff45\001\002\000\004\015\u01ba\001\002\000\022\005\u01bb" +
    "\006\071\046\061\047\060\050\072\051\057\052\066\054" +
    "\064\001\002\000\006\002\ufffa\006\ufffa\001\002\000\022" +
    "\005\u01bd\006\071\046\061\047\060\050\072\051\057\052" +
    "\066\054\064\001\002\000\006\002\ufffd\006\ufffd\001\002" +
    "\000\004\002\ufffe\001\002\000\004\006\u01c0\001\002\000" +
    "\004\025\u01c1\001\002\000\006\003\u01c2\015\u01c3\001\002" +
    "\000\006\002\ufff3\006\ufff3\001\002\000\020\003\024\020" +
    "\u01c4\046\022\047\021\050\027\051\020\052\025\001\002" +
    "\000\022\005\u01d3\006\071\046\061\047\060\050\072\051" +
    "\057\052\066\054\064\001\002\000\022\006\071\033\u01c6" +
    "\046\061\047\060\050\072\051\057\052\066\054\064\001" +
    "\002\000\022\010\uff5b\020\115\021\114\022\120\023\117" +
    "\024\116\054\121\055\113\001\002\000\024\003\u01c9\006" +
    "\071\033\u01c8\046\061\047\060\050\072\051\057\052\066" +
    "\054\064\001\002\000\024\003\uff5b\010\uff5b\020\115\021" +
    "\114\022\120\023\117\024\116\054\121\055\113\001\002" +
    "\000\006\002\ufff2\006\ufff2\001\002\000\006\003\u01cb\010" +
    "\u01cc\001\002\000\004\010\u01cf\001\002\000\006\003\u01ce" +
    "\005\u01cd\001\002\000\006\002\ufff7\006\ufff7\001\002\000" +
    "\006\002\ufff1\006\ufff1\001\002\000\006\002\ufff0\006\ufff0" +
    "\001\002\000\004\010\u01d1\001\002\000\004\005\u01d2\001" +
    "\002\000\006\002\ufff4\006\ufff4\001\002\000\006\002\ufff5" +
    "\006\ufff5\001\002\000\022\005\u01d5\006\071\046\061\047" +
    "\060\050\072\051\057\052\066\054\064\001\002\000\006" +
    "\002\ufff6\006\ufff6\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u01d3\000\014\002\007\003\006\004\004\005\010\006" +
    "\003\001\001\000\002\001\001\000\010\003\u01bd\005\014" +
    "\006\003\001\001\000\006\007\025\010\016\001\001\000" +
    "\010\004\013\005\010\006\003\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\007\025\010" +
    "\016\001\001\000\006\005\014\006\003\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\033" +
    "\037\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\033\032\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\007\042\010" +
    "\016\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\011\054\012\061\013\062\015\066\017\052" +
    "\022\064\027\067\035\051\040\053\042\055\001\001\000" +
    "\010\024\u01ac\025\144\036\u01a7\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\012\253\013\254\015\256\017" +
    "\247\022\255\027\257\035\051\040\250\042\251\001\001" +
    "\000\002\001\001\000\004\033\u0198\001\001\000\004\030" +
    "\u0192\001\001\000\004\030\u0188\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\033\u014e\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\024\142\025\144\001\001\000\004\030\073\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\030\130\001" +
    "\001\000\002\001\001\000\004\022\103\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\023" +
    "\111\031\122\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\023\124\031\122\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\026\227\001\001\000\006\024\150\025\144\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\026\154\001\001\000\006\024\156\025\144\001\001" +
    "\000\006\024\155\025\144\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\043\174\044\173" +
    "\001\001\000\004\044\225\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\044\223\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\044\210\001\001" +
    "\000\002\001\001\000\004\044\201\001\001\000\006\043" +
    "\177\044\173\001\001\000\002\001\001\000\004\044\201" +
    "\001\001\000\006\043\205\044\173\001\001\000\002\001" +
    "\001\000\006\043\203\044\173\001\001\000\004\044\201" +
    "\001\001\000\002\001\001\000\004\044\201\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\014\215\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\014\220\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\011\246\012\061\013" +
    "\062\015\066\017\052\022\064\027\067\035\051\040\053" +
    "\042\055\001\001\000\002\001\001\000\024\012\253\013" +
    "\254\015\256\017\247\022\255\027\257\035\051\040\250" +
    "\042\251\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\011\263" +
    "\012\061\013\062\015\066\016\265\017\052\022\064\027" +
    "\067\035\051\040\053\042\055\001\001\000\026\012\253" +
    "\013\254\015\256\016\301\017\247\022\255\027\257\035" +
    "\051\040\250\042\251\001\001\000\006\024\270\025\144" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\011\273" +
    "\012\061\013\062\015\066\016\274\017\052\022\064\027" +
    "\067\035\051\040\053\042\055\001\001\000\026\012\253" +
    "\013\254\015\256\016\275\017\247\022\255\027\257\035" +
    "\051\040\250\042\251\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\011\300\012\061\013" +
    "\062\015\066\017\052\022\064\027\067\035\051\040\053" +
    "\042\055\001\001\000\024\012\253\013\254\015\256\017" +
    "\247\022\255\027\257\035\051\040\250\042\251\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\014\307\001\001\000\002\001\001\000\004\041\336" +
    "\001\001\000\004\041\332\001\001\000\004\041\311\001" +
    "\001\000\002\001\001\000\004\031\316\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\014\320\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\014\323\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\031\330\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\014\u013c\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\020\354\001\001\000\004\021\362\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\011\372\012\061\013\062\015\066\017\052\022\064" +
    "\027\067\035\051\040\053\042\055\001\001\000\026\012" +
    "\253\013\254\015\256\017\247\020\373\022\255\027\257" +
    "\035\051\040\250\042\251\001\001\000\002\001\001\000" +
    "\010\021\362\024\142\025\144\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\011\u0106\012\061\013\062\015\066\017" +
    "\052\022\064\027\067\035\051\040\053\042\055\001\001" +
    "\000\026\012\253\013\254\015\256\017\247\020\u0107\022" +
    "\255\027\257\035\051\040\250\042\251\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\043\174\044\173\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\011\u0134" +
    "\012\061\013\062\015\066\017\052\022\064\027\067\035" +
    "\051\040\053\042\055\001\001\000\024\012\253\013\254" +
    "\015\256\017\247\022\255\027\257\035\051\040\250\042" +
    "\251\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\011\u0139\012\061\013\062\015\066\017\052\020\u0138\022" +
    "\064\027\067\035\051\040\053\042\055\001\001\000\002" +
    "\001\001\000\026\012\253\013\254\015\256\017\247\020" +
    "\u013a\022\255\027\257\035\051\040\250\042\251\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\014\u013e\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\014\u0141\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\011\u0147" +
    "\012\061\013\062\015\066\017\052\022\064\027\067\035" +
    "\051\040\053\042\055\001\001\000\002\001\001\000\024" +
    "\012\253\013\254\015\256\017\247\022\255\027\257\035" +
    "\051\040\250\042\251\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\014\u0165\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\022\u0154\001\001\000\002\001\001\000\006" +
    "\031\u0159\032\u0156\001\001\000\002\001\001\000\006\031" +
    "\u015d\034\u015c\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\031\u0159\032\u015b\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\031\u015d\034\u0161" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\031\u0159\032\u0163\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\014\u0168\001\001\000\002\001\001\000\004\033\u016a" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\022\u0186\024\u0184\025\144" +
    "\043\u0183\044\173\001\001\000\004\014\u0170\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\024\u0181\025\144" +
    "\043\u0182\044\173\001\001\000\004\014\u0174\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\024\u017d\025\144" +
    "\043\u017e\044\173\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\044\201\001" +
    "\001\000\012\024\150\025\144\043\177\044\173\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\044\201\001" +
    "\001\000\004\044\201\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\022\u018d\043\u018f\044\173\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\044\201\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\014\u01a1\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\022\u019e\001\001\000\002\001\001\000\006\031" +
    "\u015d\034\u01a0\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\033\u01a3\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\037\u01b0\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\037\u01b7\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\011\u01bb\012\061" +
    "\013\062\015\066\017\052\022\064\027\067\035\051\040" +
    "\053\042\055\001\001\000\002\001\001\000\024\012\253" +
    "\013\254\015\256\017\247\022\255\027\257\035\051\040" +
    "\250\042\251\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\010\u01c4\001\001\000\026\011\u01d3" +
    "\012\061\013\062\015\066\017\052\022\064\027\067\035" +
    "\051\040\053\042\055\001\001\000\026\011\u01c6\012\061" +
    "\013\062\015\066\017\052\022\064\027\067\035\051\040" +
    "\053\042\055\001\001\000\004\031\u01cf\001\001\000\024" +
    "\012\253\013\254\015\256\017\247\022\255\027\257\035" +
    "\051\040\250\042\251\001\001\000\004\031\u01c9\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\012\253\013\254\015\256" +
    "\017\247\022\255\027\257\035\051\040\250\042\251\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ASintaxT$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ASintaxT$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ASintaxT$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public Symbol getS(){
            return this.s;
        }
    /**
     * Método al que se llama automáticamente ante algún error sintactico.
    **/ 
    public void syntax_error(Symbol s){
        this.s = s;
        System.out.println("Error Sintáctico recuperable en la Línea " + (s.right) +
        " Columna "+s.left+ ". No se esperaba este componente: " +s.value+".");

        String report = "Syntax error in line " + getS().right + " Column " + getS().left + ". No se esperaba este componente: " + getS().value;
        if(getS().value == null){
            report = "You didn't close your last code structure";
        }
        addError(report + "\n");
         
    }

    /**
     * Método al que se llama automáticamente ante algún error sintáctico 
     * en el que ya no es posible una recuperación de errores.
     **/ 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error síntactico irrecuperable en la Línea " + 
        (s.right)+ " Columna "+s.left+". Componente " + s.value + 
        " no reconocido."); 
    }
    
    //Guardar los errores encontrados
    private String ERRORES = "";
    private int cERRORES = 0;
    public void addError(String error){
        this.ERRORES += error;
       this.cERRORES++;
    }
    public String getERRORES(){
        return this.ERRORES;
    }
    public void setERRORES(String err){
        this.ERRORES = err;
    }

    public int getcERRORES(){
        return this.cERRORES;
    }
    public void setcERRORES(int err){
        this.cERRORES = err;
    }

    public String errorMessage(String error, Symbol s){
        String report = "Syntax error in line " + s.right + " Column " + s.left + ". No se esperaba este componente: " +s.value+ "\nDescripción: " + error +"\n";
        this.addError(report);
        System.out.println("Cantidad: " + getcERRORES());
        return report;
    }

    //Se vino el arbolito papa
    DefaultMutableTreeNode sintaxTree;
    DefaultTreeModel sintaxTreeModel;
    DefaultMutableTreeNode nodoActual;

    public DefaultTreeModel createTreeSintax(String name){
        this.sintaxTree = new DefaultMutableTreeNode(name);
        this.sintaxTreeModel = new DefaultTreeModel(sintaxTree);
        this.nodoActual = this.sintaxTree;
        return sintaxTreeModel;
    }
    
    public DefaultMutableTreeNode getTreeSintax(){
        return this.sintaxTree;
    }
    
    public DefaultTreeModel getTreeSintaxModel(){
        return this.sintaxTreeModel;
    }

     public DefaultMutableTreeNode createNodo(String name){
        return new DefaultMutableTreeNode(name);
    }
    
    public void agregarNodo(DefaultMutableTreeNode nodo){
        this.sintaxTree.add(nodo);
    }

    public void insertInicioNodo(DefaultMutableTreeNode nodo){
        this.sintaxTree.insert(nodo,0);
    }
    
    public void setNodoActual(DefaultMutableTreeNode nodo){
        this.nodoActual = nodo;
    }

    public DefaultMutableTreeNode getNodoActual(){
        return this.nodoActual;
    }

    public DefaultMutableTreeNode addAllChildren(DefaultMutableTreeNode father, DefaultMutableTreeNode padrastro){
        for (int i = 0; i < father.getChildCount(); i++) {
            padrastro.add((DefaultMutableTreeNode)father.getChildAt(i));
        }
        return padrastro;
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$ASintaxT$actions {
  private final ASintaxT parser;

  /** Constructor */
  CUP$ASintaxT$actions(ASintaxT parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$ASintaxT$do_action(
    int                        CUP$ASintaxT$act_num,
    java_cup.runtime.lr_parser CUP$ASintaxT$parser,
    java.util.Stack            CUP$ASintaxT$stack,
    int                        CUP$ASintaxT$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ASintaxT$result;

      /* select the action based on the action number */
      switch (CUP$ASintaxT$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // EXPR ::= MOD error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
                String  desc = "Elemento para sacar mod no es válido";
                String mes = parser.errorMessage(desc, parser.getS());
                DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
                RESULT = nodo;
                parser.report_error(mes ,err);
            
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("EXPR",34, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // EXPR ::= OP_MULTI_DIV error 
            {
              Object RESULT =null;
		int mdleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).left;
		int mdright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).right;
		Object md = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).value;
		int errleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
                String  desc = "Elemento para multiplicar/división en la expresión no válida";
                String mes = parser.errorMessage(desc, parser.getS());
                DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
                RESULT = nodo;
                parser.report_error(mes ,err);
            
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("EXPR",34, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // EXPR ::= OP_SUM error 
            {
              Object RESULT =null;
		int suleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).left;
		int suright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).right;
		Object su = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).value;
		int errleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
                String desc = "";
                desc = "Elemento para sumar/restar en la expresión no válida";
                String mes = parser.errorMessage(desc, parser.getS());
                DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
                RESULT = nodo;
                parser.report_error(mes ,err);
            
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("EXPR",34, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // EXPR ::= ID OPEN_SQR_BRACKET N_TO_FOR CLOSE_SQR_BRACKET OPEN_SQR_BRACKET N_TO_FOR CLOSE_SQR_BRACKET 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-6)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-4)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-4)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).value;
		DefaultMutableTreeNode nodo = parser.createNodo(id+"");
                  nodo.add(parser.createNodo(n1+""));
                  nodo.add(parser.createNodo(n2+""));
                  RESULT = nodo;
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("EXPR",34, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-6)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // EXPR ::= ID OPEN_SQR_BRACKET N_TO_FOR CLOSE_SQR_BRACKET 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).value;
		DefaultMutableTreeNode nodo = parser.createNodo(id+"");
                  nodo.add(parser.createNodo(n+""));
                  RESULT = nodo;
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("EXPR",34, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // EXPR ::= ID 
            {
              Object RESULT =null;
		int nlleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int nlright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		String nl = (String)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		DefaultMutableTreeNode nodo = parser.createNodo(nl+"");
                  RESULT = nodo;
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("EXPR",34, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // EXPR ::= NULL 
            {
              Object RESULT =null;
		int nlleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int nlright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object nl = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		DefaultMutableTreeNode nodo = parser.createNodo(nl+"");
                  RESULT = nodo;
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("EXPR",34, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // EXPR ::= CHAR_ELEMENT 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		DefaultMutableTreeNode nodo = parser.createNodo(c+"");
                  RESULT = nodo;
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("EXPR",34, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // EXPR ::= FALSE 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		DefaultMutableTreeNode nodo = parser.createNodo(b+"");
                  RESULT = nodo;
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("EXPR",34, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // EXPR ::= TRUE 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		DefaultMutableTreeNode nodo = parser.createNodo(b+"");
                  RESULT = nodo;
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("EXPR",34, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // EXPR ::= STRING 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		DefaultMutableTreeNode nodo = parser.createNodo(s+"");
                  RESULT = nodo;
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("EXPR",34, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // EXPR ::= NUMBER 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		DefaultMutableTreeNode nodo = parser.createNodo(n+"");
                  RESULT = nodo;
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("EXPR",34, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // EXPR ::= MOD EXPR 
            {
              Object RESULT =null;
		int e2left = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		DefaultMutableTreeNode nodo = parser.createNodo("%");
                  nodo.insert((DefaultMutableTreeNode)e2,0);
                RESULT = nodo;
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("EXPR",34, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // EXPR ::= OPEN_PARENTESIS EXPR_LIST CLOSE_PARENTESIS 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).value;
		 RESULT = e;
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("EXPR",34, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // EXPR ::= OP_MULTI_DIV EXPR 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		DefaultMutableTreeNode nodo = parser.createNodo(o+"");
                  nodo.insert((DefaultMutableTreeNode)e2,0);
                RESULT = nodo;
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("EXPR",34, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // EXPR ::= OP_SUM EXPR 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		DefaultMutableTreeNode nodo = parser.createNodo(o+"");
                  nodo.insert((DefaultMutableTreeNode)e2,0);
                RESULT = nodo;
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("EXPR",34, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // EXPR_LIST ::= OPEN_PARENTESIS error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
                    String desc = "Número de parentesis impares en la expresión";
                    String mes = parser.errorMessage(desc, parser.getS());
                    DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
                    RESULT = nodo;
                    parser.report_error(mes ,err);
                
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("EXPR_LIST",33, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // EXPR_LIST ::= error CLOSE_PARENTESIS 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).value;
		
                    String desc = "Número de parentesis impares en la expresión";
                    String mes = parser.errorMessage(desc, parser.getS());
                    DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
                    RESULT = nodo;
                    parser.report_error(mes ,err);
                
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("EXPR_LIST",33, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // EXPR_LIST ::= EXPR 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		 
                    RESULT = e;
                
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("EXPR_LIST",33, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // EXPR_LIST ::= OPEN_PARENTESIS EXPR_LIST CLOSE_PARENTESIS EXPR_LIST 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
                    ((DefaultMutableTreeNode)e2).insert((DefaultMutableTreeNode)e1,0);
                    RESULT = ((DefaultMutableTreeNode)e2);
                
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("EXPR_LIST",33, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // EXPR_LIST ::= EXPR_LIST EXPR 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		((DefaultMutableTreeNode)e2).insert((DefaultMutableTreeNode)e1,0);
                    RESULT = ((DefaultMutableTreeNode)e2);
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("EXPR_LIST",33, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // N_CIN ::= OPEN_PARENTESIS CIN COLON ID CLOSE_BLOCK error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
        String desc = "Falta PYC";
        String mes = parser.errorMessage(desc, parser.getS());
        DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
        RESULT = nodo;
        parser.report_error(mes ,err);
    
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_CIN",32, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-5)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // N_CIN ::= OPEN_PARENTESIS CIN COLON ID error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
        String desc = "Valores de más. CIN solo llama a una variable o falta :)";
        String mes = parser.errorMessage(desc, parser.getS());
        DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
        RESULT = nodo;
        parser.report_error(mes ,err);
        
    
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_CIN",32, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-4)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // N_CIN ::= OPEN_PARENTESIS CIN COLON error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
        String desc = "Falta varibale en el CIN";
        String mes = parser.errorMessage(desc, parser.getS());
        DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
        RESULT = nodo;
        parser.report_error(mes ,err);
    
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_CIN",32, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // N_CIN ::= OPEN_PARENTESIS CIN error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
        String desc = "Falta \":\" en el CIN";
        String mes = parser.errorMessage(desc, parser.getS());
        DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
        RESULT = nodo;
        parser.report_error(mes ,err);
    
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_CIN",32, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // N_CIN ::= OPEN_PARENTESIS CIN COLON ID CLOSE_BLOCK PYC 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).value;
		
        DefaultMutableTreeNode nodo = parser.createNodo("IN: "+id);
        RESULT = nodo;
    
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_CIN",32, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-5)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // N_PRINT_IMPRESS ::= 
            {
              Object RESULT =null;
		
        DefaultMutableTreeNode nodo = parser.createNodo("");
        RESULT = nodo;
    
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_PRINT_IMPRESS",31, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // N_PRINT_IMPRESS ::= OP_SUM ID OPEN_SQR_BRACKET N_TO_FOR CLOSE_SQR_BRACKET OPEN_SQR_BRACKET N_TO_FOR CLOSE_SQR_BRACKET 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-6)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-4)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-4)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).value;
		DefaultMutableTreeNode nodo = parser.createNodo(id+"");
                  nodo.add(parser.createNodo(n1+""));
                  nodo.add(parser.createNodo(n2+""));
                  RESULT = nodo;
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_PRINT_IMPRESS",31, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-7)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // N_PRINT_IMPRESS ::= OP_SUM ID OPEN_SQR_BRACKET N_TO_FOR CLOSE_SQR_BRACKET 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).value;
		DefaultMutableTreeNode nodo = parser.createNodo(id+"");
                  nodo.add(parser.createNodo(n+""));
                  RESULT = nodo;
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_PRINT_IMPRESS",31, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-4)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // N_PRINT_IMPRESS ::= OP_SUM error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
        String desc = "Falta cierre de PRINT o hay declaraciones no aceptadas\nDatos aceptados: String, chars, variables, números, saltos de linea (ln)";
        String mes = parser.errorMessage(desc, parser.getS());
        DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
        RESULT = nodo;        
        parser.report_error(mes ,err);
    
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_PRINT_IMPRESS",31, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // N_PRINT_IMPRESS ::= OP_SUM NEW_LINE 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).value;
		int nlleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int nlright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object nl = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
        DefaultMutableTreeNode nodo = parser.createNodo(nl+"");
        //((DefultMutableTreeNode)n).add(nodo);
        RESULT = nodo;
    
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_PRINT_IMPRESS",31, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // N_PRINT_IMPRESS ::= N_PRINT_IMPRESS OP_SUM NEW_LINE 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).value;
		int nlleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int nlright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object nl = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
        DefaultMutableTreeNode nodo = parser.createNodo(nl+"");
        ((DefaultMutableTreeNode)e1).add(nodo);
        RESULT = e1;
    
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_PRINT_IMPRESS",31, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // N_PRINT_IMPRESS ::= OP_SUM N_VALOR_VARIABLE 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
        DefaultMutableTreeNode nodo = parser.createNodo(n+"");
        RESULT = nodo;
    
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_PRINT_IMPRESS",31, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // N_PRINT_IMPRESS ::= N_PRINT_IMPRESS OP_SUM N_VALOR_VARIABLE 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
         DefaultMutableTreeNode nodo = parser.createNodo(n+"");
        ((DefaultMutableTreeNode)e1).add(nodo);
        RESULT = e1;
    
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_PRINT_IMPRESS",31, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // N_PRINT ::= OPEN_PARENTESIS PRINT COLON CLOSE_BLOCK PYC 
            {
              Object RESULT =null;
		
        DefaultMutableTreeNode nodo = parser.createNodo("PRINT");
        RESULT = nodo;
    
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_PRINT",30, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-4)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // N_PRINT ::= OPEN_PARENTESIS PRINT COLON NEW_LINE N_PRINT_IMPRESS CLOSE_BLOCK PYC 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).value;
		
        //Código mágico
        ((DefaultMutableTreeNode)n).insert(parser.createNodo(e+""), 0);
        DefaultMutableTreeNode node3 = new DefaultMutableTreeNode(((DefaultMutableTreeNode)n).getUserObject());
        ((DefaultMutableTreeNode)n).insert(node3, 1);
        //cambiar nombre, brutal!!!
        ((DefaultMutableTreeNode)n).setUserObject("PRINT");
        ((DefaultTreeModel) parser.sintaxTreeModel).nodeChanged(((DefaultMutableTreeNode)n));
        RESULT = (DefaultMutableTreeNode)n;
    
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_PRINT",30, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-6)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // N_PRINT ::= OPEN_PARENTESIS PRINT COLON N_TO_FOR N_PRINT_IMPRESS CLOSE_BLOCK PYC 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).value;
		
        //Código mágico
        ((DefaultMutableTreeNode)n).insert(parser.createNodo(e+""), 0);
        DefaultMutableTreeNode node3 = new DefaultMutableTreeNode(((DefaultMutableTreeNode)n).getUserObject());
        ((DefaultMutableTreeNode)n).insert(node3, 1);
        //cambiar nombre, brutal!!!
        ((DefaultMutableTreeNode)n).setUserObject("PRINT");
        ((DefaultTreeModel) parser.sintaxTreeModel).nodeChanged(((DefaultMutableTreeNode)n));
        RESULT = (DefaultMutableTreeNode)n;
    
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_PRINT",30, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-6)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // N_PRINT ::= OPEN_PARENTESIS PRINT COLON STRING N_PRINT_IMPRESS CLOSE_BLOCK PYC 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).value;
		
        //Código mágico
        ((DefaultMutableTreeNode)n).insert(parser.createNodo(e+""), 0);
        DefaultMutableTreeNode node3 = new DefaultMutableTreeNode(((DefaultMutableTreeNode)n).getUserObject());
        ((DefaultMutableTreeNode)n).insert(node3, 1);
        //cambiar nombre, brutal!!!
        ((DefaultMutableTreeNode)n).setUserObject("PRINT");
        ((DefaultTreeModel) parser.sintaxTreeModel).nodeChanged(((DefaultMutableTreeNode)n));
        RESULT = (DefaultMutableTreeNode)n;
    
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_PRINT",30, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-6)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // N_PRINT ::= OPEN_PARENTESIS PRINT COLON N_TO_FOR N_PRINT_IMPRESS CLOSE_BLOCK error 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).value;
		int errleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
        String desc = "Falta PYC en el print";
        String mes = parser.errorMessage(desc, parser.getS());
        DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
        RESULT = nodo;
        parser.report_error(mes ,err);
        
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_PRINT",30, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-6)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // N_PRINT ::= OPEN_PARENTESIS PRINT COLON STRING N_PRINT_IMPRESS CLOSE_BLOCK error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).value;
		int errleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
        String desc = "Falta PYC en el print";
        String mes = parser.errorMessage(desc, parser.getS());
        DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
        RESULT = nodo;
        parser.report_error(mes ,err);
        
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_PRINT",30, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-6)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // N_PRINT ::= OPEN_PARENTESIS PRINT error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
        String desc = "Faltan los \":\" en el print";
        String mes = parser.errorMessage(desc, parser.getS());
        DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
        RESULT = nodo;
        parser.report_error(mes ,err);
        
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_PRINT",30, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // N_ARGUMENTOS ::= ID ID error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
            String desc = "Los ids deben ir separados por coma";
            String mes = parser.errorMessage(desc, parser.getS());
            DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
            RESULT = nodo;
            parser.report_error(mes ,err);
        
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_ARGUMENTOS",29, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // N_ARGUMENTOS ::= ID error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
        String desc = "Falta PYC";
        String mes = parser.errorMessage(desc, parser.getS());
        DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
        RESULT = nodo;
        parser.report_error(mes ,err);
        
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_ARGUMENTOS",29, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // N_ARGUMENTOS ::= ID PYC 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).value;
		
            DefaultMutableTreeNode nodo = parser.createNodo("N_argumentos");
            nodo.add(parser.createNodo(id+""));
            RESULT = nodo;
        
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_ARGUMENTOS",29, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // N_ARGUMENTOS ::= ID COMA N_ARGUMENTOS 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).value;
		int arleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int arright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object ar = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
           ((DefaultMutableTreeNode)ar).add(parser.createNodo(id+""));
           RESULT = ar;
        
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_ARGUMENTOS",29, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // N_BOOLEAN_VALUE ::= error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
        String desc = "Error en el valor booleno, tipo no compatible con Boolean";
        String mes = parser.errorMessage(desc, parser.getS());
        DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
        RESULT = nodo;
        parser.report_error(mes ,err);
        
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_BOOLEAN_VALUE",28, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // N_BOOLEAN_VALUE ::= ID OPEN_PARENTESIS CLOSE_PARENTESIS 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).value;
		
            DefaultMutableTreeNode nodo = parser.createNodo("N_value_boolean");
            nodo.add(parser.createNodo(id+""));
            RESULT = nodo;
        
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_BOOLEAN_VALUE",28, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // N_BOOLEAN_VALUE ::= ID OPEN_PARENTESIS N_ARGUMENTOS CLOSE_PARENTESIS 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)).value;
		int arleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).left;
		int arright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).right;
		Object ar = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).value;
		
            DefaultMutableTreeNode nodo = parser.createNodo("N_value_boolean");
            nodo.add(parser.createNodo(id+""));
            nodo.add((DefaultMutableTreeNode)ar);
            RESULT = nodo;
        
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_BOOLEAN_VALUE",28, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // N_BOOLEAN_VALUE ::= N_SENTENCIA_BOOLEANA_ANIDADA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
            RESULT = e;
        
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_BOOLEAN_VALUE",28, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // N_BOOLEAN_VALUE ::= TRUE 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
            RESULT = parser.createNodo(n + "");
        
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_BOOLEAN_VALUE",28, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // N_BOOLEAN_VALUE ::= FALSE 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
            RESULT = parser.createNodo(n + "");
        
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_BOOLEAN_VALUE",28, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // N_BOOLEAN_ID ::= BOOLEAN ID error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
        String desc = "Falta \":\" en la declacion booleana";
        String mes = parser.errorMessage(desc, parser.getS());
        DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
        RESULT = nodo;
        parser.report_error(mes ,err);
    
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_BOOLEAN_ID",27, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // N_BOOLEAN_ID ::= BOOLEAN error COLON 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).value;
		
        String desc = "Falta el identificador del boolean en la declaracion";
        String mes = parser.errorMessage(desc, parser.getS());
        DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
        RESULT = nodo;
        parser.report_error(mes ,err);
    
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_BOOLEAN_ID",27, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // N_BOOLEAN_ID ::= BOOLEAN ID COLON 
            {
              Object RESULT =null;
		int blleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).left;
		int blright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).right;
		Object bl = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).value;
		
            DefaultMutableTreeNode n=parser.createNodo("DECLR");  
            n.add(parser.createNodo(bl+ ""));
            n.add(parser.createNodo(id + ""));
            RESULT = n;
        
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_BOOLEAN_ID",27, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // N_ARREGLO ::= N_VALOR_VARIABLE error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
        RESULT = parser.createNodo("ERROR");
        String desc = "Estructura del arreglo incompleta";
        String mes = parser.errorMessage(desc, parser.getS());
        //DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
        RESULT = "ERROR";
        parser.report_error(mes ,err);
      
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_ARREGLO",26, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // N_ARREGLO ::= N_VALOR_VARIABLE CLOSE_SQR_BRACKET 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).value;
		
            DefaultMutableTreeNode el=parser.createNodo("ELEMENTS");
            el.add(parser.createNodo(a+""));
            RESULT = el;
        
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_ARREGLO",26, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // N_ARREGLO ::= N_VALOR_VARIABLE COMA N_ARREGLO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
            ((DefaultMutableTreeNode)n).insert((DefaultMutableTreeNode)a,0);
            RESULT = n;
        
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_ARREGLO",26, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // N_MATRIZ ::= error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
        String desc = "Solo se permiten arreglos de dos dimensiones";
        String mes = parser.errorMessage(desc, parser.getS());
        DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
        RESULT = nodo;
        parser.report_error(mes ,err);
        
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_MATRIZ",24, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // N_MATRIZ ::= N_VALOR_VARIABLE 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
        DefaultMutableTreeNode el=parser.createNodo("ELEMENTS");
        el.add(parser.createNodo(n+""));
        RESULT = el;
        
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_MATRIZ",24, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // N_MATRIZ ::= N_VALOR_VARIABLE COMA N_MATRIZ 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
        ((DefaultMutableTreeNode)n).insert((DefaultMutableTreeNode)a,0);
        RESULT = n;
        
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_MATRIZ",24, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // N_MATRIZ ::= OPEN_SQR_BRACKET N_ARREGLO COMA N_MATRIZ 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
        ((DefaultMutableTreeNode)n).insert((DefaultMutableTreeNode)a,0);
        RESULT = n;
        
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_MATRIZ",24, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // N_MATRIZ ::= OPEN_SQR_BRACKET N_ARREGLO 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
        DefaultMutableTreeNode el=parser.createNodo("ELEMENTS");
        el.add((DefaultMutableTreeNode)n);
        RESULT = el;
    
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_MATRIZ",24, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // N_TIPOS_DECLARACION_MATRIZ ::= error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
        String desc = "Solo se permiten Int, boolean y char, id en los arreglos";
        String mes = parser.errorMessage(desc, parser.getS());
        DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
        RESULT = nodo;
        parser.report_error(mes ,err);
    
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_TIPOS_DECLARACION_MATRIZ",25, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // N_TIPOS_DECLARACION_MATRIZ ::= CHAR 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		 RESULT = (parser.createNodo(e+"")); 
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_TIPOS_DECLARACION_MATRIZ",25, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // N_TIPOS_DECLARACION_MATRIZ ::= BOOLEAN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		 RESULT = (parser.createNodo(e+"")); 
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_TIPOS_DECLARACION_MATRIZ",25, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // N_TIPOS_DECLARACION_MATRIZ ::= INTENGER 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		 RESULT = (parser.createNodo(e+"")); 
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_TIPOS_DECLARACION_MATRIZ",25, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // N_VALOR_VARIABLE ::= 
            {
              Object RESULT =null;

              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_VALOR_VARIABLE",23, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // N_VALOR_VARIABLE ::= FALSE 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		 RESULT = (parser.createNodo(e1+"")); 
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_VALOR_VARIABLE",23, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // N_VALOR_VARIABLE ::= TRUE 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		 RESULT = (parser.createNodo(e1+"")); 
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_VALOR_VARIABLE",23, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // N_VALOR_VARIABLE ::= CHAR_ELEMENT 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		 RESULT = (parser.createNodo(e1+"")); 
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_VALOR_VARIABLE",23, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // N_VALOR_VARIABLE ::= NULL 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		 RESULT = (parser.createNodo(e1+"")); 
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_VALOR_VARIABLE",23, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // N_VALOR_VARIABLE ::= STRING 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		 RESULT = (parser.createNodo(e1+"")); 
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_VALOR_VARIABLE",23, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // N_VALOR_VARIABLE ::= ID 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		 RESULT = (parser.createNodo(e1+"")); 
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_VALOR_VARIABLE",23, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // N_VALOR_VARIABLE ::= NUMBER 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		 RESULT = (parser.createNodo(e1+"")); 
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_VALOR_VARIABLE",23, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // N_DECLARACION_ID ::= ID ID error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
        String desc = "los ids deben ir separados por comas";
        String mes = parser.errorMessage(desc, parser.getS());
        DefaultMutableTreeNode nodo = parser.createNodo("DECLR");
        RESULT = nodo;
        parser.report_error(mes ,err);
    
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_DECLARACION_ID",22, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // N_DECLARACION_ID ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
            DefaultMutableTreeNode nodo = parser.createNodo("ids");
            nodo.add(parser.createNodo(id+""));
            RESULT = nodo;
        
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_DECLARACION_ID",22, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // N_DECLARACION_ID ::= ID COMA N_DECLARACION_ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).value;
		int idsleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object ids = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
            ((DefaultMutableTreeNode)ids).insert(parser.createNodo(id+""),0);
            RESULT = ids;
        
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_DECLARACION_ID",22, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // N_DECLARACION ::= CHAR ID error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
        String desc = "Falta \":\" en la asignación del char";
        String mes = parser.errorMessage(desc, parser.getS());
        DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
        RESULT = nodo;
        parser.report_error(mes ,err);
    
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_DECLARACION",21, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // N_DECLARACION ::= CHAR COLON error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
        String desc = "Fala identificador del char";
        String mes = parser.errorMessage(desc, parser.getS());
        DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
        RESULT = nodo;
        parser.report_error(mes ,err);
    
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_DECLARACION",21, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // N_DECLARACION ::= CHAR ID COLON N_CALL_FUNCTION 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
        DefaultMutableTreeNode nodo = parser.createNodo("DECLR");
        nodo.add(parser.createNodo(c+""));
        nodo.add(parser.createNodo(i+""));
        nodo.add((DefaultMutableTreeNode) f);
        RESULT = nodo;
    
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_DECLARACION",21, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // N_DECLARACION ::= ARRAY N_TIPOS_DECLARACION_MATRIZ COLON error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
        String desc = "Falta id del array";
        String mes = parser.errorMessage(desc, parser.getS());
        DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
        RESULT = nodo;
        parser.report_error(mes ,err);
    
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_DECLARACION",21, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // N_DECLARACION ::= ARRAY N_TIPOS_DECLARACION_MATRIZ error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
        String desc = "Falta \":\" en la asignación del array";
        String mes = parser.errorMessage(desc, parser.getS());
        DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
        RESULT = nodo;
        parser.report_error(mes ,err);
    
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_DECLARACION",21, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // N_DECLARACION ::= ARRAY COLON error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
        String desc = "Fala tipo del array";
        String mes = parser.errorMessage(desc, parser.getS());
        DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
        RESULT = nodo;
        parser.report_error(mes ,err);
    
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_DECLARACION",21, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // N_DECLARACION ::= ARRAY N_TIPOS_DECLARACION_MATRIZ ID COLON N_CALL_FUNCTION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
        DefaultMutableTreeNode nodo = parser.createNodo("DECLR");
        nodo.add(parser.createNodo(a+""));
        nodo.add((DefaultMutableTreeNode) t);
        nodo.add(parser.createNodo(id+""));
        nodo.add((DefaultMutableTreeNode) f);
        RESULT = nodo;
    
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_DECLARACION",21, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-4)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // N_DECLARACION ::= MATRIX N_TIPOS_DECLARACION_MATRIZ COLON error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
        String desc = "Falta id de la matriz";
        String mes = parser.errorMessage(desc, parser.getS());
        DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
        RESULT = nodo;
        parser.report_error(mes ,err);
    
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_DECLARACION",21, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // N_DECLARACION ::= MATRIX N_TIPOS_DECLARACION_MATRIZ error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
        String desc = "Falta \":\" en la asignación de la matriz";
        String mes = parser.errorMessage(desc, parser.getS());
        DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
        RESULT = nodo;
        parser.report_error(mes ,err);
    
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_DECLARACION",21, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // N_DECLARACION ::= MATRIX COLON error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
        String desc = "Falta tipo de la matriz";
        String mes = parser.errorMessage(desc, parser.getS());
        DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
        RESULT = nodo;
        parser.report_error(mes ,err);
    
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_DECLARACION",21, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // N_DECLARACION ::= MATRIX N_TIPOS_DECLARACION_MATRIZ ID COLON N_CALL_FUNCTION 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-4)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
        DefaultMutableTreeNode nodo = parser.createNodo("DECLR");
        nodo.add(parser.createNodo(i+""));
        nodo.add((DefaultMutableTreeNode)t);
        nodo.add(parser.createNodo(id+""));
        nodo.add((DefaultMutableTreeNode)f);
        RESULT = nodo;
    
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_DECLARACION",21, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-4)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // N_DECLARACION ::= INTENGER ID error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
        String desc = "Falta \":\" en la asignación del int";
        String mes = parser.errorMessage(desc, parser.getS());
        DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
        RESULT = nodo;
        parser.report_error(mes ,err);
    
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_DECLARACION",21, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // N_DECLARACION ::= INTENGER COLON error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
        String desc = "Falta identificador del int";
        String mes = parser.errorMessage(desc, parser.getS());
        DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
        RESULT = nodo;
        parser.report_error(mes ,err);
    
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_DECLARACION",21, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // N_DECLARACION ::= INTENGER ID COLON N_CALL_FUNCTION 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
        DefaultMutableTreeNode nodo = parser.createNodo("DECLR");
        nodo.add(parser.createNodo(e1+""));
        nodo.add(parser.createNodo(e2+""));
        nodo.add((DefaultMutableTreeNode)e3);
        RESULT = nodo;
    
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_DECLARACION",21, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // N_DECLARACION ::= ID COLON N_CALL_FUNCTION 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
        DefaultMutableTreeNode nodo = parser.createNodo("ASSIGN");
        nodo.add(parser.createNodo(e1+""));
        nodo.add((DefaultMutableTreeNode)e2);
        RESULT = nodo;
    
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_DECLARACION",21, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // N_DECLARACION ::= MATRIX N_TIPOS_DECLARACION_MATRIZ ID COLON OPEN_SQR_BRACKET N_MATRIZ CLOSE_SQR_BRACKET 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-6)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-6)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-5)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-4)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).value;
		
        DefaultMutableTreeNode nodo = parser.createNodo("DECLR MATRIX");
        nodo.add(parser.createNodo(i+""));
        nodo.add((DefaultMutableTreeNode)t);
        nodo.add(parser.createNodo(id+""));
        nodo.add((DefaultMutableTreeNode)m);
        RESULT = nodo;
         /*((DefaultMutableTreeNode)n).insert(parser.createNodo(i+""),0);
        ((DefaultMutableTreeNode)n).setUserObject("FOR");
        ((DefaultTreeModel) parser.sintaxTreeModel).nodeChanged(((DefaultMutableTreeNode)n));
        RESULT = (DefaultMutableTreeNode)n;*/
    
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_DECLARACION",21, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-6)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // N_DECLARACION ::= MATRIX OPEN_SQR_BRACKET N_TO_FOR CLOSE_SQR_BRACKET OPEN_SQR_BRACKET N_TO_FOR CLOSE_SQR_BRACKET N_TIPOS_DECLARACION_MATRIZ ID 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-8)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-8)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-8)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-6)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-6)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-6)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
        DefaultMutableTreeNode nodo = parser.createNodo("DECLR MATRIX EMPTY");
        DefaultMutableTreeNode mt = parser.createNodo(i+"");
        mt.add(parser.createNodo(n1+""));
        mt.add(parser.createNodo(n2+""));
        nodo.add(mt);
        nodo.add((DefaultMutableTreeNode)t);
        nodo.add(parser.createNodo(id+""));
        RESULT = nodo;
    
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_DECLARACION",21, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-8)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // N_DECLARACION ::= ID OPEN_SQR_BRACKET N_TO_FOR CLOSE_SQR_BRACKET OPEN_SQR_BRACKET N_TO_FOR CLOSE_SQR_BRACKET COLON N_SENTENCIA_BOOLEANA_ANIDADA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-8)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-8)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-6)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-6)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-6)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
            DefaultMutableTreeNode nodo = parser.createNodo("ASSIGN MATRIX");
            DefaultMutableTreeNode mt = parser.createNodo(id+"");
            mt.add(parser.createNodo(n1+""));
            mt.add(parser.createNodo(n2+""));
            nodo.add(mt);
            nodo.add((DefaultMutableTreeNode) ex);
            RESULT = nodo;
        
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_DECLARACION",21, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-8)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // N_DECLARACION ::= ID OPEN_SQR_BRACKET N_TO_FOR CLOSE_SQR_BRACKET OPEN_SQR_BRACKET N_TO_FOR CLOSE_SQR_BRACKET COLON EXPR_LIST 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-8)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-8)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-6)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-6)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-6)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
            DefaultMutableTreeNode nodo = parser.createNodo("ASSIGN MATRIX");
            DefaultMutableTreeNode mt = parser.createNodo(id+"");
            mt.add(parser.createNodo(n1+""));
            mt.add(parser.createNodo(n2+""));
            nodo.add(mt);
            nodo.add((DefaultMutableTreeNode) ex);
            RESULT = nodo;
        
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_DECLARACION",21, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-8)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // N_DECLARACION ::= ARRAY N_TIPOS_DECLARACION_MATRIZ ID COLON OPEN_SQR_BRACKET N_ARREGLO 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-4)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)).value;
		int arleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int arright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object ar = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
        DefaultMutableTreeNode nodo = parser.createNodo("DECLR ARRAY");
        DefaultMutableTreeNode arr=parser.createNodo(i+"");
        arr.add(parser.createNodo(""+((DefaultMutableTreeNode)ar).getChildCount()));
        nodo.add(arr);
        nodo.add((DefaultMutableTreeNode)t);
        nodo.add(parser.createNodo(id+""));
        nodo.add((DefaultMutableTreeNode)ar);
        RESULT = nodo;
    
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_DECLARACION",21, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-5)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // N_DECLARACION ::= ARRAY OPEN_SQR_BRACKET N_TO_FOR CLOSE_SQR_BRACKET N_TIPOS_DECLARACION_MATRIZ ID 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-5)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
        DefaultMutableTreeNode nodo = parser.createNodo("DECLR ARRAY EMPTY");
        DefaultMutableTreeNode ar = parser.createNodo(i+"");
        ar.add(parser.createNodo(n1+""));
        nodo.add(ar);
        nodo.add((DefaultMutableTreeNode)t);
        nodo.add(parser.createNodo(id+""));
        RESULT = nodo;
    
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_DECLARACION",21, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-5)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // N_DECLARACION ::= ID OPEN_SQR_BRACKET N_TO_FOR CLOSE_SQR_BRACKET COLON N_SENTENCIA_BOOLEANA_ANIDADA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-5)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
            DefaultMutableTreeNode nodo = parser.createNodo("ASSIGN ARRAY");
            DefaultMutableTreeNode mt = parser.createNodo(id+"");
            mt.add(parser.createNodo(n1+""));
            nodo.add(mt);
            nodo.add((DefaultMutableTreeNode) ex);
            RESULT = nodo;
        
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_DECLARACION",21, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-5)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // N_DECLARACION ::= ID OPEN_SQR_BRACKET N_TO_FOR CLOSE_SQR_BRACKET COLON EXPR_LIST 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-5)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
            DefaultMutableTreeNode nodo = parser.createNodo("ASSIGN ARRAY");
            DefaultMutableTreeNode mt = parser.createNodo(id+"");
            mt.add(parser.createNodo(n1+""));
            nodo.add(mt);
            nodo.add((DefaultMutableTreeNode) ex);
            RESULT = nodo;
        
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_DECLARACION",21, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-5)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // N_DECLARACION ::= CHAR ID COLON CHAR_ELEMENT 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).value;
		int chleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int chright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object ch = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
        DefaultMutableTreeNode nodo = parser.createNodo("DECLR");
        nodo.add(parser.createNodo(i+""));
        nodo.add(parser.createNodo(id+""));
        nodo.add(parser.createNodo(ch+""));
        RESULT = nodo;
    
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_DECLARACION",21, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // N_DECLARACION ::= N_BOOLEAN_ID N_BOOLEAN_VALUE 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).value;
		int valeft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int varight = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object va = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
        ((DefaultMutableTreeNode)id).add((DefaultMutableTreeNode) va);
        RESULT = id;
    
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_DECLARACION",21, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // N_DECLARACION ::= INTENGER ID COLON EXPR_LIST 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
        DefaultMutableTreeNode nodo = parser.createNodo("DECLR");
        nodo.add(parser.createNodo(i+""));
        nodo.add(parser.createNodo(id+""));
        nodo.add((DefaultMutableTreeNode) ex);
        RESULT = nodo;
    
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_DECLARACION",21, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // N_DECLARACION ::= CHAR N_DECLARACION_ID 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
        ((DefaultMutableTreeNode)n).insert(parser.createNodo(i+""), 0);
        ((DefaultMutableTreeNode)n).setUserObject("DECLR NEST/NO_VAL");
        ((DefaultTreeModel) parser.sintaxTreeModel).nodeChanged(((DefaultMutableTreeNode)n));
        RESULT = (DefaultMutableTreeNode)n;
    
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_DECLARACION",21, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // N_DECLARACION ::= BOOLEAN N_DECLARACION_ID 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
        ((DefaultMutableTreeNode)n).insert(parser.createNodo(i+""), 0);
        ((DefaultMutableTreeNode)n).setUserObject("DECLR NEST/NO_VAL");
        ((DefaultTreeModel) parser.sintaxTreeModel).nodeChanged(((DefaultMutableTreeNode)n));
        RESULT = (DefaultMutableTreeNode)n;
    
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_DECLARACION",21, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // N_DECLARACION ::= INTENGER N_DECLARACION_ID 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
        ((DefaultMutableTreeNode)n).insert(parser.createNodo(i+""), 0);
        ((DefaultMutableTreeNode)n).setUserObject("DECLR NEST/NO_VAL");
        ((DefaultTreeModel) parser.sintaxTreeModel).nodeChanged(((DefaultMutableTreeNode)n));
        RESULT = (DefaultMutableTreeNode)n;

        /*DefaultMutableTreeNode nodo = parser.createNodo("Declaración Anidada");
        nodo.add(parser.createNodo(i+""));
        nodo.add((DefaultMutableTreeNode) de);
        RESULT = nodo;*/
    
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_DECLARACION",21, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // N_DECLARACION ::= ID COLON EXPR_LIST 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
        DefaultMutableTreeNode nodo = parser.createNodo("ASSIGN");
        nodo.add(parser.createNodo(id+""));
        nodo.add((DefaultMutableTreeNode) ex);
        RESULT = nodo;
    
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_DECLARACION",21, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // N_DECLARACION ::= ID COLON N_SENTENCIA_BOOLEANA_ANIDADA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).value;
		int bnleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int bnright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object bn = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
        DefaultMutableTreeNode nodo = parser.createNodo("ASSIGN");
        nodo.add(parser.createNodo(id+""));
        nodo.add((DefaultMutableTreeNode) bn);
        RESULT = nodo;
    
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_DECLARACION",21, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // N_SENTENCIA_BOOLEANA_SWITCH ::= error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
        String desc = "Error en sentencia booleana del switch: falta identificador u operador relacional";
        String mes = parser.errorMessage(desc, parser.getS());
        DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
        RESULT = nodo;
        parser.report_error(mes ,err);
    
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA_SWITCH",15, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // N_SENTENCIA_BOOLEANA_SWITCH ::= NUMBER 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Integer f = (Integer)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
            DefaultMutableTreeNode nodo = parser.createNodo(f+"");
            RESULT = nodo;
        
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA_SWITCH",15, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // N_SENTENCIA_BOOLEANA_SWITCH ::= CHAR_ELEMENT 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
            DefaultMutableTreeNode nodo = parser.createNodo(f+"");
            RESULT = nodo;
        
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA_SWITCH",15, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // N_SENTENCIA_BOOLEANA_SWITCH ::= FALSE 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
            DefaultMutableTreeNode nodo = parser.createNodo(f+"");
            RESULT = nodo;
        
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA_SWITCH",15, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // N_SENTENCIA_BOOLEANA_SWITCH ::= TRUE 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
            DefaultMutableTreeNode nodo = parser.createNodo(t+"");
            RESULT = nodo;
        
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA_SWITCH",15, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // N_SENTENCIA_BOOLEANA_SWITCH ::= NUMBER BETWEEN ID 
            {
              Object RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).right;
		Integer id1 = (Integer)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
            DefaultMutableTreeNode nodo = parser.createNodo(b+"");
            nodo.add(parser.createNodo(id1+""));
            nodo.add(parser.createNodo(id2+""));
            RESULT = nodo;
        
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA_SWITCH",15, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // N_SENTENCIA_BOOLEANA_SWITCH ::= ID BETWEEN NUMBER 
            {
              Object RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Integer id2 = (Integer)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
            DefaultMutableTreeNode nodo = parser.createNodo(b+"");
            nodo.add(parser.createNodo(id1+""));
            nodo.add(parser.createNodo(id2+""));
            RESULT = nodo;
        
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA_SWITCH",15, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // N_SENTENCIA_BOOLEANA_SWITCH ::= ID BETWEEN ID 
            {
              Object RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
            DefaultMutableTreeNode nodo = parser.createNodo(b+"");
            nodo.add(parser.createNodo(id1+""));
            nodo.add(parser.createNodo(id2+""));
            RESULT = nodo;
        
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA_SWITCH",15, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // N_SENTENCIA_BOOLEANA_SWITCH ::= NUMBER BETWEEN NUMBER 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).right;
		Integer n1 = (Integer)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Integer n2 = (Integer)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
            DefaultMutableTreeNode nodo = parser.createNodo(b+"");
            nodo.add(parser.createNodo(n1+""));
            nodo.add(parser.createNodo(n2+""));
            RESULT = nodo;
        
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA_SWITCH",15, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // N_SENTENCIA_BOOLEANA_SWITCH ::= NUMBER OP_REL 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
            DefaultMutableTreeNode nodo = parser.createNodo(op+"");
            nodo.add(parser.createNodo(n+""));
            RESULT = nodo;
        
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA_SWITCH",15, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // N_SENTENCIA_BOOLEANA_SWITCH ::= OP_REL TRUE 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
            DefaultMutableTreeNode nodo = parser.createNodo(op+"");
            nodo.add(parser.createNodo(t+""));
            RESULT = nodo;
        
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA_SWITCH",15, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // N_SENTENCIA_BOOLEANA_SWITCH ::= OP_REL FALSE 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
            DefaultMutableTreeNode nodo = parser.createNodo(op+"");
            nodo.add(parser.createNodo(f+""));
            RESULT = nodo;
        
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA_SWITCH",15, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // N_SENTENCIA_BOOLEANA_SWITCH ::= OP_REL NUMBER 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
            DefaultMutableTreeNode nodo = parser.createNodo(op+"");
            nodo.add(parser.createNodo(n+""));
            RESULT = nodo;
        
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA_SWITCH",15, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // N_SENTENCIA_BOOLEANA_SWITCH ::= OP_REL STRING 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
            DefaultMutableTreeNode nodo = parser.createNodo(op+"");
            nodo.add(parser.createNodo(s+""));
            RESULT = nodo;
        
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA_SWITCH",15, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // N_SENTENCIA_BOOLEANA_SWITCH ::= STRING OP_REL 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
            DefaultMutableTreeNode nodo = parser.createNodo(op+"");
            nodo.add(parser.createNodo(s+""));
            RESULT = nodo;
        
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA_SWITCH",15, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // N_SENTENCIA_BOOLEANA_SWITCH ::= OP_REL ID 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
            DefaultMutableTreeNode nodo = parser.createNodo(op+"");
            nodo.add(parser.createNodo(id+""));
            RESULT = nodo;
        
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA_SWITCH",15, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // N_SENTENCIA_BOOLEANA_SWITCH ::= ID OP_REL 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
            DefaultMutableTreeNode nodo = parser.createNodo(op+"");
            nodo.add(parser.createNodo(id+""));
            RESULT = nodo;
        
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA_SWITCH",15, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // N_SENTENCIA_BOOLEANA ::= OP_REL error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
            String desc = "Error en sentencia booleana por derecha";
            String mes = parser.errorMessage(desc, parser.getS());
            DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
            RESULT = nodo;
            parser.report_error(mes ,err);
        
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA",19, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // N_SENTENCIA_BOOLEANA ::= error OP_REL 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).value;
		
            String desc = "Error en sentencia booleana por izquierda";
            String mes = parser.errorMessage(desc, parser.getS());
            DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
            RESULT = nodo;
            parser.report_error(mes ,err);
        
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA",19, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // N_SENTENCIA_BOOLEANA ::= FALSE OP_REL TRUE 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
            DefaultMutableTreeNode nodo = parser.createNodo(op+"");
            nodo.add(parser.createNodo(f+""));
            nodo.add(parser.createNodo(t+""));
            RESULT = nodo;
        
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA",19, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // N_SENTENCIA_BOOLEANA ::= FALSE OP_REL FALSE 
            {
              Object RESULT =null;
		int f1left = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).right;
		Object f1 = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).value;
		int f2left = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int f2right = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object f2 = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
            DefaultMutableTreeNode nodo = parser.createNodo(op+"");
            nodo.add(parser.createNodo(f1+""));
            nodo.add(parser.createNodo(f2+""));
            RESULT = nodo;
        
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA",19, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // N_SENTENCIA_BOOLEANA ::= TRUE OP_REL TRUE 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
            DefaultMutableTreeNode nodo = parser.createNodo(op+"");
            nodo.add(parser.createNodo(t1+""));
            nodo.add(parser.createNodo(t2+""));
            RESULT = nodo;
        
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA",19, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // N_SENTENCIA_BOOLEANA ::= TRUE OP_REL FALSE 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
            DefaultMutableTreeNode nodo = parser.createNodo(op+"");
            nodo.add(parser.createNodo(t+""));
            nodo.add(parser.createNodo(f+""));
            RESULT = nodo;
        
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA",19, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // N_SENTENCIA_BOOLEANA ::= TRUE OP_REL STRING 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
            DefaultMutableTreeNode nodo = parser.createNodo(op+"");
            nodo.add(parser.createNodo(t+""));
            nodo.add(parser.createNodo(s+""));
            RESULT = nodo;
        
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA",19, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // N_SENTENCIA_BOOLEANA ::= FALSE OP_REL STRING 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
            DefaultMutableTreeNode nodo = parser.createNodo(op+"");
            nodo.add(parser.createNodo(f+""));
            nodo.add(parser.createNodo(s+""));
            RESULT = nodo;
        
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA",19, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // N_SENTENCIA_BOOLEANA ::= STRING OP_REL TRUE 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
            DefaultMutableTreeNode nodo = parser.createNodo(op+"");
            nodo.add(parser.createNodo(t+""));
            nodo.add(parser.createNodo(s+""));
            RESULT = nodo;
        
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA",19, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // N_SENTENCIA_BOOLEANA ::= STRING OP_REL FALSE 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
            DefaultMutableTreeNode nodo = parser.createNodo(op+"");
            nodo.add(parser.createNodo(s+""));
            nodo.add(parser.createNodo(f+""));
            RESULT = nodo;
        
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA",19, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // N_SENTENCIA_BOOLEANA ::= STRING OP_REL STRING 
            {
              Object RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).right;
		Object s1 = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object s2 = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
            DefaultMutableTreeNode nodo = parser.createNodo(op+"");
            nodo.add(parser.createNodo(s1+""));
            nodo.add(parser.createNodo(s2+""));
            RESULT = nodo;
        
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA",19, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // N_SENTENCIA_BOOLEANA ::= TRUE OP_REL NUMBER 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
            DefaultMutableTreeNode nodo = parser.createNodo(op+"");
            nodo.add(parser.createNodo(t+""));
            nodo.add(parser.createNodo(n+""));
            RESULT = nodo;
        
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA",19, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // N_SENTENCIA_BOOLEANA ::= FALSE OP_REL NUMBER 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
            DefaultMutableTreeNode nodo = parser.createNodo(op+"");
            nodo.add(parser.createNodo(f+""));
            nodo.add(parser.createNodo(n+""));
            RESULT = nodo;
        
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA",19, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // N_SENTENCIA_BOOLEANA ::= STRING OP_REL NUMBER 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
            DefaultMutableTreeNode nodo = parser.createNodo(op+"");
            nodo.add(parser.createNodo(n+""));
            nodo.add(parser.createNodo(s+""));
            RESULT = nodo;
        
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA",19, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // N_SENTENCIA_BOOLEANA ::= NUMBER OP_REL TRUE 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
            DefaultMutableTreeNode nodo = parser.createNodo(op+"");
            nodo.add(parser.createNodo(n+""));
            nodo.add(parser.createNodo(t+""));
            RESULT = nodo;
        
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA",19, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // N_SENTENCIA_BOOLEANA ::= NUMBER OP_REL FALSE 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
            DefaultMutableTreeNode nodo = parser.createNodo(op+"");
            nodo.add(parser.createNodo(n+""));
            nodo.add(parser.createNodo(f+""));
            RESULT = nodo;
        
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA",19, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // N_SENTENCIA_BOOLEANA ::= NUMBER OP_REL STRING 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
            DefaultMutableTreeNode nodo = parser.createNodo(op+"");
            nodo.add(parser.createNodo(n+""));
            nodo.add(parser.createNodo(s+""));
            RESULT = nodo;
        
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA",19, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // N_SENTENCIA_BOOLEANA ::= NUMBER OP_REL error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
            String desc = "Operando derecho con número no válido";
            String mes = parser.errorMessage(desc, parser.getS());
            DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
            RESULT = nodo;
            parser.report_error(mes ,err);
        
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA",19, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // N_SENTENCIA_BOOLEANA ::= NUMBER OP_REL NUMBER 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).right;
		Integer n1 = (Integer)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Integer n2 = (Integer)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
            DefaultMutableTreeNode nodo = parser.createNodo(op+"");
            nodo.add(parser.createNodo(n1+""));
            nodo.add(parser.createNodo(n2+""));
            RESULT = nodo;
        
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA",19, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // N_SENTENCIA_BOOLEANA ::= TRUE OP_REL error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
            String desc = "Operando derecho con true no válido";
            String mes = parser.errorMessage(desc, parser.getS());
            DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
            RESULT = nodo;
            parser.report_error(mes ,err);
        
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA",19, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // N_SENTENCIA_BOOLEANA ::= TRUE OP_REL ID 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
            DefaultMutableTreeNode nodo = parser.createNodo(op+"");
            nodo.add(parser.createNodo(id+""));
            nodo.add(parser.createNodo(t+""));
            RESULT = nodo;
        
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA",19, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // N_SENTENCIA_BOOLEANA ::= FALSE OP_REL error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
            String desc = "Operando derecho con false no válido";
            String mes = parser.errorMessage(desc, parser.getS());
            DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
            RESULT = nodo;
            parser.report_error(mes ,err);
        
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA",19, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // N_SENTENCIA_BOOLEANA ::= FALSE OP_REL ID 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
            DefaultMutableTreeNode nodo = parser.createNodo(op+"");
            nodo.add(parser.createNodo(id+""));
            nodo.add(parser.createNodo(f+""));
            RESULT = nodo;
        
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA",19, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // N_SENTENCIA_BOOLEANA ::= STRING OP_REL error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
            String desc = "Operando derecho con String no valido";
            String mes = parser.errorMessage(desc, parser.getS());
            DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
            RESULT = nodo;
            parser.report_error(mes ,err);
        
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA",19, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // N_SENTENCIA_BOOLEANA ::= STRING OP_REL ID 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
            DefaultMutableTreeNode nodo = parser.createNodo(op+"");
            nodo.add(parser.createNodo(id+""));
            nodo.add(parser.createNodo(s+""));
            RESULT = nodo;
        
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA",19, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // N_SENTENCIA_BOOLEANA ::= NUMBER OP_REL ID 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
            DefaultMutableTreeNode nodo = parser.createNodo(op+"");
            nodo.add(parser.createNodo(id+""));
            nodo.add(parser.createNodo(n+""));
            RESULT = nodo;
        
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA",19, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // N_SENTENCIA_BOOLEANA ::= ID OP_REL EXPR_LIST 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
            DefaultMutableTreeNode nodo = parser.createNodo(op+"");
            nodo.add(parser.createNodo(id+""));
            //nodo.add(parser.createNodo(n+""));
            nodo.add((DefaultMutableTreeNode)n);
            RESULT = nodo;
        
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA",19, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // N_AND_OR ::= CON_OR N_SENTENCIA_BOOLEANA_ANIDADA 
            {
              Object RESULT =null;
		int ndleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).left;
		int ndright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).right;
		Object nd = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).value;
		int blleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int blright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object bl = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
            DefaultMutableTreeNode nodo = parser.createNodo("OR");
            nodo.add((DefaultMutableTreeNode)bl);
            RESULT = nodo;
        
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_AND_OR",20, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // N_AND_OR ::= CON_AND N_SENTENCIA_BOOLEANA_ANIDADA 
            {
              Object RESULT =null;
		int ndleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).left;
		int ndright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).right;
		Object nd = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).value;
		int blleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int blright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object bl = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
            DefaultMutableTreeNode nodo = parser.createNodo("AND");
            nodo.add((DefaultMutableTreeNode)bl);
            RESULT = nodo;
        
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_AND_OR",20, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // N_SENTENCIA_BOOLEANA_ANIDADA ::= error OPEN_PARENTESIS CLOSE_PARENTESIS 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).value;
		
            String desc = "Parentesis vacios en sentencia booleana";
            String mes = parser.errorMessage(desc, parser.getS());
            DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
            RESULT = nodo;
            parser.report_error(mes ,err);
    
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA_ANIDADA",18, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // N_SENTENCIA_BOOLEANA_ANIDADA ::= OPEN_PARENTESIS CLOSE_PARENTESIS error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
            String desc = "Parentesis vacios en sentencia booleana";
            String mes = parser.errorMessage(desc, parser.getS());
            DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
            RESULT = nodo;
            parser.report_error(mes ,err);
    
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA_ANIDADA",18, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // N_SENTENCIA_BOOLEANA_ANIDADA ::= OPEN_PARENTESIS N_SENTENCIA_BOOLEANA_ANIDADA CLOSE_PARENTESIS 
            {
              Object RESULT =null;
		int blleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).left;
		int blright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).right;
		Object bl = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).value;
		
            RESULT = bl;
        
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA_ANIDADA",18, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // N_SENTENCIA_BOOLEANA_ANIDADA ::= OPEN_PARENTESIS N_SENTENCIA_BOOLEANA_ANIDADA CLOSE_PARENTESIS N_AND_OR 
            {
              Object RESULT =null;
		int blleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).left;
		int blright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).right;
		Object bl = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).value;
		int ndleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int ndright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object nd = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
            ((DefaultMutableTreeNode)nd).insert((DefaultMutableTreeNode)bl,0);
            RESULT = nd;
        
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA_ANIDADA",18, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // N_SENTENCIA_BOOLEANA_ANIDADA ::= N_SENTENCIA_BOOLEANA 
            {
              Object RESULT =null;
		int blleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int blright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object bl = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
            RESULT = bl;
        
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA_ANIDADA",18, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // N_SENTENCIA_BOOLEANA_ANIDADA ::= N_SENTENCIA_BOOLEANA N_AND_OR 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
            ((DefaultMutableTreeNode)e2).insert((DefaultMutableTreeNode)e1,0); 
            RESULT = e2;
        
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA_ANIDADA",18, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // N_CALL_FUNCTION_PARAMETROS ::= N_VALOR_VARIABLE COMA error 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).value;
		int errleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
        String desc = "Coma de más o falta valor en parametros de funcion";
        String mes = parser.errorMessage(desc, parser.getS());
        DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
        RESULT = nodo;
        parser.report_error(mes ,err);
    
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_CALL_FUNCTION_PARAMETROS",17, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // N_CALL_FUNCTION_PARAMETROS ::= N_VALOR_VARIABLE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
            DefaultMutableTreeNode nodo = parser.createNodo("PARAMETERS");
            nodo.add((DefaultMutableTreeNode)e);
            RESULT = nodo;
        
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_CALL_FUNCTION_PARAMETROS",17, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // N_CALL_FUNCTION_PARAMETROS ::= N_VALOR_VARIABLE COMA N_CALL_FUNCTION_PARAMETROS 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
            ((DefaultMutableTreeNode)e).add((DefaultMutableTreeNode)e1);
            RESULT = e;
        
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_CALL_FUNCTION_PARAMETROS",17, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // N_CALL_FUNCTION ::= ID OPEN_PARENTESIS error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
        String desc = "Falta cerrar parentesis en llamado de función";
        String mes = parser.errorMessage(desc, parser.getS());
        DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
        RESULT = nodo;
        parser.report_error(mes ,err);
    
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_CALL_FUNCTION",16, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // N_CALL_FUNCTION ::= ID error OPEN_PARENTESIS 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).value;
		
        String desc = "Falta el el identificador de la funcion";
        String mes = parser.errorMessage(desc, parser.getS());
        DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
        RESULT = nodo;
        parser.report_error(mes ,err);
    
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_CALL_FUNCTION",16, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // N_CALL_FUNCTION ::= ID OPEN_PARENTESIS CLOSE_PARENTESIS 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).value;
		
            DefaultMutableTreeNode node = parser.createNodo(id+":fun");
            RESULT = node;
        
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_CALL_FUNCTION",16, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // N_CALL_FUNCTION ::= ID OPEN_PARENTESIS N_CALL_FUNCTION_PARAMETROS CLOSE_PARENTESIS 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).value;
		
            ((DefaultMutableTreeNode)n).setUserObject(id+":fun");
            ((DefaultTreeModel) parser.sintaxTreeModel).nodeChanged(((DefaultMutableTreeNode)n));
            RESULT = (DefaultMutableTreeNode)n;

            /*DefaultMutableTreeNode node = parser.createNodo(id+":fun");
            node.add((DefaultMutableTreeNode) p);
            RESULT = node;*/
        
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_CALL_FUNCTION",16, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // N_SWITCH_CASE ::= OPEN_PARENTESIS error OPEN_PARENTESIS COLON N_SENTENCIA N_SWITCH_CASE 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-4)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-4)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-4)).value;
		int swleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int swright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object sw = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
       String desc = "Falta cerrar parentesis en el case del switch";
       String mes = parser.errorMessage(desc, parser.getS());
       DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
       RESULT = nodo;
       parser.report_error(mes ,err);
       
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_SWITCH_CASE",14, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-5)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // N_SWITCH_CASE ::= OPEN_PARENTESIS error COLON N_SENTENCIA N_SWITCH_CASE 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)).value;
		int swleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int swright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object sw = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
                String desc = "Falta cerrar parentesis en el case del switch";
                String mes = parser.errorMessage(desc, parser.getS());
                DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
                RESULT = nodo;
                parser.report_error(mes ,err);
            
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_SWITCH_CASE",14, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-4)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // N_SWITCH_CASE ::= OPEN_PARENTESIS ELSE CLOSE_PARENTESIS COLON 
            {
              Object RESULT =null;
		
        //System.out.printtln("ELSE");
        DefaultMutableTreeNode nodo = parser.createNodo("ELSE empy");
        RESULT = nodo;
    
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_SWITCH_CASE",14, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // N_SWITCH_CASE ::= OPEN_PARENTESIS ELSE CLOSE_PARENTESIS COLON N_SENTENCIA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
        //System.out.printtln("ELSE");
        DefaultMutableTreeNode nodo = parser.createNodo("CASES");
        //nodo.add(parser.createNodo(id+""));
        nodo.add((DefaultMutableTreeNode)e);
        ((DefaultMutableTreeNode)e).setUserObject("ELSE");
        ((DefaultTreeModel) parser.sintaxTreeModel).nodeChanged(((DefaultMutableTreeNode)e));
        RESULT = nodo;
    
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_SWITCH_CASE",14, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-4)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // N_SWITCH_CASE ::= OPEN_PARENTESIS N_SENTENCIA_BOOLEANA_SWITCH CLOSE_PARENTESIS COLON N_SWITCH_CASE 
            {
              Object RESULT =null;
		int bnleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)).left;
		int bnright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)).right;
		Object bn = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)).value;
		
        //System.out.printtln("N_SWITCH_CASE");
        DefaultMutableTreeNode nodo = parser.createNodo("SWITCH_CASE empy");
        nodo.add((DefaultMutableTreeNode)bn);
        RESULT = nodo;
    
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_SWITCH_CASE",14, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-4)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // N_SWITCH_CASE ::= OPEN_PARENTESIS N_SENTENCIA_BOOLEANA_SWITCH CLOSE_PARENTESIS COLON N_SENTENCIA N_SWITCH_CASE 
            {
              Object RESULT =null;
		int bnleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-4)).left;
		int bnright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-4)).right;
		Object bn = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).value;
		int swleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int swright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object sw = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
        //System.out.printtln("N_SWITCH_CASE");
        DefaultMutableTreeNode nodo = parser.createNodo("SWITCH_CASE");
        nodo.add((DefaultMutableTreeNode)bn);
        nodo.add((DefaultMutableTreeNode)e);
        ((DefaultMutableTreeNode)sw).insert(nodo,0);
        ((DefaultMutableTreeNode)e).setUserObject("SENTENCES");
        ((DefaultTreeModel) parser.sintaxTreeModel).nodeChanged(((DefaultMutableTreeNode)e));
        RESULT = sw;
    
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_SWITCH_CASE",14, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-5)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // N_SWITCH ::= OPEN_PARENTESIS ID CLOSE_PARENTESIS OPEN_PARENTESIS IF_SWITCH COLON N_SWITCH_CASE CLOSE_BLOCK 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-6)).value;
		int swleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).left;
		int swright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).right;
		Object sw = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).value;
		
        //System.out.printtln("SWITCH");
        DefaultMutableTreeNode nodo = parser.createNodo("SWITCH");
        nodo.add(parser.createNodo(id+""));
        nodo.add((DefaultMutableTreeNode)sw);
        RESULT = nodo;
    
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_SWITCH",13, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-7)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // N_ELSE_IF ::= 
            {
              Object RESULT =null;
		RESULT = parser.createNodo("");
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_ELSE_IF",12, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // N_ELSE_IF ::= OPEN_PARENTESIS ELSE CLOSE_PARENTESIS COLON 
            {
              Object RESULT =null;
		
        //System.out.printtln("ELSE");
        DefaultMutableTreeNode nodo = parser.createNodo("ELSE empy");
        RESULT = nodo;
    
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_ELSE_IF",12, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // N_ELSE_IF ::= OPEN_PARENTESIS ELSE CLOSE_PARENTESIS COLON N_SENTENCIA 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
        DefaultMutableTreeNode nodo = parser.createNodo("ELSE_IFS");
        ((DefaultMutableTreeNode)n).setUserObject("ELSE");
        ((DefaultTreeModel) parser.sintaxTreeModel).nodeChanged(((DefaultMutableTreeNode)n));
        nodo.add((DefaultMutableTreeNode)n);
        RESULT = nodo;
    
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_ELSE_IF",12, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-4)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // N_ELSE_IF ::= OPEN_PARENTESIS N_SENTENCIA_BOOLEANA_ANIDADA CLOSE_PARENTESIS COLON N_ELSE_IF 
            {
              Object RESULT =null;
		int bnleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)).left;
		int bnright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)).right;
		Object bn = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)).value;
		int swleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int swright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object sw = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
        DefaultMutableTreeNode nodo = parser.createNodo("N_ELSE_IF empy");
        nodo.add((DefaultMutableTreeNode)bn);
        ((DefaultMutableTreeNode)sw).add(nodo);
        RESULT = sw;
    
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_ELSE_IF",12, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-4)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // N_ELSE_IF ::= OPEN_PARENTESIS N_SENTENCIA_BOOLEANA_ANIDADA CLOSE_PARENTESIS COLON N_SENTENCIA N_ELSE_IF 
            {
              Object RESULT =null;
		int bnleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-4)).left;
		int bnright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-4)).right;
		Object bn = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-4)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).value;
		int swleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int swright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object sw = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
        DefaultMutableTreeNode nodo = parser.createNodo("ELSE_IF");
        nodo.insert((DefaultMutableTreeNode)bn, 0);
        nodo.add((DefaultMutableTreeNode)n);
        ((DefaultMutableTreeNode)n).setUserObject("SENTENCES");
        ((DefaultTreeModel) parser.sintaxTreeModel).nodeChanged(((DefaultMutableTreeNode)n));
        ((DefaultMutableTreeNode)sw).insert(nodo,0);
        RESULT = (DefaultMutableTreeNode)sw;
    
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_ELSE_IF",12, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-5)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // N_IF ::= OPEN_PARENTESIS N_SENTENCIA_BOOLEANA_ANIDADA CLOSE_PARENTESIS OPEN_PARENTESIS IF_SWITCH COLON N_ELSE_IF CLOSE_BLOCK 
            {
              Object RESULT =null;
		int bnleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-6)).left;
		int bnright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-6)).right;
		Object bn = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-6)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).right;
		Object el = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).value;
		
        DefaultMutableTreeNode nodo = parser.createNodo("IF");
        nodo.add((DefaultMutableTreeNode)bn);
        //N_Else_if
        DefaultMutableTreeNode node2 = ((DefaultMutableTreeNode)el);
        node2.setUserObject("ELSE_IFS");
        ((DefaultTreeModel) parser.sintaxTreeModel).nodeChanged(node2);
        nodo.add(node2);
        RESULT = nodo;
    
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_IF",11, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-7)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // N_IF ::= OPEN_PARENTESIS N_SENTENCIA_BOOLEANA_ANIDADA CLOSE_PARENTESIS OPEN_PARENTESIS IF_SWITCH COLON N_SENTENCIA N_ELSE_IF CLOSE_BLOCK 
            {
              Object RESULT =null;
		int bnleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-7)).left;
		int bnright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-7)).right;
		Object bn = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-7)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).right;
		Object el = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).value;
		
        ((DefaultMutableTreeNode)n).insert((DefaultMutableTreeNode)bn, 0);
        ((DefaultMutableTreeNode)n).add((DefaultMutableTreeNode)el);
        ((DefaultMutableTreeNode)n).setUserObject("IF");
        ((DefaultTreeModel) parser.sintaxTreeModel).nodeChanged(((DefaultMutableTreeNode)n));
        RESULT = (DefaultMutableTreeNode)n;
    
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_IF",11, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-8)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // N_TO_FOR ::= error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
        String desc = "Solo se admiten Numeros enteros y variables";
        String mes = parser.errorMessage(desc, parser.getS());
        parser.report_error(mes ,err);
        //DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
        RESULT = "ERROR";
    
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_TO_FOR",10, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // N_TO_FOR ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		RESULT = id;
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_TO_FOR",10, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // N_TO_FOR ::= NUMBER 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		RESULT = n;
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_TO_FOR",10, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // N_FOR ::= OPEN_PARENTESIS ID COMA N_TO_FOR TO N_TO_FOR COMA OP_SUM N_TO_FOR CLOSE_PARENTESIS OPEN_PARENTESIS FOR COLON CLOSE_BLOCK 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-12)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-12)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-12)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-10)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-10)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-10)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-8)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-8)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-8)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-6)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-6)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-6)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-5)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-5)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-5)).value;
		
        //System.out.printtln("FOR");
        DefaultMutableTreeNode nodo = parser.createNodo("FOR");
        DefaultMutableTreeNode parametros = parser.createNodo(id+","+n1+"->"+n2+","+o+n3);
        nodo.add(parametros);
        RESULT = nodo;
    
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_FOR",9, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-13)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // N_FOR ::= OPEN_PARENTESIS ID COMA N_TO_FOR TO N_TO_FOR COMA OP_SUM N_TO_FOR CLOSE_PARENTESIS OPEN_PARENTESIS FOR COLON N_SENTENCIA CLOSE_BLOCK 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-13)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-13)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-13)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-11)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-11)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-11)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-9)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-9)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-9)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-7)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-7)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-7)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-6)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-6)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-6)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).value;
		
        DefaultMutableTreeNode parametros = parser.createNodo(id+","+n1+","+n2+","+o+n3);
        ((DefaultMutableTreeNode)n).insert(parametros,0);
        ((DefaultMutableTreeNode)n).setUserObject("FOR");
        ((DefaultTreeModel) parser.sintaxTreeModel).nodeChanged(((DefaultMutableTreeNode)n));
        RESULT = (DefaultMutableTreeNode)n;

        /*//System.out.printtln("FOR");
        DefaultMutableTreeNode nodo = parser.createNodo("FOR");
        nodo.add(parser.createNodo(id+""));
        nodo.add(parser.createNodo("from: "+n1));
        nodo.add(parser.createNodo("to: "+n2));
        nodo.add(parser.createNodo(""+o+n3));
        //DefaultMutableTreeNode nodoS = parser.createNodo("Sentencias");
        //nodo = (DefaultMutableTreeNode)parser.addAllChildren((DefaultMutableTreeNode)e,nodo);
        DefaultMutableTreeNode node = ((DefaultMutableTreeNode)e);
        node.setUserObject("For Instructions");
        ((DefaultTreeModel) parser.sintaxTreeModel).nodeChanged(node);
        nodo.add(node);
        RESULT = nodo;*/
    
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_FOR",9, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-14)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // N_WHILE ::= OPEN_PARENTESIS N_SENTENCIA_BOOLEANA_ANIDADA CLOSE_PARENTESIS OPEN_PARENTESIS WHILE COLON CLOSE_BLOCK 
            {
              Object RESULT =null;
		int e2left = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-5)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-5)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-5)).value;
		
        //System.out.printtln("WHILE");
        DefaultMutableTreeNode nodo = parser.createNodo("WHILE empy");
        nodo.add((DefaultMutableTreeNode)e2);
        RESULT = nodo;
        
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_WHILE",8, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-6)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // N_WHILE ::= OPEN_PARENTESIS N_SENTENCIA_BOOLEANA_ANIDADA CLOSE_PARENTESIS OPEN_PARENTESIS WHILE COLON N_SENTENCIA CLOSE_BLOCK 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-7)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-7)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-7)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-6)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-6)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-5)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-5)).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-5)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-4)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-4)).right;
		Object e4 = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-4)).value;
		int e5left = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)).right;
		Object e5 = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)).value;
		int e6left = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).left;
		int e6right = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).right;
		Object e6 = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).value;
		int e8left = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int e8right = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object e8 = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
        //Código mágico
        ((DefaultMutableTreeNode)n).insert((DefaultMutableTreeNode)e, 0);
        //DefaultMutableTreeNode node3 = new DefaultMutableTreeNode(((DefaultMutableTreeNode)n).getUserObject());
        //((DefaultMutableTreeNode)n).insert(node3, 1);
        //cambiar nombre, brutal!!!
        ((DefaultMutableTreeNode)n).setUserObject("WHILE");
        ((DefaultTreeModel) parser.sintaxTreeModel).nodeChanged(((DefaultMutableTreeNode)n));
        RESULT = (DefaultMutableTreeNode)n;

        //System.out.printtln("WHILE");
        /*DefaultMutableTreeNode nodo = parser.createNodo("WHILE");
        nodo.add((DefaultMutableTreeNode)e2);
        //cambiar nombre, brutal!!!
        DefaultMutableTreeNode node = ((DefaultMutableTreeNode)e7);
        node.setUserObject("While Instructions");
        ((DefaultTreeModel) parser.sintaxTreeModel).nodeChanged(node);
        nodo.add(node);
        RESULT = nodo;*/
    
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_WHILE",8, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-7)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // N_SENTENCIA ::= N_CALL_FUNCTION PYC 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).value;
		
        DefaultMutableTreeNode nodo = parser.createNodo("MAIN");
        nodo.add((DefaultMutableTreeNode)n);
        RESULT = nodo;
    
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA",7, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // N_SENTENCIA ::= N_SENTENCIA N_CALL_FUNCTION PYC 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).value;
		
        ((DefaultMutableTreeNode)e).add((DefaultMutableTreeNode)n);
        RESULT = ((DefaultMutableTreeNode)e);
    
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA",7, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // N_SENTENCIA ::= N_CIN 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
        DefaultMutableTreeNode nodo = parser.createNodo("MAIN");
        nodo.add((DefaultMutableTreeNode)n);
        RESULT = nodo;
    
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA",7, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // N_SENTENCIA ::= N_SENTENCIA N_CIN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
        ((DefaultMutableTreeNode)e).add((DefaultMutableTreeNode)n);
        RESULT = ((DefaultMutableTreeNode)e);
    
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA",7, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // N_SENTENCIA ::= N_PRINT 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
        DefaultMutableTreeNode nodo = parser.createNodo("MAIN");
        nodo.add((DefaultMutableTreeNode)n);
        RESULT = nodo;
    
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA",7, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // N_SENTENCIA ::= N_SENTENCIA N_PRINT 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
        ((DefaultMutableTreeNode)e).add((DefaultMutableTreeNode)n);
        RESULT = ((DefaultMutableTreeNode)e);
    
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA",7, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // N_SENTENCIA ::= N_DECLARACION PYC 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).value;
		
        DefaultMutableTreeNode nodo = parser.createNodo("MAIN");
        nodo.add((DefaultMutableTreeNode)n);
        RESULT = nodo;
    
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA",7, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // N_SENTENCIA ::= N_SENTENCIA N_DECLARACION PYC 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).value;
		
        ((DefaultMutableTreeNode)e).add((DefaultMutableTreeNode)n);
        RESULT = ((DefaultMutableTreeNode)e);
    
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA",7, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // N_SENTENCIA ::= N_SWITCH 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
        DefaultMutableTreeNode nodo = parser.createNodo("MAIN");
        nodo.add((DefaultMutableTreeNode)n);
        RESULT = nodo;
    
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA",7, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // N_SENTENCIA ::= N_SENTENCIA N_SWITCH 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
        ((DefaultMutableTreeNode)e).add((DefaultMutableTreeNode)n);
        RESULT = ((DefaultMutableTreeNode)e);
    
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA",7, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // N_SENTENCIA ::= N_IF 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
        DefaultMutableTreeNode nodo = parser.createNodo("MAIN");
        nodo.add((DefaultMutableTreeNode)n);
        RESULT = nodo;
    
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA",7, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // N_SENTENCIA ::= N_SENTENCIA N_IF 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
        ((DefaultMutableTreeNode)e).add((DefaultMutableTreeNode)n);
        RESULT = ((DefaultMutableTreeNode)e);
    
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA",7, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // N_SENTENCIA ::= N_FOR 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
        DefaultMutableTreeNode nodo = parser.createNodo("MAIN");
        nodo.add((DefaultMutableTreeNode)n);
        RESULT = nodo;
    
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA",7, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // N_SENTENCIA ::= N_SENTENCIA N_FOR 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
        ((DefaultMutableTreeNode)e).add((DefaultMutableTreeNode)n);
       RESULT = ((DefaultMutableTreeNode)e);
    
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA",7, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // N_SENTENCIA ::= N_WHILE 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
        DefaultMutableTreeNode nodo = parser.createNodo("MAIN");
        nodo.add((DefaultMutableTreeNode)n);
        RESULT = nodo;
    
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA",7, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // N_SENTENCIA ::= N_SENTENCIA N_WHILE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
        ((DefaultMutableTreeNode)e).add((DefaultMutableTreeNode)n);
        RESULT = ((DefaultMutableTreeNode)e);
    
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA",7, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // N_RETORNO_FUNCTION ::= error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
    String desc = "En los parametros solo se aceptan los tipos: int, bln, chr, arr, mtx";
    String mes = parser.errorMessage(desc, parser.getS());
    DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
    RESULT = nodo;
    parser.report_error(mes ,err);
    
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_RETORNO_FUNCTION",6, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // N_RETORNO_FUNCTION ::= MATRIX N_TIPOS_DECLARACION_MATRIZ 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		RESULT = parser.createNodo(n+" "+m+"");
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_RETORNO_FUNCTION",6, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // N_RETORNO_FUNCTION ::= ARRAY N_TIPOS_DECLARACION_MATRIZ 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		RESULT = parser.createNodo(n+" "+m+"");
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_RETORNO_FUNCTION",6, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // N_RETORNO_FUNCTION ::= CHAR 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		RESULT = parser.createNodo(n+"");
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_RETORNO_FUNCTION",6, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // N_RETORNO_FUNCTION ::= BOOLEAN 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		RESULT = parser.createNodo(n+"");
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_RETORNO_FUNCTION",6, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // N_RETORNO_FUNCTION ::= INTENGER 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		RESULT = parser.createNodo(n+"");
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_RETORNO_FUNCTION",6, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // N_PARAMETRO_FUNCTION ::= ID ID error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
        String desc = "Debe ser un solo identificador. Si tiene varias palabras unasla: \"funcionMuesta o funcion_muestra\"   ";
        String mes = parser.errorMessage(desc, parser.getS());
        DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
        RESULT = nodo;
        parser.report_error(mes ,err);
    
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_PARAMETRO_FUNCTION",5, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // N_PARAMETRO_FUNCTION ::= N_RETORNO_FUNCTION ID 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		  
            DefaultMutableTreeNode nodo = parser.createNodo("PARAMETERS");
            nodo.add(parser.createNodo(r+" "+id));
            RESULT = nodo;
        
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_PARAMETRO_FUNCTION",5, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // N_PARAMETRO_FUNCTION ::= N_RETORNO_FUNCTION ID COMA N_PARAMETRO_FUNCTION 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
            ((DefaultMutableTreeNode)n).insert(parser.createNodo(r+" "+id),0);
            RESULT = n;
        
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_PARAMETRO_FUNCTION",5, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // N_PARAMETRO ::= OPEN_PARENTESIS N_PARAMETRO_FUNCTION CLOSE_PARENTESIS 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).value;
		
            RESULT = ((DefaultMutableTreeNode)e);
        
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_PARAMETRO",4, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // N_PARAMETRO ::= OPEN_PARENTESIS CLOSE_PARENTESIS 
            {
              Object RESULT =null;
		
            //RESULT = null;
            RESULT = parser.createNodo("PARAMETERS");
        
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_PARAMETRO",4, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // N_FUNCTION ::= N_PARAMETRO ID OPEN_PARENTESIS FUNCTION COLON N_RETORNO_FUNCTION N_SENTENCIA RETURN N_VALOR_VARIABLE error PYC 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-10)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-10)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-10)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-9)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-9)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-9)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-5)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-5)).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-5)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-4)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-4)).value;
		int vbleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).left;
		int vbright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).right;
		Object vb = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).value;
		int errleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).value;
		
                String desc = "Falta el PYC del retorno";
                String mes = parser.errorMessage(desc, parser.getS());
                parser.report_error(mes ,err);
                DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
                RESULT = nodo;
    
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_FUNCTION",3, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-10)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // N_FUNCTION ::= N_PARAMETRO ID OPEN_PARENTESIS FUNCTION COLON N_RETORNO_FUNCTION N_SENTENCIA RETURN N_VALOR_VARIABLE PYC error 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-10)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-10)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-10)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-9)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-9)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-9)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-5)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-5)).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-5)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-4)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-4)).value;
		int vbleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).left;
		int vbright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).right;
		Object vb = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).value;
		int errleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
                String desc = "Falta el close block de la función";
                String mes = parser.errorMessage(desc, parser.getS());
                parser.report_error(mes ,err);
                DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
                RESULT = nodo;
    
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_FUNCTION",3, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-10)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // N_FUNCTION ::= N_PARAMETRO ID OPEN_PARENTESIS FUNCTION COLON N_RETORNO_FUNCTION N_SENTENCIA error 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-7)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-7)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-7)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-6)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-6)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-6)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).value;
		int errleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
                String desc = "Falta el return de la función";
                String mes = parser.errorMessage(desc, parser.getS());
                parser.report_error(mes ,err);
                DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
                RESULT = nodo;
        
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_FUNCTION",3, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-7)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // N_FUNCTION ::= N_PARAMETRO ID OPEN_PARENTESIS FUNCTION error 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-4)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)).value;
		int errleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
                String desc = "Falta \":\" depues de fun";
                String mes = parser.errorMessage(desc, parser.getS());
                parser.report_error(mes ,err);
                DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
                RESULT = nodo;
        
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_FUNCTION",3, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-4)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // N_FUNCTION ::= N_PARAMETRO ID OPEN_PARENTESIS FUNCTION COLON N_RETORNO_FUNCTION RETURN N_VALOR_VARIABLE PYC CLOSE_BLOCK 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-9)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-9)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-9)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-8)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-8)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-4)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-4)).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-4)).value;
		int vbleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).left;
		int vbright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).right;
		Object vb = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).value;
		
            DefaultMutableTreeNode nodo = parser.createNodo(id+":"+e3+"");
            nodo.add((DefaultMutableTreeNode)e1);
            nodo.add(parser.createNodo("ret " + "" +vb+ ""));
            RESULT = nodo;
        
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_FUNCTION",3, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-9)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // N_FUNCTION ::= N_PARAMETRO ID OPEN_PARENTESIS FUNCTION COLON NULL CLOSE_BLOCK 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-6)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-5)).value;
		int nlleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).left;
		int nlright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).right;
		Object nl = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).value;
		
            DefaultMutableTreeNode nodo = parser.createNodo(id+":"+nl+"");
            nodo.add((DefaultMutableTreeNode)e);
            RESULT = nodo;
        
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_FUNCTION",3, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-6)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // N_FUNCTION ::= N_PARAMETRO ID OPEN_PARENTESIS FUNCTION COLON NULL N_SENTENCIA CLOSE_BLOCK 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-7)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-7)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-7)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-6)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-6)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-6)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).value;
		
            ((DefaultMutableTreeNode)n).insert((DefaultMutableTreeNode)e1, 0);
            ((DefaultMutableTreeNode)n).setUserObject(e2+":"+e3+"");
            ((DefaultTreeModel) parser.sintaxTreeModel).nodeChanged(((DefaultMutableTreeNode)n));
            RESULT = (DefaultMutableTreeNode)n;

                /*DefaultMutableTreeNode nodo = parser.createNodo(e2+""+":"+e3+"");
                nodo.add((DefaultMutableTreeNode)e1);
                nodo.add(((DefaultMutableTreeNode)e4));
            RESULT = nodo;*/
            //RESULT = ((DefaultMutableTreeNode)e4);
        
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_FUNCTION",3, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-7)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // N_FUNCTION ::= N_PARAMETRO ID OPEN_PARENTESIS FUNCTION COLON N_RETORNO_FUNCTION N_SENTENCIA RETURN N_VALOR_VARIABLE PYC CLOSE_BLOCK 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-10)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-10)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-10)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-9)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-9)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-9)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-5)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-5)).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-5)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-4)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-4)).value;
		int vbleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).left;
		int vbright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).right;
		Object vb = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).value;
		
            ((DefaultMutableTreeNode)n).insert((DefaultMutableTreeNode)e1, 0);
            DefaultMutableTreeNode ret = parser.createNodo("ret " + "" +vb+ "");
            ((DefaultMutableTreeNode)n).add((DefaultMutableTreeNode)ret);
            ((DefaultMutableTreeNode)n).setUserObject(e2+":"+e3+"");
            ((DefaultTreeModel) parser.sintaxTreeModel).nodeChanged(((DefaultMutableTreeNode)n));
            RESULT = (DefaultMutableTreeNode)n;

            /*DefaultMutableTreeNode nodo = parser.createNodo(e2+""+":"+e3+"");
                nodo.add((DefaultMutableTreeNode)e1);
                //cambiar nombre, brutal!!!
                DefaultMutableTreeNode node = ((DefaultMutableTreeNode)e4);
                node.setUserObject("Instructions");
                ((DefaultTreeModel) parser.sintaxTreeModel).nodeChanged(node);
                nodo.add(node);
               // nodo.add(((DefaultMutableTreeNode)e4));
            RESULT = nodo;*/
            //RESULT = ((DefaultMutableTreeNode)e4);
        
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_FUNCTION",3, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-10)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // N_FUNCTIONS ::= N_FUNCTION 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
            parser.insertInicioNodo((DefaultMutableTreeNode)e1);
    
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_FUNCTIONS",2, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // N_FUNCTIONS ::= N_FUNCTIONS N_FUNCTION 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
        parser.agregarNodo((DefaultMutableTreeNode)e1);
    
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_FUNCTIONS",2, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // N_MAIN ::= OPEN_PARENTESIS CLOSE_PARENTESIS OPEN_PARENTESIS MAIN COLON CLOSE_BLOCK 
            {
              Object RESULT =null;
		
        RESULT = parser.createNodo("MAIN");
    
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_MAIN",1, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-5)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // N_MAIN ::= OPEN_PARENTESIS error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
                String desc = "El main no debe tener parametros";
                String mes = parser.errorMessage(desc, parser.getS());
                DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
                RESULT = nodo;
                parser.report_error(mes ,err);
        
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_MAIN",1, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // N_MAIN ::= OPEN_PARENTESIS CLOSE_PARENTESIS error MAIN COLON N_SENTENCIA CLOSE_BLOCK 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-4)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-4)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).value;
		
                String desc = "Debe volver a abrir parentesis antes de main \"()(main: -código- :)\" ";
                String mes = parser.errorMessage(desc, parser.getS());
                DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
                RESULT = nodo;
                parser.report_error(mes ,err);
        
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_MAIN",1, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-6)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // N_MAIN ::= OPEN_PARENTESIS CLOSE_PARENTESIS OPEN_PARENTESIS MAIN COLON N_SENTENCIA CLOSE_BLOCK 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).value;
		
        //DefaultMutableTreeNode nodo = parser.createNodo("MAIN");
        RESULT = ((DefaultMutableTreeNode)e);
    
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_MAIN",1, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-6)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // N_INICIO ::= N_FUNCTIONS N_MAIN 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
            parser.insertInicioNodo((DefaultMutableTreeNode)e1);
        
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_INICIO",0, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // N_INICIO ::= N_MAIN N_FUNCTIONS 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).value;
		
            parser.insertInicioNodo((DefaultMutableTreeNode)e1);
        
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_INICIO",0, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // N_INICIO ::= N_MAIN 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
            parser.agregarNodo((DefaultMutableTreeNode)e1);
        
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_INICIO",0, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= N_INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).value;
		RESULT = start_val;
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ASintaxT$parser.done_parsing();
          return CUP$ASintaxT$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

