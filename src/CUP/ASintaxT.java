
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Dec 20 08:00:08 CST 2020
//----------------------------------------------------

package CUP;

import java_cup.runtime.Symbol;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Dec 20 08:00:08 CST 2020
  */
public class ASintaxT extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public ASintaxT() {super();}

  /** Constructor which sets the default scanner. */
  public ASintaxT(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ASintaxT(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\355\000\002\002\004\000\002\002\005\000\002\002" +
    "\006\000\002\003\004\000\002\003\005\000\002\003\003" +
    "\000\002\003\004\000\002\004\011\000\002\004\011\000" +
    "\002\004\004\000\002\004\010\000\002\005\004\000\002" +
    "\005\003\000\002\006\015\000\002\006\012\000\002\006" +
    "\011\000\002\006\014\000\002\006\007\000\002\006\012" +
    "\000\002\006\015\000\002\006\015\000\002\007\004\000" +
    "\002\007\005\000\002\010\006\000\002\010\004\000\002" +
    "\010\005\000\002\011\003\000\002\011\003\000\002\011" +
    "\003\000\002\011\004\000\002\011\004\000\002\011\003" +
    "\000\002\012\004\000\002\012\003\000\002\012\004\000" +
    "\002\012\003\000\002\012\004\000\002\012\003\000\002" +
    "\012\004\000\002\012\003\000\002\012\005\000\002\012" +
    "\004\000\002\012\004\000\002\012\003\000\002\012\004" +
    "\000\002\012\003\000\002\012\005\000\002\012\004\000" +
    "\002\013\012\000\002\013\011\000\002\014\021\000\002" +
    "\014\020\000\002\015\003\000\002\015\003\000\002\015" +
    "\003\000\002\016\013\000\002\016\012\000\002\017\010" +
    "\000\002\017\007\000\002\017\007\000\002\017\006\000" +
    "\002\017\002\000\002\020\012\000\002\021\010\000\002" +
    "\021\007\000\002\021\007\000\002\021\006\000\002\021" +
    "\007\000\002\021\010\000\002\023\006\000\002\023\005" +
    "\000\002\023\005\000\002\023\005\000\002\024\005\000" +
    "\002\024\003\000\002\024\005\000\002\025\004\000\002" +
    "\025\003\000\002\025\006\000\002\025\005\000\002\025" +
    "\005\000\002\025\005\000\002\027\004\000\002\027\004" +
    "\000\002\026\005\000\002\026\005\000\002\026\005\000" +
    "\002\026\005\000\002\026\005\000\002\026\005\000\002" +
    "\026\005\000\002\026\005\000\002\026\005\000\002\026" +
    "\005\000\002\026\005\000\002\026\005\000\002\026\005" +
    "\000\002\026\005\000\002\026\005\000\002\026\005\000" +
    "\002\026\005\000\002\026\005\000\002\026\005\000\002" +
    "\026\005\000\002\026\005\000\002\026\005\000\002\026" +
    "\005\000\002\026\005\000\002\026\005\000\002\026\004" +
    "\000\002\026\004\000\002\022\004\000\002\022\004\000" +
    "\002\022\004\000\002\022\004\000\002\022\004\000\002" +
    "\022\004\000\002\022\004\000\002\022\004\000\002\022" +
    "\005\000\002\022\005\000\002\022\005\000\002\022\005" +
    "\000\002\022\003\000\002\022\003\000\002\022\003\000" +
    "\002\022\003\000\002\022\003\000\002\030\005\000\002" +
    "\030\005\000\002\030\004\000\002\030\004\000\002\030" +
    "\004\000\002\030\006\000\002\030\004\000\002\030\006" +
    "\000\002\030\010\000\002\030\010\000\002\030\010\000" +
    "\002\030\010\000\002\030\010\000\002\030\013\000\002" +
    "\030\013\000\002\030\013\000\002\030\013\000\002\030" +
    "\011\000\002\030\005\000\002\030\006\000\002\030\005" +
    "\000\002\030\005\000\002\030\007\000\002\030\005\000" +
    "\002\030\005\000\002\030\006\000\002\030\007\000\002" +
    "\030\005\000\002\030\005\000\002\030\006\000\002\030" +
    "\006\000\002\030\005\000\002\030\005\000\002\031\005" +
    "\000\002\031\003\000\002\031\005\000\002\032\003\000" +
    "\002\032\003\000\002\032\003\000\002\032\003\000\002" +
    "\032\003\000\002\032\003\000\002\032\003\000\002\032" +
    "\002\000\002\034\003\000\002\034\003\000\002\034\003" +
    "\000\002\034\003\000\002\033\004\000\002\033\006\000" +
    "\002\033\005\000\002\033\003\000\002\033\003\000\002" +
    "\035\005\000\002\035\004\000\002\035\004\000\002\036" +
    "\005\000\002\036\005\000\002\036\005\000\002\037\003" +
    "\000\002\037\003\000\002\037\003\000\002\037\003\000" +
    "\002\037\003\000\002\040\005\000\002\040\004\000\002" +
    "\040\004\000\002\040\005\000\002\041\005\000\002\041" +
    "\011\000\002\041\011\000\002\041\011\000\002\041\011" +
    "\000\002\041\011\000\002\041\007\000\002\042\005\000" +
    "\002\042\004\000\002\042\005\000\002\042\004\000\002" +
    "\042\004\000\002\042\007\000\002\042\012\000\002\042" +
    "\002\000\002\043\010\000\002\043\005\000\002\043\006" +
    "\000\002\043\007\000\002\043\010\000\002\044\004\000" +
    "\002\044\006\000\002\044\003\000\002\044\004\000\002" +
    "\044\004\000\002\045\004\000\002\045\005\000\002\045" +
    "\005\000\002\045\005\000\002\045\003\000\002\045\003" +
    "\000\002\045\003\000\002\045\003\000\002\045\003\000" +
    "\002\045\003\000\002\045\003\000\002\045\006\000\002" +
    "\045\011\000\002\045\004\000\002\045\004\000\002\045" +
    "\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u01d5\000\006\006\004\053\010\001\002\000\006\003" +
    "\u01cb\007\u01cc\001\002\000\006\002\ufffc\006\371\001\002" +
    "\000\004\002\u01c9\001\002\000\006\006\004\053\365\001" +
    "\002\000\016\046\015\047\017\050\016\051\020\052\012" +
    "\054\011\001\002\000\006\012\332\015\331\001\002\000" +
    "\016\003\021\012\276\015\275\046\022\047\026\050\027" +
    "\001\002\000\022\003\211\006\214\021\204\022\206\023" +
    "\205\037\201\054\210\055\203\001\002\000\004\010\200" +
    "\001\002\000\006\015\125\054\123\001\002\000\006\015" +
    "\115\054\113\001\002\000\006\003\101\054\100\001\002" +
    "\000\016\003\021\012\024\015\023\046\022\047\026\050" +
    "\027\001\002\000\026\003\uff52\006\uff52\015\uff52\033\uff52" +
    "\046\uff52\047\uff52\050\uff52\051\uff52\052\uff52\054\uff52\001" +
    "\002\000\026\003\uff55\006\uff55\015\uff55\033\uff55\046\uff55" +
    "\047\uff55\050\uff55\051\uff55\052\uff55\054\uff55\001\002\000" +
    "\004\003\077\001\002\000\010\003\071\054\070\055\072" +
    "\001\002\000\010\003\031\015\032\054\030\001\002\000" +
    "\026\003\uff54\006\uff54\015\uff54\033\uff54\046\uff54\047\uff54" +
    "\050\uff54\051\uff54\052\uff54\054\uff54\001\002\000\026\003" +
    "\uff53\006\uff53\015\uff53\033\uff53\046\uff53\047\uff53\050\uff53" +
    "\051\uff53\052\uff53\054\uff53\001\002\000\004\015\034\001" +
    "\002\000\004\010\uff65\001\002\000\004\003\033\001\002" +
    "\000\004\010\uff64\001\002\000\006\012\037\054\035\001" +
    "\002\000\006\003\056\006\055\001\002\000\004\010\uff67" +
    "\001\002\000\026\003\uff56\013\uff56\014\uff56\020\042\021" +
    "\041\022\046\023\044\024\043\054\047\055\040\001\002" +
    "\000\020\003\uff5d\005\uff5d\007\uff5d\010\uff5d\013\uff5d\014" +
    "\uff5d\040\uff5d\001\002\000\020\003\uff58\005\uff58\007\uff58" +
    "\010\uff58\013\uff58\014\uff58\040\uff58\001\002\000\020\003" +
    "\uff5a\005\uff5a\007\uff5a\010\uff5a\013\uff5a\014\uff5a\040\uff5a" +
    "\001\002\000\020\003\uff59\005\uff59\007\uff59\010\uff59\013" +
    "\uff59\014\uff59\040\uff59\001\002\000\020\003\uff5b\005\uff5b" +
    "\007\uff5b\010\uff5b\013\uff5b\014\uff5b\040\uff5b\001\002\000" +
    "\004\010\uff75\001\002\000\020\003\uff57\005\uff57\007\uff57" +
    "\010\uff57\013\uff57\014\uff57\040\uff57\001\002\000\020\003" +
    "\uff5c\005\uff5c\007\uff5c\010\uff5c\013\uff5c\014\uff5c\040\uff5c" +
    "\001\002\000\010\003\052\013\053\014\051\001\002\000" +
    "\026\003\uff56\013\uff56\014\uff56\020\042\021\041\022\046" +
    "\023\044\024\043\054\047\055\040\001\002\000\010\010" +
    "\uff4a\013\uff4a\014\uff4a\001\002\000\010\010\uff4b\013\uff4b" +
    "\014\uff4b\001\002\000\010\010\uff4c\013\uff4c\014\uff4c\001" +
    "\002\000\026\003\062\007\060\014\uff56\020\042\021\041" +
    "\022\046\023\044\024\043\054\047\055\040\001\002\000" +
    "\004\006\057\001\002\000\004\010\uffba\001\002\000\004" +
    "\010\uffbb\001\002\000\004\007\067\001\002\000\004\010" +
    "\uffb9\001\002\000\006\007\uffb7\014\064\001\002\000\026" +
    "\003\066\007\uff56\014\uff56\020\042\021\041\022\046\023" +
    "\044\024\043\054\047\055\040\001\002\000\004\007\uffb8" +
    "\001\002\000\004\007\uffb6\001\002\000\004\010\uffbc\001" +
    "\002\000\016\005\uffcc\007\uffcc\013\uffcc\014\uffcc\035\uffcc" +
    "\040\uffcc\001\002\000\016\005\uffcb\007\uffcb\013\uffcb\014" +
    "\uffcb\035\uffcb\040\uffcb\001\002\000\016\005\uffcd\007\uffcd" +
    "\013\uffcd\014\uffcd\035\uffcd\040\uffcd\001\002\000\004\013" +
    "\074\001\002\000\012\003\021\046\022\047\026\050\027" +
    "\001\002\000\004\054\076\001\002\000\004\010\uff76\001" +
    "\002\000\004\010\uff66\001\002\000\014\003\106\010\uff5f" +
    "\014\105\015\107\054\104\001\002\000\004\015\103\001" +
    "\002\000\004\010\uff7e\001\002\000\022\003\uff48\006\uff48" +
    "\021\uff48\022\uff48\023\uff48\037\uff48\054\uff48\055\uff48\001" +
    "\002\000\004\003\112\001\002\000\004\054\110\001\002" +
    "\000\022\003\uff47\006\uff47\021\uff47\022\uff47\023\uff47\037" +
    "\uff47\054\uff47\055\uff47\001\002\000\022\003\uff49\006\uff49" +
    "\021\uff49\022\uff49\023\uff49\037\uff49\054\uff49\055\uff49\001" +
    "\002\000\010\010\uff5f\014\105\054\104\001\002\000\004" +
    "\010\uff60\001\002\000\004\010\uff5e\001\002\000\014\003" +
    "\117\010\uff5f\014\105\015\120\054\104\001\002\000\004" +
    "\010\uff7d\001\002\000\004\003\116\001\002\000\004\010" +
    "\uff62\001\002\000\004\010\uff61\001\002\000\006\024\122" +
    "\054\035\001\002\000\004\010\uff63\001\002\000\004\010" +
    "\uff7a\001\002\000\014\003\127\010\uff5f\014\105\015\130" +
    "\054\104\001\002\000\004\010\uff7f\001\002\000\004\003" +
    "\126\001\002\000\004\010\uff6d\001\002\000\004\010\uff6c" +
    "\001\002\000\032\003\143\006\147\020\134\021\133\022" +
    "\140\023\137\024\135\040\144\041\136\042\132\054\142" +
    "\055\131\001\002\000\040\006\uff20\007\uff20\010\uff20\020" +
    "\uff20\021\uff20\022\uff20\023\uff20\024\uff20\040\uff20\041\uff20" +
    "\042\uff20\044\uff20\045\uff20\054\uff20\055\uff20\001\002\000" +
    "\004\003\177\001\002\000\040\006\uff1e\007\uff1e\010\uff1e" +
    "\020\uff1e\021\uff1e\022\uff1e\023\uff1e\024\uff1e\040\uff1e\041" +
    "\uff1e\042\uff1e\044\uff1e\045\uff1e\054\uff1e\055\uff1e\001\002" +
    "\000\040\006\uff1b\007\uff1b\010\uff1b\020\uff1b\021\uff1b\022" +
    "\uff1b\023\uff1b\024\uff1b\040\uff1b\041\uff1b\042\uff1b\044\uff1b" +
    "\045\uff1b\054\uff1b\055\uff1b\001\002\000\040\006\uff1c\007" +
    "\uff1c\010\uff1c\020\uff1c\021\uff1c\022\uff1c\023\uff1c\024\uff1c" +
    "\040\uff1c\041\uff1c\042\uff1c\044\uff1c\045\uff1c\054\uff1c\055" +
    "\uff1c\001\002\000\004\003\176\001\002\000\040\006\uff1f" +
    "\007\uff1f\010\uff1f\020\uff1f\021\uff1f\022\uff1f\023\uff1f\024" +
    "\uff1f\040\uff1f\041\uff1f\042\uff1f\044\uff1f\045\uff1f\054\uff1f" +
    "\055\uff1f\001\002\000\040\006\uff1d\007\uff1d\010\uff1d\020" +
    "\uff1d\021\uff1d\022\uff1d\023\uff1d\024\uff1d\040\uff1d\041\uff1d" +
    "\042\uff1d\044\uff1d\045\uff1d\054\uff1d\055\uff1d\001\002\000" +
    "\004\010\uff6e\001\002\000\036\003\056\006\055\010\uff1a" +
    "\012\166\020\uff1a\021\uff1a\022\uff1a\023\uff1a\024\uff1a\040" +
    "\uff1a\041\uff1a\042\uff1a\054\uff1a\055\uff1a\001\002\000\004" +
    "\007\165\001\002\000\032\003\174\006\155\020\134\021" +
    "\133\022\140\023\137\024\135\040\144\041\136\042\132" +
    "\054\150\055\131\001\002\000\040\006\uff27\007\uff27\010" +
    "\uff27\020\uff27\021\uff27\022\uff27\023\uff27\024\uff27\040\uff27" +
    "\041\161\042\160\044\uff27\045\uff27\054\uff27\055\uff27\001" +
    "\002\000\032\006\155\010\uff7c\020\134\021\133\022\140" +
    "\023\137\024\135\040\144\041\136\042\132\054\150\055" +
    "\131\001\002\000\032\003\151\006\147\020\134\021\133" +
    "\022\140\023\137\024\135\040\144\041\136\042\132\054" +
    "\150\055\131\001\002\000\042\006\uff1a\007\uff1a\010\uff1a" +
    "\012\166\020\uff1a\021\uff1a\022\uff1a\023\uff1a\024\uff1a\040" +
    "\uff1a\041\uff1a\042\uff1a\044\uff1a\045\uff1a\054\uff1a\055\uff1a" +
    "\001\002\000\040\006\uff25\007\165\010\uff25\020\uff25\021" +
    "\uff25\022\uff25\023\uff25\024\uff25\040\uff25\041\uff25\042\uff25" +
    "\044\uff25\045\uff25\054\uff25\055\uff25\001\002\000\032\006" +
    "\155\007\153\020\134\021\133\022\140\023\137\024\135" +
    "\040\144\041\136\042\132\054\150\055\131\001\002\000" +
    "\042\003\143\006\uff22\007\uff22\010\uff22\020\uff22\021\uff22" +
    "\022\uff22\023\uff22\024\uff22\040\uff22\041\uff22\042\uff22\044" +
    "\uff22\045\uff22\054\uff22\055\uff22\001\002\000\040\006\uff29" +
    "\007\uff29\010\uff29\020\uff29\021\uff29\022\uff29\023\uff29\024" +
    "\uff29\040\uff29\041\161\042\160\044\uff29\045\uff29\054\uff29" +
    "\055\uff29\001\002\000\032\003\143\006\147\020\134\021" +
    "\133\022\140\023\137\024\135\040\144\041\136\042\132" +
    "\054\150\055\131\001\002\000\032\006\155\007\157\020" +
    "\134\021\133\022\140\023\137\024\135\040\144\041\136" +
    "\042\132\054\150\055\131\001\002\000\040\006\uff22\007" +
    "\uff22\010\uff22\020\uff22\021\uff22\022\uff22\023\uff22\024\uff22" +
    "\040\uff22\041\uff22\042\uff22\044\uff22\045\uff22\054\uff22\055" +
    "\uff22\001\002\000\030\006\155\020\134\021\133\022\140" +
    "\023\137\024\135\040\144\041\136\042\132\054\150\055" +
    "\131\001\002\000\030\006\155\020\134\021\133\022\140" +
    "\023\137\024\135\040\144\041\136\042\132\054\150\055" +
    "\131\001\002\000\040\006\uff23\007\uff23\010\uff23\020\uff23" +
    "\021\uff23\022\uff23\023\uff23\024\uff23\040\uff23\041\uff23\042" +
    "\uff23\044\uff23\045\uff23\054\uff23\055\uff23\001\002\000\040" +
    "\006\uff21\007\uff21\010\uff21\020\uff21\021\uff21\022\uff21\023" +
    "\uff21\024\uff21\040\uff21\041\uff21\042\uff21\044\uff21\045\uff21" +
    "\054\uff21\055\uff21\001\002\000\040\006\uff28\007\uff28\010" +
    "\uff28\020\uff28\021\uff28\022\uff28\023\uff28\024\uff28\040\uff28" +
    "\041\uff28\042\uff28\044\uff28\045\uff28\054\uff28\055\uff28\001" +
    "\002\000\040\006\uff26\007\uff26\010\uff26\020\uff26\021\uff26" +
    "\022\uff26\023\uff26\024\uff26\040\uff26\041\uff26\042\uff26\044" +
    "\uff26\045\uff26\054\uff26\055\uff26\001\002\000\010\003\071" +
    "\054\070\055\072\001\002\000\004\013\170\001\002\000" +
    "\042\006\uff19\007\uff19\010\uff19\012\171\020\uff19\021\uff19" +
    "\022\uff19\023\uff19\024\uff19\040\uff19\041\uff19\042\uff19\044" +
    "\uff19\045\uff19\054\uff19\055\uff19\001\002\000\010\003\071" +
    "\054\070\055\072\001\002\000\004\013\173\001\002\000" +
    "\040\006\uff18\007\uff18\010\uff18\020\uff18\021\uff18\022\uff18" +
    "\023\uff18\024\uff18\040\uff18\041\uff18\042\uff18\044\uff18\045" +
    "\uff18\054\uff18\055\uff18\001\002\000\040\006\uff17\007\uff17" +
    "\010\uff17\020\uff17\021\uff17\022\uff17\023\uff17\024\uff17\040" +
    "\uff17\041\uff17\042\uff17\044\uff17\045\uff17\054\uff17\055\uff17" +
    "\001\002\000\040\006\uff24\007\uff24\010\uff24\020\uff24\021" +
    "\uff24\022\uff24\023\uff24\024\uff24\040\uff24\041\161\042\160" +
    "\044\uff24\045\uff24\054\uff24\055\uff24\001\002\000\040\006" +
    "\uff16\007\uff16\010\uff16\020\uff16\021\uff16\022\uff16\023\uff16" +
    "\024\uff16\040\uff16\041\uff16\042\uff16\044\uff16\045\uff16\054" +
    "\uff16\055\uff16\001\002\000\040\006\uff15\007\uff15\010\uff15" +
    "\020\uff15\021\uff15\022\uff15\023\uff15\024\uff15\040\uff15\041" +
    "\uff15\042\uff15\044\uff15\045\uff15\054\uff15\055\uff15\001\002" +
    "\000\006\006\000\053\000\001\002\000\004\003\274\001" +
    "\002\000\004\010\uff7b\001\002\000\004\037\265\001\002" +
    "\000\006\010\uff45\037\245\001\002\000\004\037\256\001" +
    "\002\000\006\010\uff46\037\236\001\002\000\004\010\uff43" +
    "\001\002\000\010\003\056\006\055\037\234\001\002\000" +
    "\010\006\231\010\uff42\037\232\001\002\000\004\010\uff44" +
    "\001\002\000\012\007\uffb4\010\uffb4\044\225\045\224\001" +
    "\002\000\024\003\221\006\214\007\215\021\216\022\217" +
    "\023\205\037\201\054\220\055\203\001\002\000\004\003" +
    "\254\001\002\000\004\037\245\001\002\000\004\037\236" +
    "\001\002\000\004\037\234\001\002\000\006\006\231\037" +
    "\232\001\002\000\004\007\223\001\002\000\012\007\uffb2" +
    "\010\uffb2\044\225\045\224\001\002\000\022\003\221\006" +
    "\214\021\216\022\217\023\205\037\201\054\220\055\203" +
    "\001\002\000\022\003\221\006\214\021\216\022\217\023" +
    "\205\037\201\054\220\055\203\001\002\000\006\007\uffb3" +
    "\010\uffb3\001\002\000\006\007\uffaf\010\uffaf\001\002\000" +
    "\006\007\uffae\010\uffae\001\002\000\004\007\233\001\002" +
    "\000\012\007\uff94\010\uff94\044\uff94\045\uff94\001\002\000" +
    "\006\007\uffb0\010\uffb0\001\002\000\032\003\143\006\147" +
    "\020\134\021\133\022\140\023\137\024\135\040\144\041" +
    "\136\042\132\054\150\055\131\001\002\000\040\006\155" +
    "\007\uffad\010\uffad\020\134\021\133\022\140\023\137\024" +
    "\135\040\144\041\136\042\132\044\uffad\045\uffad\054\150" +
    "\055\131\001\002\000\016\003\241\021\242\022\244\023" +
    "\240\054\237\055\243\001\002\000\012\007\uffa9\010\uffa9" +
    "\044\uffa9\045\uffa9\001\002\000\012\007\uff9a\010\uff9a\044" +
    "\uff9a\045\uff9a\001\002\000\012\007\uffa8\010\uffa8\044\uffa8" +
    "\045\uffa8\001\002\000\012\007\uff95\010\uff95\044\uff95\045" +
    "\uff95\001\002\000\012\007\uff9f\010\uff9f\044\uff9f\045\uff9f" +
    "\001\002\000\012\007\uff96\010\uff96\044\uff96\045\uff96\001" +
    "\002\000\016\003\250\021\251\022\253\023\247\054\246" +
    "\055\252\001\002\000\012\007\uffa7\010\uffa7\044\uffa7\045" +
    "\uffa7\001\002\000\012\007\uff99\010\uff99\044\uff99\045\uff99" +
    "\001\002\000\012\007\uffa6\010\uffa6\044\uffa6\045\uffa6\001" +
    "\002\000\012\007\uff97\010\uff97\044\uff97\045\uff97\001\002" +
    "\000\012\007\uff9e\010\uff9e\044\uff9e\045\uff9e\001\002\000" +
    "\012\007\uff98\010\uff98\044\uff98\045\uff98\001\002\000\006" +
    "\007\uffb1\010\uffb1\001\002\000\006\007\uffb5\010\uffb5\001" +
    "\002\000\016\003\261\021\262\022\264\023\260\054\257" +
    "\055\263\001\002\000\012\007\uffab\010\uffab\044\uffab\045" +
    "\uffab\001\002\000\012\007\uff9d\010\uff9d\044\uff9d\045\uff9d" +
    "\001\002\000\012\007\uffaa\010\uffaa\044\uffaa\045\uffaa\001" +
    "\002\000\012\007\uff9b\010\uff9b\044\uff9b\045\uff9b\001\002" +
    "\000\012\007\uffa0\010\uffa0\044\uffa0\045\uffa0\001\002\000" +
    "\012\007\uff9c\010\uff9c\044\uff9c\045\uff9c\001\002\000\016" +
    "\003\270\021\271\022\273\023\267\054\266\055\272\001" +
    "\002\000\012\007\uffac\010\uffac\044\uffac\045\uffac\001\002" +
    "\000\012\007\uffa3\010\uffa3\044\uffa3\045\uffa3\001\002\000" +
    "\012\007\uffa4\010\uffa4\044\uffa4\045\uffa4\001\002\000\012" +
    "\007\uffa1\010\uffa1\044\uffa1\045\uffa1\001\002\000\012\007" +
    "\uffa5\010\uffa5\044\uffa5\045\uffa5\001\002\000\012\007\uffa2" +
    "\010\uffa2\044\uffa2\045\uffa2\001\002\000\012\007\uff93\010" +
    "\uff93\044\uff93\045\uff93\001\002\000\004\003\330\001\002" +
    "\000\010\003\071\054\070\055\072\001\002\000\010\003" +
    "\301\015\302\054\300\001\002\000\004\015\304\001\002" +
    "\000\004\010\uff69\001\002\000\004\003\303\001\002\000" +
    "\004\010\uff68\001\002\000\006\012\306\054\035\001\002" +
    "\000\004\010\uff6b\001\002\000\030\003\311\012\310\013" +
    "\uff56\014\uff56\020\042\021\041\022\046\023\044\024\043" +
    "\054\047\055\040\001\002\000\004\013\320\001\002\000" +
    "\026\003\uff56\013\uff56\014\uff56\020\042\021\041\022\046" +
    "\023\044\024\043\054\047\055\040\001\002\000\004\013" +
    "\uff4d\001\002\000\006\013\uff4e\014\313\001\002\000\030" +
    "\003\311\012\310\013\uff56\014\uff56\020\042\021\041\022" +
    "\046\023\044\024\043\054\047\055\040\001\002\000\004" +
    "\013\uff4f\001\002\000\006\013\uff51\014\316\001\002\000" +
    "\030\003\311\012\310\013\uff56\014\uff56\020\042\021\041" +
    "\022\046\023\044\024\043\054\047\055\040\001\002\000" +
    "\004\013\uff50\001\002\000\004\010\uff70\001\002\000\004" +
    "\013\322\001\002\000\004\012\323\001\002\000\010\003" +
    "\071\054\070\055\072\001\002\000\004\013\325\001\002" +
    "\000\012\003\021\046\022\047\026\050\027\001\002\000" +
    "\004\054\327\001\002\000\004\010\uff71\001\002\000\004" +
    "\010\uff6a\001\002\000\034\003\353\006\346\020\134\021" +
    "\344\022\352\023\347\024\135\037\201\040\144\041\136" +
    "\042\132\054\345\055\351\001\002\000\010\003\071\054" +
    "\070\055\072\001\002\000\004\013\334\001\002\000\006" +
    "\012\336\015\335\001\002\000\034\003\353\006\346\020" +
    "\134\021\344\022\352\023\347\024\135\037\201\040\144" +
    "\041\136\042\132\054\345\055\351\001\002\000\010\003" +
    "\071\054\070\055\072\001\002\000\004\013\340\001\002" +
    "\000\004\015\341\001\002\000\034\003\353\006\346\020" +
    "\134\021\344\022\352\023\347\024\135\037\201\040\144" +
    "\041\136\042\132\054\345\055\351\001\002\000\032\006" +
    "\155\010\uff74\020\134\021\133\022\140\023\137\024\135" +
    "\040\144\041\136\042\132\054\150\055\131\001\002\000" +
    "\004\010\uff73\001\002\000\036\006\uff1e\007\uff1e\010\uff1e" +
    "\020\uff1e\021\uff1e\022\uff1e\023\uff1e\024\uff1e\037\245\040" +
    "\uff1e\041\uff1e\042\uff1e\054\uff1e\055\uff1e\001\002\000\040" +
    "\003\056\006\055\010\uff1a\012\166\020\uff1a\021\uff1a\022" +
    "\uff1a\023\uff1a\024\uff1a\037\234\040\uff1a\041\uff1a\042\uff1a" +
    "\054\uff1a\055\uff1a\001\002\000\036\003\355\006\346\007" +
    "\215\020\134\021\344\022\352\023\347\024\135\037\201" +
    "\040\144\041\136\042\132\054\354\055\351\001\002\000" +
    "\036\006\uff1f\007\uff1f\010\uff1f\020\uff1f\021\uff1f\022\uff1f" +
    "\023\uff1f\024\uff1f\037\256\040\uff1f\041\uff1f\042\uff1f\054" +
    "\uff1f\055\uff1f\001\002\000\004\010\uff72\001\002\000\036" +
    "\006\uff20\007\uff20\010\uff20\020\uff20\021\uff20\022\uff20\023" +
    "\uff20\024\uff20\037\265\040\uff20\041\uff20\042\uff20\054\uff20" +
    "\055\uff20\001\002\000\036\006\uff1d\007\uff1d\010\uff1d\020" +
    "\uff1d\021\uff1d\022\uff1d\023\uff1d\024\uff1d\037\236\040\uff1d" +
    "\041\uff1d\042\uff1d\054\uff1d\055\uff1d\001\002\000\010\006" +
    "\231\007\165\037\232\001\002\000\036\006\uff1a\007\uff1a" +
    "\012\166\020\uff1a\021\uff1a\022\uff1a\023\uff1a\024\uff1a\037" +
    "\234\040\uff1a\041\uff1a\042\uff1a\054\uff1a\055\uff1a\001\002" +
    "\000\036\006\231\007\165\010\uff25\020\uff25\021\uff25\022" +
    "\uff25\023\uff25\024\uff25\037\232\040\uff25\041\uff25\042\uff25" +
    "\054\uff25\055\uff25\001\002\000\032\006\155\010\uff79\020" +
    "\134\021\133\022\140\023\137\024\135\040\144\041\136" +
    "\042\132\054\150\055\131\001\002\000\004\010\uff78\001" +
    "\002\000\004\010\uff77\001\002\000\032\006\155\010\uff80" +
    "\020\134\021\133\022\140\023\137\024\135\040\144\041" +
    "\136\042\132\054\150\055\131\001\002\000\004\010\uff81" +
    "\001\002\000\004\010\uff6f\001\002\000\006\002\ufffe\006" +
    "\371\001\002\000\016\046\015\047\017\050\016\051\020" +
    "\052\012\054\011\001\002\000\004\010\367\001\002\000" +
    "\006\006\uffff\053\uffff\001\002\000\004\054\u010f\001\002" +
    "\000\022\003\u0103\007\375\046\u0101\047\u0100\050\u0106\051" +
    "\377\052\u0104\054\u0102\001\002\000\006\002\ufffd\006\371" +
    "\001\002\000\006\002\ufff5\006\ufff5\001\002\000\006\002" +
    "\ufff6\006\ufff6\001\002\000\004\054\uffec\001\002\000\004" +
    "\054\u010c\001\002\000\012\003\021\046\022\047\026\050" +
    "\027\001\002\000\022\006\uffe6\033\uffe6\046\uffe6\047\uffe6" +
    "\050\uffe6\051\uffe6\052\uffe6\054\uffe6\001\002\000\022\006" +
    "\uffe7\033\uffe7\046\uffe7\047\uffe7\050\uffe7\051\uffe7\052\uffe7" +
    "\054\uffe7\001\002\000\004\054\u0109\001\002\000\022\006" +
    "\uffe2\033\uffe2\046\uffe2\047\uffe2\050\uffe2\051\uffe2\052\uffe2" +
    "\054\uffe2\001\002\000\012\003\021\046\022\047\026\050" +
    "\027\001\002\000\004\007\u0107\001\002\000\022\006\uffe5" +
    "\033\uffe5\046\uffe5\047\uffe5\050\uffe5\051\uffe5\052\uffe5\054" +
    "\uffe5\001\002\000\004\054\uffeb\001\002\000\022\006\uffe3" +
    "\033\uffe3\046\uffe3\047\uffe3\050\uffe3\051\uffe3\052\uffe3\054" +
    "\uffe3\001\002\000\004\003\u010a\001\002\000\004\007\uffe8" +
    "\001\002\000\022\006\uffe4\033\uffe4\046\uffe4\047\uffe4\050" +
    "\uffe4\051\uffe4\052\uffe4\054\uffe4\001\002\000\006\007\uffe9" +
    "\014\u010d\001\002\000\020\003\u0103\046\u0101\047\u0100\050" +
    "\u0106\051\377\052\u0104\054\u0102\001\002\000\004\007\uffea" +
    "\001\002\000\004\006\u0110\001\002\000\004\025\u0111\001" +
    "\002\000\006\003\u0112\015\u0113\001\002\000\006\002\ufff0" +
    "\006\ufff0\001\002\000\020\003\u0103\020\u0114\046\u0101\047" +
    "\u0100\050\u0106\051\377\052\u0104\001\002\000\022\005\u01c6" +
    "\006\u011c\046\015\047\017\050\016\051\020\052\012\054" +
    "\u011b\001\002\000\022\006\u011c\033\u0119\046\015\047\017" +
    "\050\016\051\020\052\012\054\u011b\001\002\000\026\003" +
    "\uffde\005\uffde\006\uffde\033\uffde\046\uffde\047\uffde\050\uffde" +
    "\051\uffde\052\uffde\054\uffde\001\002\000\026\003\uffda\005" +
    "\uffda\006\uffda\033\uffda\046\uffda\047\uffda\050\uffda\051\uffda" +
    "\052\uffda\054\uffda\001\002\000\026\003\uffd6\005\uffd6\006" +
    "\uffd6\033\uffd6\046\uffd6\047\uffd6\050\uffd6\051\uffd6\052\uffd6" +
    "\054\uffd6\001\002\000\022\010\uff56\020\042\021\041\022" +
    "\046\023\044\024\043\054\047\055\040\001\002\000\024" +
    "\003\u01bc\006\u011c\033\u01bb\046\015\047\017\050\016\051" +
    "\020\052\012\054\u011b\001\002\000\012\003\056\006\055" +
    "\012\332\015\331\001\002\000\026\003\221\006\214\021" +
    "\216\022\217\023\205\027\u0125\034\u0127\037\201\054\u0124" +
    "\055\203\001\002\000\004\010\u0123\001\002\000\026\003" +
    "\uffdc\005\uffdc\006\uffdc\033\uffdc\046\uffdc\047\uffdc\050\uffdc" +
    "\051\uffdc\052\uffdc\054\uffdc\001\002\000\004\010\u0122\001" +
    "\002\000\026\003\uffd4\005\uffd4\006\uffd4\033\uffd4\046\uffd4" +
    "\047\uffd4\050\uffd4\051\uffd4\052\uffd4\054\uffd4\001\002\000" +
    "\026\003\uffe0\005\uffe0\006\uffe0\033\uffe0\046\uffe0\047\uffe0" +
    "\050\uffe0\051\uffe0\052\uffe0\054\uffe0\001\002\000\026\003" +
    "\uffd2\005\uffd2\006\uffd2\033\uffd2\046\uffd2\047\uffd2\050\uffd2" +
    "\051\uffd2\052\uffd2\054\uffd2\001\002\000\026\003\uffd8\005" +
    "\uffd8\006\uffd8\033\uffd8\046\uffd8\047\uffd8\050\uffd8\051\uffd8" +
    "\052\uffd8\054\uffd8\001\002\000\010\007\u0174\014\u0173\037" +
    "\234\001\002\000\006\003\u0153\015\u0154\001\002\000\004" +
    "\007\u0130\001\002\000\006\003\u0128\015\u0129\001\002\000" +
    "\026\003\uff2d\005\uff2d\006\uff2d\033\uff2d\046\uff2d\047\uff2d" +
    "\050\uff2d\051\uff2d\052\uff2d\054\uff2d\001\002\000\006\003" +
    "\u012b\054\u012a\001\002\000\006\003\u012d\005\u012c\001\002" +
    "\000\026\003\uff2c\005\uff2c\006\uff2c\033\uff2c\046\uff2c\047" +
    "\uff2c\050\uff2c\051\uff2c\052\uff2c\054\uff2c\001\002\000\006" +
    "\003\u012e\010\u012f\001\002\000\026\003\uff2b\005\uff2b\006" +
    "\uff2b\033\uff2b\046\uff2b\047\uff2b\050\uff2b\051\uff2b\052\uff2b" +
    "\054\uff2b\001\002\000\026\003\uff2a\005\uff2a\006\uff2a\033" +
    "\uff2a\046\uff2a\047\uff2a\050\uff2a\051\uff2a\052\uff2a\054\uff2a" +
    "\001\002\000\026\003\uff2e\005\uff2e\006\uff2e\033\uff2e\046" +
    "\uff2e\047\uff2e\050\uff2e\051\uff2e\052\uff2e\054\uff2e\001\002" +
    "\000\004\006\u0131\001\002\000\006\026\u0132\030\u0133\001" +
    "\002\000\004\015\u0142\001\002\000\004\015\u0134\001\002" +
    "\000\022\005\u0135\006\u011c\046\015\047\017\050\016\051" +
    "\020\052\012\054\u011b\001\002\000\026\003\uffd0\005\uffd0" +
    "\006\uffd0\033\uffd0\046\uffd0\047\uffd0\050\uffd0\051\uffd0\052" +
    "\uffd0\054\uffd0\001\002\000\022\005\u013a\006\u011c\046\015" +
    "\047\017\050\016\051\020\052\012\054\u011b\001\002\000" +
    "\026\003\uffdb\005\uffdb\006\uffdb\033\uffdb\046\uffdb\047\uffdb" +
    "\050\uffdb\051\uffdb\052\uffdb\054\uffdb\001\002\000\026\003" +
    "\uffd7\005\uffd7\006\uffd7\033\uffd7\046\uffd7\047\uffd7\050\uffd7" +
    "\051\uffd7\052\uffd7\054\uffd7\001\002\000\026\003\uffd5\005" +
    "\uffd5\006\uffd5\033\uffd5\046\uffd5\047\uffd5\050\uffd5\051\uffd5" +
    "\052\uffd5\054\uffd5\001\002\000\026\003\uffd1\005\uffd1\006" +
    "\uffd1\033\uffd1\046\uffd1\047\uffd1\050\uffd1\051\uffd1\052\uffd1" +
    "\054\uffd1\001\002\000\026\003\uffe1\005\uffe1\006\uffe1\033" +
    "\uffe1\046\uffe1\047\uffe1\050\uffe1\051\uffe1\052\uffe1\054\uffe1" +
    "\001\002\000\026\003\uffdf\005\uffdf\006\uffdf\033\uffdf\046" +
    "\uffdf\047\uffdf\050\uffdf\051\uffdf\052\uffdf\054\uffdf\001\002" +
    "\000\004\010\u0141\001\002\000\026\003\uffdd\005\uffdd\006" +
    "\uffdd\033\uffdd\046\uffdd\047\uffdd\050\uffdd\051\uffdd\052\uffdd" +
    "\054\uffdd\001\002\000\004\010\u0140\001\002\000\026\003" +
    "\uffd9\005\uffd9\006\uffd9\033\uffd9\046\uffd9\047\uffd9\050\uffd9" +
    "\051\uffd9\052\uffd9\054\uffd9\001\002\000\026\003\uffd3\005" +
    "\uffd3\006\uffd3\033\uffd3\046\uffd3\047\uffd3\050\uffd3\051\uffd3" +
    "\052\uffd3\054\uffd3\001\002\000\022\005\uffc4\006\u0144\046" +
    "\015\047\017\050\016\051\020\052\012\054\u011b\001\002" +
    "\000\022\005\uffc4\006\u0144\046\015\047\017\050\016\051" +
    "\020\052\012\054\u011b\001\002\000\030\003\221\006\214" +
    "\021\216\022\217\023\205\027\u0125\032\u0147\034\u0127\037" +
    "\201\054\u0124\055\203\001\002\000\004\005\u0146\001\002" +
    "\000\026\003\uffc9\005\uffc9\006\uffc9\033\uffc9\046\uffc9\047" +
    "\uffc9\050\uffc9\051\uffc9\052\uffc9\054\uffc9\001\002\000\004" +
    "\007\u014e\001\002\000\004\007\u0149\001\002\000\006\006" +
    "\u0131\015\u014a\001\002\000\022\005\uffc4\006\u0144\046\015" +
    "\047\017\050\016\051\020\052\012\054\u011b\001\002\000" +
    "\022\005\uffc4\006\u0144\046\015\047\017\050\016\051\020" +
    "\052\012\054\u011b\001\002\000\004\005\uffc7\001\002\000" +
    "\004\005\uffc8\001\002\000\004\015\u014f\001\002\000\022" +
    "\005\uffc5\006\u011c\046\015\047\017\050\016\051\020\052" +
    "\012\054\u011b\001\002\000\022\005\uffc6\006\u011c\046\015" +
    "\047\017\050\016\051\020\052\012\054\u011b\001\002\000" +
    "\004\005\u0152\001\002\000\026\003\uffca\005\uffca\006\uffca" +
    "\033\uffca\046\uffca\047\uffca\050\uffca\051\uffca\052\uffca\054" +
    "\uffca\001\002\000\026\003\uff3d\005\uff3d\006\uff3d\033\uff3d" +
    "\046\uff3d\047\uff3d\050\uff3d\051\uff3d\052\uff3d\054\uff3d\001" +
    "\002\000\016\003\071\005\u0155\017\u0157\023\u0156\054\070" +
    "\055\072\001\002\000\004\010\u0172\001\002\000\006\005" +
    "\uff2f\040\u015a\001\002\000\006\005\uff2f\040\u015a\001\002" +
    "\000\006\005\uff2f\040\u015a\001\002\000\006\005\u0165\040" +
    "\u0166\001\002\000\030\003\u015c\005\uff56\017\u015d\020\042" +
    "\021\041\022\046\023\044\024\043\040\uff56\054\u015b\055" +
    "\040\001\002\000\010\005\uff5c\012\u015f\040\uff5c\001\002" +
    "\000\006\005\uff32\040\uff32\001\002\000\006\005\uff33\040" +
    "\uff33\001\002\000\006\005\uff35\040\uff35\001\002\000\010" +
    "\003\071\054\070\055\072\001\002\000\004\013\u0161\001" +
    "\002\000\010\005\uff31\012\u0162\040\uff31\001\002\000\010" +
    "\003\071\054\070\055\072\001\002\000\004\013\u0164\001" +
    "\002\000\006\005\uff30\040\uff30\001\002\000\006\003\u0169" +
    "\010\u016a\001\002\000\026\005\uff56\017\u0167\020\042\021" +
    "\041\022\046\023\044\024\043\040\uff56\054\047\055\040" +
    "\001\002\000\006\005\uff34\040\uff34\001\002\000\006\005" +
    "\uff36\040\uff36\001\002\000\026\003\uff3b\005\uff3b\006\uff3b" +
    "\033\uff3b\046\uff3b\047\uff3b\050\uff3b\051\uff3b\052\uff3b\054" +
    "\uff3b\001\002\000\026\003\uff39\005\uff39\006\uff39\033\uff39" +
    "\046\uff39\047\uff39\050\uff39\051\uff39\052\uff39\054\uff39\001" +
    "\002\000\006\005\u016c\040\u0166\001\002\000\004\010\u016d" +
    "\001\002\000\026\003\uff38\005\uff38\006\uff38\033\uff38\046" +
    "\uff38\047\uff38\050\uff38\051\uff38\052\uff38\054\uff38\001\002" +
    "\000\006\005\u016f\040\u0166\001\002\000\006\003\u0170\010" +
    "\u0171\001\002\000\026\003\uff3c\005\uff3c\006\uff3c\033\uff3c" +
    "\046\uff3c\047\uff3c\050\uff3c\051\uff3c\052\uff3c\054\uff3c\001" +
    "\002\000\026\003\uff3a\005\uff3a\006\uff3a\033\uff3a\046\uff3a" +
    "\047\uff3a\050\uff3a\051\uff3a\052\uff3a\054\uff3a\001\002\000" +
    "\026\003\uff37\005\uff37\006\uff37\033\uff37\046\uff37\047\uff37" +
    "\050\uff37\051\uff37\052\uff37\054\uff37\001\002\000\010\003" +
    "\071\054\070\055\072\001\002\000\004\006\u0175\001\002" +
    "\000\004\026\u0176\001\002\000\004\015\u0177\001\002\000" +
    "\004\006\u0178\001\002\000\024\003\u0184\021\u017d\022\u0181" +
    "\023\u017f\024\u017e\032\u0182\037\u017b\054\u0183\055\u017c\001" +
    "\002\000\004\005\u017a\001\002\000\026\003\uffc3\005\uffc3" +
    "\006\uffc3\033\uffc3\046\uffc3\047\uffc3\050\uffc3\051\uffc3\052" +
    "\uffc3\054\uffc3\001\002\000\014\021\u01a0\022\u01a2\023\u019f" +
    "\054\u019e\055\u01a1\001\002\000\010\007\uff83\011\u019a\037" +
    "\u01ad\001\002\000\004\007\uff86\001\002\000\004\007\uff84" +
    "\001\002\000\004\037\u01ac\001\002\000\004\007\u01a7\001" +
    "\002\000\004\007\uff85\001\002\000\004\007\u01a4\001\002" +
    "\000\006\011\u0195\037\u01a3\001\002\000\010\006\u0185\007" +
    "\uff82\015\u0186\001\002\000\004\015\u0192\001\002\000\020" +
    "\006\u011c\046\015\047\017\050\016\051\020\052\012\054" +
    "\u011b\001\002\000\020\006\u0189\046\015\047\017\050\016" +
    "\051\020\052\012\054\u011b\001\002\000\004\005\uffbe\001" +
    "\002\000\032\003\u0190\006\214\021\u018c\022\u018e\023\u018d" +
    "\024\u017e\027\u0125\032\u0182\034\u0127\037\u018a\054\u018f\055" +
    "\u018b\001\002\000\016\003\274\021\u01a0\022\u01a2\023\u019f" +
    "\054\u019e\055\u01a1\001\002\000\010\007\uff83\011\u019a\037" +
    "\u019b\001\002\000\006\007\uff86\037\245\001\002\000\004" +
    "\037\u0199\001\002\000\006\007\uff85\037\236\001\002\000" +
    "\012\007\u0174\011\u0195\014\u0173\037\u0196\001\002\000\012" +
    "\006\u0191\007\uff82\015\u0186\037\232\001\002\000\006\007" +
    "\233\015\u0192\001\002\000\020\006\u011c\046\015\047\017" +
    "\050\016\051\020\052\012\054\u011b\001\002\000\020\006" +
    "\u0189\046\015\047\017\050\016\051\020\052\012\054\u011b" +
    "\001\002\000\004\005\uffbd\001\002\000\006\054\u0197\055" +
    "\u0198\001\002\000\034\003\143\006\147\007\uff92\020\134" +
    "\021\133\022\140\023\137\024\135\040\144\041\136\042" +
    "\132\054\150\055\131\001\002\000\004\007\uff89\001\002" +
    "\000\004\007\uff88\001\002\000\020\003\261\007\uff90\021" +
    "\262\022\264\023\260\054\257\055\263\001\002\000\006" +
    "\054\u019c\055\u019d\001\002\000\020\003\270\007\uff8b\021" +
    "\271\022\273\023\267\054\266\055\272\001\002\000\004" +
    "\007\uff87\001\002\000\004\007\uff8a\001\002\000\004\007" +
    "\uff91\001\002\000\004\007\uff8f\001\002\000\004\007\uff8c" +
    "\001\002\000\004\007\uff8e\001\002\000\004\007\uff8d\001" +
    "\002\000\004\007\uff92\001\002\000\004\015\u01a5\001\002" +
    "\000\022\005\uffbf\006\u011c\046\015\047\017\050\016\051" +
    "\020\052\012\054\u011b\001\002\000\022\005\uffc0\006\u011c" +
    "\046\015\047\017\050\016\051\020\052\012\054\u011b\001" +
    "\002\000\004\015\u01a8\001\002\000\020\006\u0189\046\015" +
    "\047\017\050\016\051\020\052\012\054\u011b\001\002\000" +
    "\004\005\uffc1\001\002\000\020\006\u0189\046\015\047\017" +
    "\050\016\051\020\052\012\054\u011b\001\002\000\004\005" +
    "\uffc2\001\002\000\004\007\uff90\001\002\000\004\007\uff8b" +
    "\001\002\000\004\035\u01af\001\002\000\010\003\071\054" +
    "\070\055\072\001\002\000\004\014\u01b1\001\002\000\004" +
    "\040\u01b2\001\002\000\010\003\071\054\070\055\072\001" +
    "\002\000\004\007\u01b4\001\002\000\004\006\u01b5\001\002" +
    "\000\004\031\u01b6\001\002\000\004\015\u01b7\001\002\000" +
    "\022\005\u01b8\006\u011c\046\015\047\017\050\016\051\020" +
    "\052\012\054\u011b\001\002\000\026\003\uffce\005\uffce\006" +
    "\uffce\033\uffce\046\uffce\047\uffce\050\uffce\051\uffce\052\uffce" +
    "\054\uffce\001\002\000\022\005\u01ba\006\u011c\046\015\047" +
    "\017\050\016\051\020\052\012\054\u011b\001\002\000\026" +
    "\003\uffcf\005\uffcf\006\uffcf\033\uffcf\046\uffcf\047\uffcf\050" +
    "\uffcf\051\uffcf\052\uffcf\054\uffcf\001\002\000\024\003\uff56" +
    "\010\uff56\020\042\021\041\022\046\023\044\024\043\054" +
    "\047\055\040\001\002\000\006\002\uffef\006\uffef\001\002" +
    "\000\006\003\u01be\010\u01bf\001\002\000\004\010\u01c2\001" +
    "\002\000\006\003\u01c1\005\u01c0\001\002\000\006\002\ufff4" +
    "\006\ufff4\001\002\000\006\002\uffee\006\uffee\001\002\000" +
    "\006\002\uffed\006\uffed\001\002\000\004\010\u01c4\001\002" +
    "\000\004\005\u01c5\001\002\000\006\002\ufff1\006\ufff1\001" +
    "\002\000\006\002\ufff2\006\ufff2\001\002\000\022\005\u01c8" +
    "\006\u011c\046\015\047\017\050\016\051\020\052\012\054" +
    "\u011b\001\002\000\006\002\ufff3\006\ufff3\001\002\000\004" +
    "\002\001\001\002\000\006\002\ufffb\006\371\001\002\000" +
    "\006\002\ufff8\006\ufff8\001\002\000\006\003\u01ce\006\u01cd" +
    "\001\002\000\004\036\u01d3\001\002\000\004\036\u01cf\001" +
    "\002\000\004\015\u01d0\001\002\000\020\006\u011c\046\015" +
    "\047\017\050\016\051\020\052\012\054\u011b\001\002\000" +
    "\022\005\u01d2\006\u011c\046\015\047\017\050\016\051\020" +
    "\052\012\054\u011b\001\002\000\006\002\ufff9\006\ufff9\001" +
    "\002\000\004\015\u01d4\001\002\000\022\005\u01d5\006\u011c" +
    "\046\015\047\017\050\016\051\020\052\012\054\u011b\001" +
    "\002\000\006\002\ufff7\006\ufff7\001\002\000\022\005\u01d7" +
    "\006\u011c\046\015\047\017\050\016\051\020\052\012\054" +
    "\u011b\001\002\000\006\002\ufffa\006\ufffa\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u01d5\000\010\002\006\003\005\004\004\001\001\000" +
    "\002\001\001\000\010\005\u01c9\006\372\007\367\001\001" +
    "\000\002\001\001\000\004\004\363\001\001\000\006\030" +
    "\013\036\012\001\001\000\002\001\001\000\004\034\276" +
    "\001\001\000\012\023\206\025\211\026\212\037\201\001" +
    "\001\000\002\001\001\000\004\031\123\001\001\000\004" +
    "\031\113\001\001\000\004\031\101\001\001\000\004\034" +
    "\024\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\015\072\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\023" +
    "\035\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\032\047\035\044\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\032\047\035\053\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\024" +
    "\060\032\062\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\024\064\032\062\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\034\074\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\031\110\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\023\120\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\023\140\044\145\045\144\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\045\174\001\001\000\002\001\001" +
    "\000\004\045\153\001\001\000\006\044\151\045\144\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\045\153" +
    "\001\001\000\006\044\163\045\144\001\001\000\002\001" +
    "\001\000\006\044\155\045\144\001\001\000\004\045\153" +
    "\001\001\000\002\001\001\000\004\045\162\001\001\000" +
    "\004\045\161\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\045\153\001\001\000\002\001\001\000\004\015" +
    "\166\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\015\171\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\027\254\001\001" +
    "\000\006\025\221\026\212\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\027\225\001\001\000" +
    "\006\025\227\026\212\001\001\000\006\025\226\026\212" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\044\234\045\144\001\001\000\004\045\153\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\015\320\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\023\304\001\001\000\002\001\001\000\006\032\311" +
    "\033\306\001\001\000\002\001\001\000\006\032\047\035" +
    "\314\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\032\311\033\313\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\032\311\033\316\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\015\323\001\001\000\002\001\001\000\004\034\325" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\023\362\025\361\026\212\044\360\045\144" +
    "\001\001\000\004\015\332\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\023\357\025\356\026\212\044\355" +
    "\045\144\001\001\000\004\015\336\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\023\347\025\342\026\212" +
    "\044\341\045\144\001\001\000\004\045\153\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\025\221\026\212\044\151\045\144\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\045\153\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\045\153\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\005\371\006\372\007\367\001\001\000\006" +
    "\030\365\036\012\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\010\u0104\011\375\001\001" +
    "\000\006\006\373\007\367\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\034\u010a\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\034\u0107\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\010\u010d\011\375\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\011\u0114\001" +
    "\001\000\026\012\u01c6\013\u0120\014\u0115\016\u011d\020\u0116" +
    "\023\u011e\030\u011c\036\012\041\u0117\043\u011f\001\001\000" +
    "\026\012\u0119\013\u0120\014\u0115\016\u011d\020\u0116\023\u011e" +
    "\030\u011c\036\012\041\u0117\043\u011f\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\032\u01c2" +
    "\001\001\000\024\013\u013a\014\u013b\016\u013d\020\u0136\023" +
    "\u013c\030\u013e\036\012\041\u0137\043\u0138\001\001\000\002" +
    "\001\001\000\006\025\u0125\026\212\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\012\u0135\013\u0120\014\u0115\016\u011d\020\u0116\023\u011e\030" +
    "\u011c\036\012\041\u0117\043\u011f\001\001\000\002\001\001" +
    "\000\024\013\u013a\014\u013b\016\u013d\020\u0136\023\u013c\030" +
    "\u013e\036\012\041\u0137\043\u0138\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\012\u0142\013\u0120\014\u0115\016\u011d\017\u0144" +
    "\020\u0116\023\u011e\030\u011c\036\012\041\u0117\043\u011f\001" +
    "\001\000\026\013\u013a\014\u013b\016\u013d\017\u0150\020\u0136" +
    "\023\u013c\030\u013e\036\012\041\u0137\043\u0138\001\001\000" +
    "\006\025\u0147\026\212\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\012\u014a\013\u0120\014\u0115\016\u011d\017\u014b" +
    "\020\u0116\023\u011e\030\u011c\036\012\041\u0117\043\u011f\001" +
    "\001\000\026\013\u013a\014\u013b\016\u013d\017\u014c\020\u0136" +
    "\023\u013c\030\u013e\036\012\041\u0137\043\u0138\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\012\u014f\013\u0120\014\u0115\016\u011d\020\u0116\023\u011e\030" +
    "\u011c\036\012\041\u0117\043\u011f\001\001\000\024\013\u013a" +
    "\014\u013b\016\u013d\020\u0136\023\u013c\030\u013e\036\012\041" +
    "\u0137\043\u0138\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\015\u0157\001\001\000\002\001" +
    "\001\000\004\042\u016d\001\001\000\004\042\u016a\001\001" +
    "\000\004\042\u0158\001\001\000\002\001\001\000\004\032" +
    "\u015d\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\015\u015f\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\015\u0162\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\032\u0167\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\015\u01ad\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\021\u0178\001\001\000" +
    "\004\022\u017f\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\012\u0186\013\u0120\014\u0115" +
    "\016\u011d\020\u0116\023\u011e\030\u011c\036\012\041\u0117\043" +
    "\u011f\001\001\000\026\013\u013a\014\u013b\016\u013d\020\u0136" +
    "\021\u0187\023\u013c\030\u013e\036\012\041\u0137\043\u0138\001" +
    "\001\000\002\001\001\000\010\022\u017f\025\u0125\026\212" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\012\u0192\013" +
    "\u0120\014\u0115\016\u011d\020\u0116\023\u011e\030\u011c\036\012" +
    "\041\u0117\043\u011f\001\001\000\026\013\u013a\014\u013b\016" +
    "\u013d\020\u0136\021\u0193\023\u013c\030\u013e\036\012\041\u0137" +
    "\043\u0138\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\044\234\045\144\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\012\u01a5\013\u0120\014\u0115\016\u011d\020\u0116\023\u011e\030" +
    "\u011c\036\012\041\u0117\043\u011f\001\001\000\024\013\u013a" +
    "\014\u013b\016\u013d\020\u0136\023\u013c\030\u013e\036\012\041" +
    "\u0137\043\u0138\001\001\000\002\001\001\000\030\012\u01a9" +
    "\013\u0120\014\u0115\016\u011d\020\u0116\021\u01a8\023\u011e\030" +
    "\u011c\036\012\041\u0117\043\u011f\001\001\000\002\001\001" +
    "\000\026\013\u013a\014\u013b\016\u013d\020\u0136\021\u01aa\023" +
    "\u013c\030\u013e\036\012\041\u0137\043\u0138\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\015\u01af\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\015\u01b2\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\012\u01b8\013\u0120\014\u0115\016\u011d\020\u0116\023\u011e\030" +
    "\u011c\036\012\041\u0117\043\u011f\001\001\000\002\001\001" +
    "\000\024\013\u013a\014\u013b\016\u013d\020\u0136\023\u013c\030" +
    "\u013e\036\012\041\u0137\043\u0138\001\001\000\002\001\001" +
    "\000\004\032\u01bc\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\013\u013a\014\u013b\016\u013d\020\u0136\023\u013c\030\u013e\036" +
    "\012\041\u0137\043\u0138\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\006\373\007\367\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\012\u01d0\013\u0120\014\u0115\016" +
    "\u011d\020\u0116\023\u011e\030\u011c\036\012\041\u0117\043\u011f" +
    "\001\001\000\024\013\u013a\014\u013b\016\u013d\020\u0136\023" +
    "\u013c\030\u013e\036\012\041\u0137\043\u0138\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\012\u01d5\013\u0120\014" +
    "\u0115\016\u011d\020\u0116\023\u011e\030\u011c\036\012\041\u0117" +
    "\043\u011f\001\001\000\002\001\001\000\024\013\u013a\014" +
    "\u013b\016\u013d\020\u0136\023\u013c\030\u013e\036\012\041\u0137" +
    "\043\u0138\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ASintaxT$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ASintaxT$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ASintaxT$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public Symbol getS(){
            return this.s;
        }
    /**
     * Método al que se llama automáticamente ante algún error sintactico.
    **/ 
    public void syntax_error(Symbol s){
        this.s = s;
        System.out.println("Error Sintáctico recuperable en la Línea " + (s.right) +
        " Columna "+s.left+ ". No se esperaba este componente: " +s.value+".");

        String report = "Syntax error in line " + getS().right + " Column " + getS().left + ". No se esperaba este componente: " + getS().value;
        if(getS().value == null){
            report = "You didn't close your last code structure";
        }
        addError(report + "\n");
         
    }

    /**
     * Método al que se llama automáticamente ante algún error sintáctico 
     * en el que ya no es posible una recuperación de errores.
     **/ 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error síntactico irrecuperable en la Línea " + 
        (s.right)+ " Columna "+s.left+". Componente " + s.value + 
        " no reconocido."); 
    }
    
    //Guardar los errores encontrados
    private String ERRORES = "";
    private int cERRORES = 0;
    public void addError(String error){
        this.ERRORES += error;
       this.cERRORES++;
    }
    public String getERRORES(){
        return this.ERRORES;
    }
    public void setERRORES(String err){
        this.ERRORES = err;
    }

    public int getcERRORES(){
        return this.cERRORES;
    }
    public void setcERRORES(int err){
        this.cERRORES = err;
    }

    public String errorMessage(String error, Symbol s){
        String report = "Syntax error in line " + s.right + " Column " + s.left + ". No se esperaba este componente: " +s.value+ "\nDescripción: " + error +"\n";
        this.addError(report);
        System.out.println("Cantidad: " + getcERRORES());
        return report;
    }

    //Se vino el arbolito papa
    DefaultMutableTreeNode sintaxTree;
    DefaultTreeModel sintaxTreeModel;
    DefaultMutableTreeNode nodoActual;

    public DefaultTreeModel createTreeSintax(String name){
        this.sintaxTree = new DefaultMutableTreeNode(name);
        this.sintaxTreeModel = new DefaultTreeModel(sintaxTree);
        this.nodoActual = this.sintaxTree;
        return sintaxTreeModel;
    }
    
    public DefaultMutableTreeNode getTreeSintax(){
        return this.sintaxTree;
    }
    
    public DefaultTreeModel getTreeSintaxModel(){
        return this.sintaxTreeModel;
    }

     public DefaultMutableTreeNode createNodo(String name){
        return new DefaultMutableTreeNode(name);
    }

    public DefaultMutableTreeNode createNodoObject(String name, int numLine){
        return new DefaultMutableTreeNode(new InstructionCode(name, numLine));
    }
    
    public void agregarNodo(DefaultMutableTreeNode nodo){
        this.sintaxTree.add(nodo);
    }

    public void insertInicioNodo(DefaultMutableTreeNode nodo){
        this.sintaxTree.insert(nodo,0);
    }
    
    public void setNodoActual(DefaultMutableTreeNode nodo){
        this.nodoActual = nodo;
    }

    public DefaultMutableTreeNode getNodoActual(){
        return this.nodoActual;
    }

    public DefaultMutableTreeNode addAllChildren(DefaultMutableTreeNode father, DefaultMutableTreeNode padrastro){
        for (int i = 0; i < father.getChildCount(); i++) {
            padrastro.add((DefaultMutableTreeNode)father.getChildAt(i));
        }
        return padrastro;
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$ASintaxT$actions {
  private final ASintaxT parser;

  /** Constructor */
  CUP$ASintaxT$actions(ASintaxT parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$ASintaxT$do_action(
    int                        CUP$ASintaxT$act_num,
    java_cup.runtime.lr_parser CUP$ASintaxT$parser,
    java.util.Stack            CUP$ASintaxT$stack,
    int                        CUP$ASintaxT$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ASintaxT$result;

      /* select the action based on the action number */
      switch (CUP$ASintaxT$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // EXPR ::= MOD error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
                String  desc = "Elemento para sacar mod no es válido";
                String mes = parser.errorMessage(desc, parser.getS());
                DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
                RESULT = nodo;
                parser.report_error(mes ,err);
            
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("EXPR",35, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // EXPR ::= OP_MULTI_DIV error 
            {
              Object RESULT =null;
		int mdleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).left;
		int mdright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).right;
		Object md = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).value;
		int errleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
                String  desc = "Elemento para multiplicar/división en la expresión no válida";
                String mes = parser.errorMessage(desc, parser.getS());
                DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
                RESULT = nodo;
                parser.report_error(mes ,err);
            
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("EXPR",35, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // EXPR ::= OP_SUM error 
            {
              Object RESULT =null;
		int suleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).left;
		int suright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).right;
		Object su = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).value;
		int errleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
                String desc = "";
                desc = "Elemento para sumar/restar en la expresión no válida";
                String mes = parser.errorMessage(desc, parser.getS());
                DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
                RESULT = nodo;
                parser.report_error(mes ,err);
            
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("EXPR",35, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // EXPR ::= ID OPEN_SQR_BRACKET N_TO_FOR CLOSE_SQR_BRACKET OPEN_SQR_BRACKET N_TO_FOR CLOSE_SQR_BRACKET 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-6)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-5)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-5)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-4)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).value;
		DefaultMutableTreeNode nodo = parser.createNodoObject(id+"",idright);//DefaultMutableTreeNode nodo = parser.createNodo(id+"");
                  nodo.add(parser.createNodoObject(n1+"",e1right));//nodo.add(parser.createNodo(n1+""));
                  nodo.add(parser.createNodoObject(n2+"",e2right));//nodo.add(parser.createNodo(n2+""));
                  RESULT = nodo;
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("EXPR",35, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-6)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // EXPR ::= ID OPEN_SQR_BRACKET N_TO_FOR CLOSE_SQR_BRACKET 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).value;
		DefaultMutableTreeNode nodo = parser.createNodoObject(id+"", idright);//DefaultMutableTreeNode nodo = parser.createNodo(id+"");
                  nodo.add(parser.createNodoObject(n+"", nright));//nodo.add(parser.createNodo(n+""));
                  RESULT = nodo;
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("EXPR",35, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // EXPR ::= ID 
            {
              Object RESULT =null;
		int nlleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int nlright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		String nl = (String)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		DefaultMutableTreeNode nodo = parser.createNodoObject(nl+"",nlright);//DefaultMutableTreeNode nodo = parser.createNodo(nl+"");
                  RESULT = nodo;
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("EXPR",35, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // EXPR ::= NULL 
            {
              Object RESULT =null;
		int nlleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int nlright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object nl = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		DefaultMutableTreeNode nodo = parser.createNodoObject(nl+"",nlright);//DefaultMutableTreeNode nodo = parser.createNodo(nl+"");
                  RESULT = nodo;
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("EXPR",35, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // EXPR ::= CHAR_ELEMENT 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		DefaultMutableTreeNode nodo = parser.createNodoObject(c+"",cright);//DefaultMutableTreeNode nodo = parser.createNodo(c+"");
                  RESULT = nodo;
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("EXPR",35, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // EXPR ::= FALSE 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		DefaultMutableTreeNode nodo = parser.createNodoObject(b+"",bright);//DefaultMutableTreeNode nodo = parser.createNodo(b+"");
                  RESULT = nodo;
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("EXPR",35, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // EXPR ::= TRUE 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		DefaultMutableTreeNode nodo = parser.createNodoObject(b+"",bright);//DefaultMutableTreeNode nodo = parser.createNodo(b+"");
                  RESULT = nodo;
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("EXPR",35, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // EXPR ::= STRING 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		DefaultMutableTreeNode nodo = parser.createNodoObject(s+"",sright);//DefaultMutableTreeNode nodo = parser.createNodo(s+"");
                  RESULT = nodo;
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("EXPR",35, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // EXPR ::= NUMBER 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		DefaultMutableTreeNode nodo = parser.createNodoObject(n+"",nright);//DefaultMutableTreeNode nodo = parser.createNodo(n+"");
                  RESULT = nodo;
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("EXPR",35, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // EXPR ::= EXPR MOD EXPR 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		DefaultMutableTreeNode nodo = parser.createNodoObject("%",mright);//DefaultMutableTreeNode nodo = parser.createNodo("%");
                  nodo.insert((DefaultMutableTreeNode)e1,0);
                  nodo.insert((DefaultMutableTreeNode)e2,1);
                RESULT = nodo;
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("EXPR",35, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // EXPR ::= OPEN_PARENTESIS EXPR_LIST CLOSE_PARENTESIS 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).value;
		 RESULT = e;
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("EXPR",35, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // EXPR ::= EXPR OP_MULTI_DIV EXPR 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		DefaultMutableTreeNode nodo = parser.createNodoObject(o+"",oright);//DefaultMutableTreeNode nodo = parser.createNodo(o+"");
                  nodo.insert((DefaultMutableTreeNode)e1,0);
                  nodo.insert((DefaultMutableTreeNode)e2,1);
                RESULT = nodo;
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("EXPR",35, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // EXPR ::= OP_SUM EXPR 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		DefaultMutableTreeNode nodo = parser.createNodoObject(o+"",oright);//DefaultMutableTreeNode nodo = parser.createNodo(o+"");
                  //nodo.insert((DefaultMutableTreeNode)e1,0);
                  nodo.insert((DefaultMutableTreeNode)e2,0);
                RESULT = nodo;
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("EXPR",35, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // EXPR_LIST ::= OPEN_PARENTESIS error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
                    String desc = "Número de parentesis impares en la expresión";
                    String mes = parser.errorMessage(desc, parser.getS());
                    DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
                    RESULT = nodo;
                    parser.report_error(mes ,err);
                    //NO ESTA EN EL CUPPP----------------
                
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("EXPR_LIST",34, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // EXPR_LIST ::= error CLOSE_PARENTESIS 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).value;
		
                    String desc = "Número de parentesis impares en la expresión";
                    String mes = parser.errorMessage(desc, parser.getS());
                    DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
                    RESULT = nodo;
                    parser.report_error(mes ,err);
                    //NO ESTA EN EL CUP------------------
                
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("EXPR_LIST",34, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // EXPR_LIST ::= EXPR 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		 
                    RESULT = e;
                
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("EXPR_LIST",34, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // EXPR_LIST ::= OPEN_PARENTESIS EXPR_LIST CLOSE_PARENTESIS EXPR_LIST 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
                    ((DefaultMutableTreeNode)e2).insert((DefaultMutableTreeNode)e1,0);
                    RESULT = ((DefaultMutableTreeNode)e2);
                
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("EXPR_LIST",34, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // EXPR_LIST ::= EXPR_LIST EXPR 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		((DefaultMutableTreeNode)e2).insert((DefaultMutableTreeNode)e1,0);
                    RESULT = ((DefaultMutableTreeNode)e2);
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("EXPR_LIST",34, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // N_CIN ::= OPEN_PARENTESIS CIN COLON ID CLOSE_BLOCK error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
        String desc = "Falta PYC";
        String mes = parser.errorMessage(desc, parser.getS());
        DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
        RESULT = nodo;
        parser.report_error(mes ,err);
    
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_CIN",33, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-5)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // N_CIN ::= OPEN_PARENTESIS CIN COLON ID error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
        String desc = "Valores de más. CIN solo llama a una variable o falta :)";
        String mes = parser.errorMessage(desc, parser.getS());
        DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
        RESULT = nodo;
        parser.report_error(mes ,err);
        
    
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_CIN",33, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-4)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // N_CIN ::= OPEN_PARENTESIS CIN COLON error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
        String desc = "Falta varibale en el CIN";
        String mes = parser.errorMessage(desc, parser.getS());
        DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
        RESULT = nodo;
        parser.report_error(mes ,err);
    
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_CIN",33, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // N_CIN ::= OPEN_PARENTESIS CIN error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
        String desc = "Falta \":\" en el CIN";
        String mes = parser.errorMessage(desc, parser.getS());
        DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
        RESULT = nodo;
        parser.report_error(mes ,err);
    
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_CIN",33, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // N_CIN ::= OPEN_PARENTESIS CIN COLON ID CLOSE_BLOCK PYC 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).value;
		
        DefaultMutableTreeNode nodo = parser.createNodoObject("IN: "+id, idright);//DefaultMutableTreeNode nodo = parser.createNodo("IN: "+id);
        RESULT = nodo;
    
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_CIN",33, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-5)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // N_PRINT_IMPRESS ::= 
            {
              Object RESULT =null;
		
        DefaultMutableTreeNode nodo = parser.createNodo("");
        RESULT = nodo;
    
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_PRINT_IMPRESS",32, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // N_PRINT_IMPRESS ::= OP_SUM ID OPEN_SQR_BRACKET N_TO_FOR CLOSE_SQR_BRACKET OPEN_SQR_BRACKET N_TO_FOR CLOSE_SQR_BRACKET 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-6)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-4)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-4)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).value;
		DefaultMutableTreeNode nodo = parser.createNodoObject(id+"",idright);//DefaultMutableTreeNode nodo = parser.createNodo(id+"");
                  nodo.add(parser.createNodoObject(n1+"",n1right));//nodo.add(parser.createNodo(n1+""));
                  nodo.add(parser.createNodoObject(n2+"",n2right));//nodo.add(parser.createNodo(n2+""));
                  RESULT = nodo;
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_PRINT_IMPRESS",32, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-7)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // N_PRINT_IMPRESS ::= OP_SUM ID OPEN_SQR_BRACKET N_TO_FOR CLOSE_SQR_BRACKET 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).value;
		DefaultMutableTreeNode nodo = parser.createNodoObject(id+"",idright);//DefaultMutableTreeNode nodo = parser.createNodo(id+"");
                  nodo.add(parser.createNodoObject(n+"",nright));//nodo.add(parser.createNodo(n+""));
                  RESULT = nodo;
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_PRINT_IMPRESS",32, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-4)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // N_PRINT_IMPRESS ::= OP_SUM error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
        String desc = "Falta cierre de PRINT o hay declaraciones no aceptadas\nDatos aceptados: String, chars, variables, números, saltos de linea (ln)";
        String mes = parser.errorMessage(desc, parser.getS());
        DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
        RESULT = nodo;        
        parser.report_error(mes ,err);
    
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_PRINT_IMPRESS",32, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // N_PRINT_IMPRESS ::= OP_SUM NEW_LINE 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).value;
		int nlleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int nlright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object nl = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
        DefaultMutableTreeNode nodo = parser.createNodoObject(nl+"",nlright);//DefaultMutableTreeNode nodo = parser.createNodo(nl+"");
        //((DefultMutableTreeNode)n).add(nodo);
        RESULT = nodo;
    
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_PRINT_IMPRESS",32, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // N_PRINT_IMPRESS ::= N_PRINT_IMPRESS OP_SUM NEW_LINE 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).value;
		int nlleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int nlright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object nl = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
        DefaultMutableTreeNode nodo = parser.createNodoObject(nl+"",nlright);//DefaultMutableTreeNode nodo = parser.createNodo(nl+"");
        ((DefaultMutableTreeNode)e1).add(nodo);
        RESULT = e1;
    
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_PRINT_IMPRESS",32, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // N_PRINT_IMPRESS ::= OP_SUM N_VALOR_VARIABLE 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
        DefaultMutableTreeNode nodo = parser.createNodoObject(n+"",nright);//DefaultMutableTreeNode nodo = parser.createNodo(n+"");
        RESULT = nodo;
    
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_PRINT_IMPRESS",32, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // N_PRINT_IMPRESS ::= N_PRINT_IMPRESS OP_SUM N_VALOR_VARIABLE 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
        DefaultMutableTreeNode nodo = parser.createNodoObject(n+"",nright);//DefaultMutableTreeNode nodo = parser.createNodo(n+"");
        ((DefaultMutableTreeNode)e1).add(nodo);
        RESULT = e1;
    
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_PRINT_IMPRESS",32, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // N_PRINT ::= OPEN_PARENTESIS PRINT COLON CLOSE_BLOCK PYC 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)).value;
		
        DefaultMutableTreeNode nodo = parser.createNodoObject("PRINT",pright);//DefaultMutableTreeNode nodo = parser.createNodo("PRINT");
        RESULT = nodo;
    
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_PRINT",31, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-4)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // N_PRINT ::= OPEN_PARENTESIS PRINT COLON NEW_LINE N_PRINT_IMPRESS CLOSE_BLOCK PYC 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-5)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).value;
		
        //Código mágico
        ((DefaultMutableTreeNode)n).insert(parser.createNodoObject(e+"",eright), 0);//((DefaultMutableTreeNode)n).insert(parser.createNodo(e+""), 0);
        DefaultMutableTreeNode node3 = new DefaultMutableTreeNode(((DefaultMutableTreeNode)n).getUserObject());
        ((DefaultMutableTreeNode)n).insert(node3, 1);
        //cambiar nombre, brutal!!!
        ((DefaultMutableTreeNode)n).setUserObject(parser.createNodoObject("PRINT",pright));
        ((DefaultTreeModel) parser.sintaxTreeModel).nodeChanged(((DefaultMutableTreeNode)n));
        RESULT = (DefaultMutableTreeNode)n;
    
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_PRINT",31, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-6)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // N_PRINT ::= OPEN_PARENTESIS PRINT COLON N_TO_FOR N_PRINT_IMPRESS CLOSE_BLOCK PYC 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-5)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).value;
		
        //Código mágico
        ((DefaultMutableTreeNode)n).insert(parser.createNodoObject(e+"",eright), 0);//((DefaultMutableTreeNode)n).insert(parser.createNodo(e+""), 0);
        DefaultMutableTreeNode node3 = new DefaultMutableTreeNode(((DefaultMutableTreeNode)n).getUserObject());
        ((DefaultMutableTreeNode)n).insert(node3, 1);
        //cambiar nombre, brutal!!!
        ((DefaultMutableTreeNode)n).setUserObject(parser.createNodoObject("PRINT",pright));
        ((DefaultTreeModel) parser.sintaxTreeModel).nodeChanged(((DefaultMutableTreeNode)n));
        RESULT = (DefaultMutableTreeNode)n;
    
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_PRINT",31, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-6)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // N_PRINT ::= OPEN_PARENTESIS PRINT COLON STRING N_PRINT_IMPRESS CLOSE_BLOCK PYC 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-5)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).value;
		
        //Código mágico
        ((DefaultMutableTreeNode)n).insert(parser.createNodoObject(e+"",eright), 0);//((DefaultMutableTreeNode)n).insert(parser.createNodo(e+""), 0);
        DefaultMutableTreeNode node3 = new DefaultMutableTreeNode(((DefaultMutableTreeNode)n).getUserObject());
        ((DefaultMutableTreeNode)n).insert(node3, 1);
        //cambiar nombre, brutal!!!
        ((DefaultMutableTreeNode)n).setUserObject(parser.createNodoObject("PRINT",pright));
        ((DefaultTreeModel) parser.sintaxTreeModel).nodeChanged(((DefaultMutableTreeNode)n));
        RESULT = (DefaultMutableTreeNode)n;
    
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_PRINT",31, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-6)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // N_PRINT ::= OPEN_PARENTESIS PRINT COLON N_TO_FOR N_PRINT_IMPRESS CLOSE_BLOCK error 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).value;
		int errleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
        String desc = "Falta PYC en el print";
        String mes = parser.errorMessage(desc, parser.getS());
        DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
        RESULT = nodo;
        parser.report_error(mes ,err);
        
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_PRINT",31, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-6)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // N_PRINT ::= OPEN_PARENTESIS PRINT COLON STRING N_PRINT_IMPRESS CLOSE_BLOCK error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).value;
		int errleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
        String desc = "Falta PYC en el print";
        String mes = parser.errorMessage(desc, parser.getS());
        DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
        RESULT = nodo;
        parser.report_error(mes ,err);
        
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_PRINT",31, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-6)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // N_PRINT ::= OPEN_PARENTESIS PRINT error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
        String desc = "Faltan los \":\" en el print";
        String mes = parser.errorMessage(desc, parser.getS());
        DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
        RESULT = nodo;
        parser.report_error(mes ,err);
        
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_PRINT",31, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // N_ARGUMENTOS ::= ID ID error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
            String desc = "Los ids deben ir separados por coma";
            String mes = parser.errorMessage(desc, parser.getS());
            DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
            RESULT = nodo;
            parser.report_error(mes ,err);
        
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_ARGUMENTOS",30, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // N_ARGUMENTOS ::= ID error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
        String desc = "Falta PYC";
        String mes = parser.errorMessage(desc, parser.getS());
        DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
        RESULT = nodo;
        parser.report_error(mes ,err);
        
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_ARGUMENTOS",30, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // N_ARGUMENTOS ::= ID PYC 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).value;
		
            DefaultMutableTreeNode nodo = parser.createNodoObject("N_argumentos",idright);//DefaultMutableTreeNode nodo = parser.createNodo("N_argumentos");
            nodo.add(parser.createNodoObject(id+"",idright));//nodo.add(parser.createNodo(id+""));
            RESULT = nodo;
        
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_ARGUMENTOS",30, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // N_ARGUMENTOS ::= ID COMA N_ARGUMENTOS 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).value;
		int arleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int arright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object ar = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
           ((DefaultMutableTreeNode)ar).add(parser.createNodoObject(id+"",idright));//((DefaultMutableTreeNode)ar).add(parser.createNodo(id+""));
           RESULT = ar;
        
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_ARGUMENTOS",30, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // N_BOOLEAN_VALUE ::= error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
        String desc = "Error en el valor booleno, tipo no compatible con Boolean";
        String mes = parser.errorMessage(desc, parser.getS());
        DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
        RESULT = nodo;
        parser.report_error(mes ,err);
        
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_BOOLEAN_VALUE",29, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // N_BOOLEAN_VALUE ::= N_CALL_FUNCTION 
            {
              Object RESULT =null;
		int arleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int arright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object ar = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
            RESULT = ar;
        
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_BOOLEAN_VALUE",29, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // N_BOOLEAN_VALUE ::= N_SENTENCIA_BOOLEANA_ANIDADA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
            RESULT = e;
        
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_BOOLEAN_VALUE",29, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // N_BOOLEAN_VALUE ::= TRUE 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
            RESULT = parser.createNodoObject(n + "",nright);//RESULT = parser.createNodo(n + "");
        
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_BOOLEAN_VALUE",29, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // N_BOOLEAN_VALUE ::= FALSE 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
            RESULT = parser.createNodoObject(n + "",nright);//RESULT = parser.createNodo(n + "");
        
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_BOOLEAN_VALUE",29, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // N_BOOLEAN_ID ::= BOOLEAN ID error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
        String desc = "Falta \":\" en la declacion booleana";
        String mes = parser.errorMessage(desc, parser.getS());
        DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
        RESULT = nodo;
        parser.report_error(mes ,err);
    
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_BOOLEAN_ID",28, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // N_BOOLEAN_ID ::= BOOLEAN error COLON 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).value;
		
        String desc = "Falta el identificador del boolean en la declaracion";
        String mes = parser.errorMessage(desc, parser.getS());
        DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
        RESULT = nodo;
        parser.report_error(mes ,err);
    
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_BOOLEAN_ID",28, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // N_BOOLEAN_ID ::= BOOLEAN ID COLON 
            {
              Object RESULT =null;
		int blleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).left;
		int blright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).right;
		Object bl = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).value;
		
            DefaultMutableTreeNode n=parser.createNodoObject("DECLR",idright); //DefaultMutableTreeNode n=parser.createNodo("DECLR");  
            n.add(parser.createNodoObject(bl+ "",blright));//n.add(parser.createNodo(bl+ ""));
            n.add(parser.createNodoObject(id + "",idright));//n.add(parser.createNodo(id + ""));
            RESULT = n;
        
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_BOOLEAN_ID",28, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // N_ARREGLO ::= N_VALOR_VARIABLE error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
        RESULT = parser.createNodo("ERROR");
        String desc = "Estructura del arreglo incompleta";
        String mes = parser.errorMessage(desc, parser.getS());
        //DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
        RESULT = "ERROR";
        parser.report_error(mes ,err);
      
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_ARREGLO",27, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // N_ARREGLO ::= N_VALOR_VARIABLE CLOSE_SQR_BRACKET 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
            DefaultMutableTreeNode el=parser.createNodoObject("ELEMENTS",bright);//DefaultMutableTreeNode el=parser.createNodo("ELEMENTS");
            el.add(parser.createNodoObject(a+"",bright));//el.add(parser.createNodo(a+""));
            RESULT = el;
        
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_ARREGLO",27, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // N_ARREGLO ::= N_VALOR_VARIABLE COMA N_ARREGLO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
            ((DefaultMutableTreeNode)n).insert((DefaultMutableTreeNode)a,0);
            RESULT = n;
        
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_ARREGLO",27, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // N_MATRIZ ::= error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
        String desc = "Solo se permiten arreglos de dos dimensiones";
        String mes = parser.errorMessage(desc, parser.getS());
        DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
        RESULT = nodo;
        parser.report_error(mes ,err);
        
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_MATRIZ",25, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // N_MATRIZ ::= N_VALOR_VARIABLE 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
        DefaultMutableTreeNode el=parser.createNodo("ELEMENTS");
        el.add(parser.createNodo(n+""));
        RESULT = el;
        
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_MATRIZ",25, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // N_MATRIZ ::= N_VALOR_VARIABLE COMA N_MATRIZ 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
        ((DefaultMutableTreeNode)n).insert((DefaultMutableTreeNode)a,0);
        RESULT = n;
        
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_MATRIZ",25, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // N_MATRIZ ::= OPEN_SQR_BRACKET N_ARREGLO COMA N_MATRIZ 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
        ((DefaultMutableTreeNode)n).insert((DefaultMutableTreeNode)a,0);
        RESULT = n;
        
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_MATRIZ",25, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // N_MATRIZ ::= OPEN_SQR_BRACKET N_ARREGLO 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
        DefaultMutableTreeNode el=parser.createNodoObject("ELEMENTS",bright);//DefaultMutableTreeNode el=parser.createNodo("ELEMENTS");
        el.add((DefaultMutableTreeNode)n);
        RESULT = el;
    
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_MATRIZ",25, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // N_TIPOS_DECLARACION_MATRIZ ::= error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
        String desc = "Solo se permiten Int, boolean y char, id en los arreglos";
        String mes = parser.errorMessage(desc, parser.getS());
        DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
        RESULT = nodo;
        parser.report_error(mes ,err);
    
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_TIPOS_DECLARACION_MATRIZ",26, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // N_TIPOS_DECLARACION_MATRIZ ::= CHAR 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		 RESULT = (parser.createNodoObject(e+"",eright)); 
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_TIPOS_DECLARACION_MATRIZ",26, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // N_TIPOS_DECLARACION_MATRIZ ::= BOOLEAN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		 RESULT = (parser.createNodoObject(e+"",eright)); 
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_TIPOS_DECLARACION_MATRIZ",26, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // N_TIPOS_DECLARACION_MATRIZ ::= INTENGER 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		 RESULT = (parser.createNodoObject(e+"",eright)); 
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_TIPOS_DECLARACION_MATRIZ",26, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // N_VALOR_VARIABLE ::= 
            {
              Object RESULT =null;

              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_VALOR_VARIABLE",24, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // N_VALOR_VARIABLE ::= FALSE 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		 RESULT = (parser.createNodoObject(e1+"",e1right)); 
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_VALOR_VARIABLE",24, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // N_VALOR_VARIABLE ::= TRUE 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		 RESULT = (parser.createNodoObject(e1+"",e1right)); 
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_VALOR_VARIABLE",24, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // N_VALOR_VARIABLE ::= CHAR_ELEMENT 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		 RESULT = (parser.createNodoObject(e1+"",e1right)); 
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_VALOR_VARIABLE",24, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // N_VALOR_VARIABLE ::= NULL 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		 RESULT = (parser.createNodoObject(e1+"",e1right)); 
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_VALOR_VARIABLE",24, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // N_VALOR_VARIABLE ::= STRING 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		 RESULT = (parser.createNodoObject(e1+"",e1right)); 
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_VALOR_VARIABLE",24, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // N_VALOR_VARIABLE ::= ID 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		 RESULT = (parser.createNodoObject(e1+"",e1right)); 
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_VALOR_VARIABLE",24, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // N_VALOR_VARIABLE ::= NUMBER 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		 RESULT = (parser.createNodoObject(e1+"",e1right)); 
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_VALOR_VARIABLE",24, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // N_DECLARACION_ID ::= ID ID error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
        String desc = "los ids deben ir separados por comas";
        String mes = parser.errorMessage(desc, parser.getS());
        DefaultMutableTreeNode nodo = parser.createNodo("DECLR");
        RESULT = nodo;
        parser.report_error(mes ,err);
    
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_DECLARACION_ID",23, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // N_DECLARACION_ID ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
            DefaultMutableTreeNode nodo = parser.createNodoObject("ids",idright);//DefaultMutableTreeNode nodo = parser.createNodo("ids");
            nodo.add(parser.createNodoObject(id+"",idright));//nodo.add(parser.createNodo(id+""));
            RESULT = nodo;
        
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_DECLARACION_ID",23, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // N_DECLARACION_ID ::= ID COMA N_DECLARACION_ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).value;
		int idsleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object ids = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
            ((DefaultMutableTreeNode)ids).insert(parser.createNodoObject(id+"",idright),0);//((DefaultMutableTreeNode)ids).insert(parser.createNodo(id+""),0);
            RESULT = ids;
        
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_DECLARACION_ID",23, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // N_DECLARACION ::= CHAR ID error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
        String desc = "Falta \":\" en la asignación del char";
        String mes = parser.errorMessage(desc, parser.getS());
        DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
        RESULT = nodo;
        parser.report_error(mes ,err);
    
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_DECLARACION",22, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // N_DECLARACION ::= CHAR COLON error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
        String desc = "Fala identificador del char";
        String mes = parser.errorMessage(desc, parser.getS());
        DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
        RESULT = nodo;
        parser.report_error(mes ,err);
    
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_DECLARACION",22, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // N_DECLARACION ::= CHAR ID COLON N_CALL_FUNCTION 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
        DefaultMutableTreeNode nodo = parser.createNodoObject("DECLR",iright);
        nodo.add(parser.createNodoObject(c+"",cright));//nodo.add(parser.createNodo(c+""));
        nodo.add(parser.createNodoObject(i+"",iright));//nodo.add(parser.createNodo(i+""));
        nodo.add((DefaultMutableTreeNode) f);
        RESULT = nodo;
    
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_DECLARACION",22, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // N_DECLARACION ::= ARRAY N_TIPOS_DECLARACION_MATRIZ COLON error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
        String desc = "Falta id del array";
        String mes = parser.errorMessage(desc, parser.getS());
        DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
        RESULT = nodo;
        parser.report_error(mes ,err);
    
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_DECLARACION",22, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // N_DECLARACION ::= ARRAY N_TIPOS_DECLARACION_MATRIZ error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
        String desc = "Falta \":\" en la asignación del array";
        String mes = parser.errorMessage(desc, parser.getS());
        DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
        RESULT = nodo;
        parser.report_error(mes ,err);
    
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_DECLARACION",22, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // N_DECLARACION ::= ARRAY COLON error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
        String desc = "Fala tipo del array";
        String mes = parser.errorMessage(desc, parser.getS());
        DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
        RESULT = nodo;
        parser.report_error(mes ,err);
    
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_DECLARACION",22, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // N_DECLARACION ::= ARRAY N_TIPOS_DECLARACION_MATRIZ ID COLON N_CALL_FUNCTION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
        DefaultMutableTreeNode nodo = parser.createNodoObject("DECLR ARRAY",aright);//DefaultMutableTreeNode nodo = parser.createNodo("DECLR ARRAY");
        nodo.add(parser.createNodoObject(a+"",aright));//nodo.add(parser.createNodo(a+""));
        nodo.add((DefaultMutableTreeNode) t);
        nodo.add(parser.createNodoObject(id+"",idright));//nodo.add(parser.createNodo(id+""));
        nodo.add((DefaultMutableTreeNode) f);
        RESULT = nodo;
    
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_DECLARACION",22, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-4)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // N_DECLARACION ::= MATRIX N_TIPOS_DECLARACION_MATRIZ COLON error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
        String desc = "Falta id de la matriz";
        String mes = parser.errorMessage(desc, parser.getS());
        DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
        RESULT = nodo;
        parser.report_error(mes ,err);
    
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_DECLARACION",22, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // N_DECLARACION ::= MATRIX N_TIPOS_DECLARACION_MATRIZ error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
        String desc = "Falta \":\" en la asignación de la matriz";
        String mes = parser.errorMessage(desc, parser.getS());
        DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
        RESULT = nodo;
        parser.report_error(mes ,err);
    
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_DECLARACION",22, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // N_DECLARACION ::= MATRIX COLON error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
        String desc = "Falta tipo de la matriz";
        String mes = parser.errorMessage(desc, parser.getS());
        DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
        RESULT = nodo;
        parser.report_error(mes ,err);
    
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_DECLARACION",22, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // N_DECLARACION ::= MATRIX N_TIPOS_DECLARACION_MATRIZ ID COLON N_CALL_FUNCTION 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-4)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
        DefaultMutableTreeNode nodo = parser.createNodoObject("DECLR MATRIX",iright);//DefaultMutableTreeNode nodo = parser.createNodo("DECLR MATRIX");
        nodo.add(parser.createNodoObject(i+"",iright));//nodo.add(parser.createNodo(i+""));
        nodo.add((DefaultMutableTreeNode)t);
        nodo.add(parser.createNodoObject(id+"",idright));//nodo.add(parser.createNodo(id+""));
        nodo.add((DefaultMutableTreeNode)f);
        RESULT = nodo;
    
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_DECLARACION",22, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-4)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // N_DECLARACION ::= INTENGER ID error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
        String desc = "Falta \":\" en la asignación del int";
        String mes = parser.errorMessage(desc, parser.getS());
        DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
        RESULT = nodo;
        parser.report_error(mes ,err);
    
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_DECLARACION",22, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // N_DECLARACION ::= INTENGER COLON error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
        String desc = "Falta identificador del int";
        String mes = parser.errorMessage(desc, parser.getS());
        DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
        RESULT = nodo;
        parser.report_error(mes ,err);
    
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_DECLARACION",22, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // N_DECLARACION ::= INTENGER ID COLON N_CALL_FUNCTION 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
        DefaultMutableTreeNode nodo = parser.createNodoObject("DECLR",e1right);//DefaultMutableTreeNode nodo = parser.createNodo("DECLR");
        nodo.add(parser.createNodoObject(e1+"",e1right));//nodo.add(parser.createNodo(e1+""));
        nodo.add(parser.createNodoObject(e2+"",e2right));//nodo.add(parser.createNodo(e2+""));
        nodo.add((DefaultMutableTreeNode)e3);
        RESULT = nodo;
    
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_DECLARACION",22, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // N_DECLARACION ::= ID COLON N_CALL_FUNCTION 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
        DefaultMutableTreeNode nodo = parser.createNodoObject("ASSIGN",e1right);//DefaultMutableTreeNode nodo = parser.createNodo("ASSIGN");
        nodo.add(parser.createNodoObject(e1+"",e1right));//nodo.add(parser.createNodo(e1+""));
        nodo.add((DefaultMutableTreeNode)e2);
        RESULT = nodo;
    
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_DECLARACION",22, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // N_DECLARACION ::= MATRIX N_TIPOS_DECLARACION_MATRIZ ID COLON OPEN_SQR_BRACKET N_MATRIZ CLOSE_SQR_BRACKET 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-6)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-6)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-5)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-4)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).value;
		
        DefaultMutableTreeNode nodo = parser.createNodoObject("DECLR MATRIX",iright);//DefaultMutableTreeNode nodo = parser.createNodo("DECLR MATRIX");
        nodo.add(parser.createNodoObject(i+"",iright));//nodo.add(parser.createNodo(i+""));
        nodo.add((DefaultMutableTreeNode)t);
        nodo.add(parser.createNodoObject(id+"",idright));//nodo.add(parser.createNodo(id+""));
        nodo.add((DefaultMutableTreeNode)m);
        RESULT = nodo;
         /*((DefaultMutableTreeNode)n).insert(parser.createNodo(i+""),0);
        ((DefaultMutableTreeNode)n).setUserObject("FOR");
        ((DefaultTreeModel) parser.sintaxTreeModel).nodeChanged(((DefaultMutableTreeNode)n));
        RESULT = (DefaultMutableTreeNode)n;*/
    
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_DECLARACION",22, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-6)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // N_DECLARACION ::= MATRIX OPEN_SQR_BRACKET N_TO_FOR CLOSE_SQR_BRACKET OPEN_SQR_BRACKET N_TO_FOR CLOSE_SQR_BRACKET N_TIPOS_DECLARACION_MATRIZ ID 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-8)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-8)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-8)).value;
		int m1left = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-7)).left;
		int m1right = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-7)).right;
		Object m1 = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-7)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-6)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-6)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-6)).value;
		int m2left = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-4)).left;
		int m2right = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-4)).right;
		Object m2 = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-4)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
        DefaultMutableTreeNode nodo = parser.createNodoObject("DECLR MATRIX EMPTY",iright);//DefaultMutableTreeNode nodo = parser.createNodo("DECLR MATRIX EMPTY");
        DefaultMutableTreeNode mt = parser.createNodoObject(i+"",iright);//DefaultMutableTreeNode mt = parser.createNodo(i+"");
        mt.add(parser.createNodoObject(n1+"",m1right));//mt.add(parser.createNodo(n1+""));
        mt.add(parser.createNodoObject(n2+"",m2right));//mt.add(parser.createNodo(n2+""));
        nodo.add(mt);
        nodo.add((DefaultMutableTreeNode)t);
        nodo.add(parser.createNodoObject(id+"",idright));//nodo.add(parser.createNodo(id+""));
        RESULT = nodo;
    
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_DECLARACION",22, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-8)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // N_DECLARACION ::= ID OPEN_SQR_BRACKET N_TO_FOR CLOSE_SQR_BRACKET OPEN_SQR_BRACKET N_TO_FOR CLOSE_SQR_BRACKET COLON N_CALL_FUNCTION 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-8)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-8)).value;
		int m1left = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-7)).left;
		int m1right = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-7)).right;
		Object m1 = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-7)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-6)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-6)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-6)).value;
		int m2left = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-4)).left;
		int m2right = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-4)).right;
		Object m2 = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-4)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
            DefaultMutableTreeNode nodo = parser.createNodoObject("ASSIGN MATRIX",idright);//DefaultMutableTreeNode nodo = parser.createNodo("ASSIGN MATRIX");
            DefaultMutableTreeNode mt = parser.createNodoObject(id+"",idright);//DefaultMutableTreeNode mt = parser.createNodo(id+"");
            mt.add(parser.createNodoObject(n1+"",m1right));//mt.add(parser.createNodo(n1+""));
            mt.add(parser.createNodoObject(n2+"",m2right));//mt.add(parser.createNodo(n2+""));
            nodo.add(mt);
            nodo.add((DefaultMutableTreeNode) ex);
            RESULT = nodo;
        
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_DECLARACION",22, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-8)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // N_DECLARACION ::= ID OPEN_SQR_BRACKET N_TO_FOR CLOSE_SQR_BRACKET OPEN_SQR_BRACKET N_TO_FOR CLOSE_SQR_BRACKET COLON N_SENTENCIA_BOOLEANA_ANIDADA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-8)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-8)).value;
		int m1left = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-7)).left;
		int m1right = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-7)).right;
		Object m1 = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-7)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-6)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-6)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-6)).value;
		int m2left = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-4)).left;
		int m2right = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-4)).right;
		Object m2 = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-4)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
            DefaultMutableTreeNode nodo = parser.createNodoObject("ASSIGN MATRIX",idright);//DefaultMutableTreeNode nodo = parser.createNodo("ASSIGN MATRIX");
            DefaultMutableTreeNode mt = parser.createNodoObject(id+"",idright);//DefaultMutableTreeNode mt = parser.createNodo(id+"");
            mt.add(parser.createNodoObject(n1+"",m1right));//mt.add(parser.createNodo(n1+""));
            mt.add(parser.createNodoObject(n2+"",m2right));//mt.add(parser.createNodo(n2+""));
            nodo.add(mt);
            nodo.add((DefaultMutableTreeNode) ex);
            RESULT = nodo;
        
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_DECLARACION",22, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-8)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // N_DECLARACION ::= ID OPEN_SQR_BRACKET N_TO_FOR CLOSE_SQR_BRACKET OPEN_SQR_BRACKET N_TO_FOR CLOSE_SQR_BRACKET COLON EXPR_LIST 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-8)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-8)).value;
		int m1left = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-7)).left;
		int m1right = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-7)).right;
		Object m1 = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-7)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-6)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-6)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-6)).value;
		int m2left = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-4)).left;
		int m2right = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-4)).right;
		Object m2 = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-4)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
            DefaultMutableTreeNode nodo = parser.createNodoObject("ASSIGN MATRIX",idright);//DefaultMutableTreeNode nodo = parser.createNodo("ASSIGN MATRIX");
            DefaultMutableTreeNode mt = parser.createNodoObject(id+"",idright);//DefaultMutableTreeNode mt = parser.createNodo(id+"");
            mt.add(parser.createNodoObject(n1+"",m1right));
            mt.add(parser.createNodoObject(n2+"",m2right));//mt.add(parser.createNodo(n2+""));
            nodo.add(mt);
            nodo.add((DefaultMutableTreeNode) ex);
            RESULT = nodo;
        
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_DECLARACION",22, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-8)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // N_DECLARACION ::= ARRAY N_TIPOS_DECLARACION_MATRIZ ID COLON OPEN_SQR_BRACKET N_ARREGLO 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-4)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)).value;
		int arleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int arright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object ar = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
        DefaultMutableTreeNode nodo = parser.createNodoObject("DECLR ARRAY",iright);//DefaultMutableTreeNode nodo = parser.createNodo("DECLR ARRAY");
        DefaultMutableTreeNode arr=parser.createNodoObject(i+"",iright);//DefaultMutableTreeNode arr=parser.createNodo(i+"");
        arr.add(parser.createNodoObject(""+((DefaultMutableTreeNode)ar).getChildCount(),iright));//arr.add(parser.createNodo(""+((DefaultMutableTreeNode)ar).getChildCount()));
        nodo.add(arr);
        nodo.add((DefaultMutableTreeNode)t);
        nodo.add(parser.createNodoObject(id+"",idright));//nodo.add(parser.createNodo(id+""));
        nodo.add((DefaultMutableTreeNode)ar);
        RESULT = nodo;
    
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_DECLARACION",22, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-5)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // N_DECLARACION ::= ARRAY OPEN_SQR_BRACKET N_TO_FOR CLOSE_SQR_BRACKET N_TIPOS_DECLARACION_MATRIZ ID 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-5)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
        DefaultMutableTreeNode nodo = parser.createNodoObject("DECLR ARRAY EMPTY",iright);//DefaultMutableTreeNode nodo = parser.createNodo("DECLR ARRAY EMPTY");
        DefaultMutableTreeNode ar = parser.createNodoObject(i+"",iright);//DefaultMutableTreeNode ar = parser.createNodo(i+"");
        ar.add(parser.createNodoObject(n1+"",iright));//ar.add(parser.createNodo(n1+""));
        nodo.add(ar);
        nodo.add((DefaultMutableTreeNode)t);
        nodo.add(parser.createNodoObject(id+"",idright));//nodo.add(parser.createNodo(id+""));
        RESULT = nodo;
    
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_DECLARACION",22, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-5)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // N_DECLARACION ::= ID OPEN_SQR_BRACKET N_TO_FOR CLOSE_SQR_BRACKET COLON N_CALL_FUNCTION 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-5)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
            DefaultMutableTreeNode nodo = parser.createNodoObject("ASSIGN ARRAY",idright);//DefaultMutableTreeNode nodo = parser.createNodo("ASSIGN ARRAY");
            DefaultMutableTreeNode mt = parser.createNodoObject(id+"",idright);//DefaultMutableTreeNode mt = parser.createNodo(id+"");
            mt.add(parser.createNodoObject(n1+"",idright));//mt.add(parser.createNodo(n1+""));
            nodo.add(mt);
            nodo.add((DefaultMutableTreeNode) ex);
            RESULT = nodo;
        
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_DECLARACION",22, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-5)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // N_DECLARACION ::= ID OPEN_SQR_BRACKET N_TO_FOR CLOSE_SQR_BRACKET COLON N_SENTENCIA_BOOLEANA_ANIDADA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-5)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
            DefaultMutableTreeNode nodo = parser.createNodoObject("ASSIGN ARRAY",idright);//DefaultMutableTreeNode nodo = parser.createNodo("ASSIGN ARRAY");
            DefaultMutableTreeNode mt = parser.createNodoObject(id+"",idright);//DefaultMutableTreeNode mt = parser.createNodo(id+"");
            mt.add(parser.createNodoObject(n1+"",idright));//mt.add(parser.createNodo(n1+""));
            nodo.add(mt);
            nodo.add((DefaultMutableTreeNode) ex);
            RESULT = nodo;
        
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_DECLARACION",22, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-5)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // N_DECLARACION ::= ID OPEN_SQR_BRACKET N_TO_FOR CLOSE_SQR_BRACKET COLON EXPR_LIST 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-5)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-4)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-4)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-4)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
            DefaultMutableTreeNode nodo = parser.createNodoObject("ASSIGN ARRAY",idright);//DefaultMutableTreeNode nodo = parser.createNodo("ASSIGN ARRAY");
            DefaultMutableTreeNode mt = parser.createNodoObject(id+"",idright);//DefaultMutableTreeNode mt = parser.createNodo(id+"");
            mt.add(parser.createNodoObject(n1+"",mright));//mt.add(parser.createNodo(n1+""));
            nodo.add(mt);
            nodo.add((DefaultMutableTreeNode) ex);
            RESULT = nodo;
        
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_DECLARACION",22, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-5)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // N_DECLARACION ::= CHAR ID COLON CHAR_ELEMENT 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).value;
		int chleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int chright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object ch = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
        DefaultMutableTreeNode nodo = parser.createNodoObject("DECLR",idright);//DefaultMutableTreeNode nodo = parser.createNodo("DECLR");
        nodo.add(parser.createNodoObject(i+"",iright));
        nodo.add(parser.createNodoObject(id+"",idright));
        nodo.add(parser.createNodoObject(ch+"",chright));//nodo.add(parser.createNodo(ch+""));
        RESULT = nodo;
    
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_DECLARACION",22, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // N_DECLARACION ::= N_BOOLEAN_ID N_BOOLEAN_VALUE 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).value;
		int valeft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int varight = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object va = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
        ((DefaultMutableTreeNode)id).add((DefaultMutableTreeNode) va);
        RESULT = id;
    
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_DECLARACION",22, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // N_DECLARACION ::= INTENGER ID COLON EXPR_LIST 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
        DefaultMutableTreeNode nodo = parser.createNodoObject("DECLR",idright);
        nodo.add(parser.createNodoObject(i+"",iright));
        nodo.add(parser.createNodoObject(id+"",idright));
        nodo.add((DefaultMutableTreeNode) ex);
        RESULT = nodo;
    
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_DECLARACION",22, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // N_DECLARACION ::= CHAR N_DECLARACION_ID 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
        ((DefaultMutableTreeNode)n).insert(parser.createNodoObject(i+"",iright), 0);
        ((DefaultMutableTreeNode)n).setUserObject(parser.createNodoObject("DECLR NEST/NO_VAL",iright));
        ((DefaultTreeModel) parser.sintaxTreeModel).nodeChanged(((DefaultMutableTreeNode)n));
        RESULT = (DefaultMutableTreeNode)n;
    
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_DECLARACION",22, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // N_DECLARACION ::= BOOLEAN N_DECLARACION_ID 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
        ((DefaultMutableTreeNode)n).insert(parser.createNodoObject(i+"",iright), 0);
        ((DefaultMutableTreeNode)n).setUserObject(parser.createNodoObject("DECLR NEST/NO_VAL",iright));
        ((DefaultTreeModel) parser.sintaxTreeModel).nodeChanged(((DefaultMutableTreeNode)n));
        RESULT = (DefaultMutableTreeNode)n;
    
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_DECLARACION",22, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // N_DECLARACION ::= INTENGER N_DECLARACION_ID 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
        ((DefaultMutableTreeNode)n).insert(parser.createNodoObject(i+"",iright), 0);
        ((DefaultMutableTreeNode)n).setUserObject(parser.createNodoObject("DECLR NEST/NO_VAL",iright));
        ((DefaultTreeModel) parser.sintaxTreeModel).nodeChanged(((DefaultMutableTreeNode)n));
        RESULT = (DefaultMutableTreeNode)n;

        /*DefaultMutableTreeNode nodo = parser.createNodo("Declaración Anidada");
        nodo.add(parser.createNodo(i+""));
        nodo.add((DefaultMutableTreeNode) de);
        RESULT = nodo;*/
    
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_DECLARACION",22, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // N_DECLARACION ::= ID COLON EXPR_LIST 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
        DefaultMutableTreeNode nodo = parser.createNodoObject("ASSIGN",idright);
        nodo.add(parser.createNodoObject(id+"",idright));
        nodo.add((DefaultMutableTreeNode) ex);
        RESULT = nodo;
    
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_DECLARACION",22, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // N_DECLARACION ::= ID COLON N_SENTENCIA_BOOLEANA_ANIDADA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).value;
		int bnleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int bnright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object bn = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
        DefaultMutableTreeNode nodo = parser.createNodoObject("ASSIGN",idright);
        nodo.add(parser.createNodoObject(id+"",idright));
        nodo.add((DefaultMutableTreeNode) bn);
        RESULT = nodo;
    
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_DECLARACION",22, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // N_SENTENCIA_BOOLEANA_SWITCH ::= error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
        String desc = "Error en sentencia booleana del switch: falta identificador u operador relacional";
        String mes = parser.errorMessage(desc, parser.getS());
        DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
        RESULT = nodo;
        parser.report_error(mes ,err);
    
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA_SWITCH",16, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // N_SENTENCIA_BOOLEANA_SWITCH ::= NUMBER 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Integer f = (Integer)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
            DefaultMutableTreeNode nodo = parser.createNodoObject(f+"",fright);
            RESULT = nodo;
        
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA_SWITCH",16, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // N_SENTENCIA_BOOLEANA_SWITCH ::= CHAR_ELEMENT 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
            DefaultMutableTreeNode nodo = parser.createNodoObject(f+"",fright);
            RESULT = nodo;
        
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA_SWITCH",16, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // N_SENTENCIA_BOOLEANA_SWITCH ::= FALSE 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
            DefaultMutableTreeNode nodo = parser.createNodoObject(f+"",fright);
            RESULT = nodo;
        
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA_SWITCH",16, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // N_SENTENCIA_BOOLEANA_SWITCH ::= TRUE 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
            DefaultMutableTreeNode nodo = parser.createNodoObject(t+"",tright);
            RESULT = nodo;
        
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA_SWITCH",16, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // N_SENTENCIA_BOOLEANA_SWITCH ::= NUMBER BETWEEN ID 
            {
              Object RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).right;
		Integer id1 = (Integer)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
            DefaultMutableTreeNode nodo = parser.createNodoObject(b+"",bright);
            nodo.add(parser.createNodoObject(id1+"",id1right));
            nodo.add(parser.createNodoObject(id2+"",id2right));
            RESULT = nodo;
        
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA_SWITCH",16, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // N_SENTENCIA_BOOLEANA_SWITCH ::= ID BETWEEN NUMBER 
            {
              Object RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Integer id2 = (Integer)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
            DefaultMutableTreeNode nodo = parser.createNodoObject(b+"",bright);
            nodo.add(parser.createNodoObject(id1+"",id1right));
            nodo.add(parser.createNodoObject(id2+"",id2right));
            RESULT = nodo;
        
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA_SWITCH",16, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // N_SENTENCIA_BOOLEANA_SWITCH ::= ID BETWEEN ID 
            {
              Object RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
            DefaultMutableTreeNode nodo = parser.createNodoObject(b+"",bright);
            nodo.add(parser.createNodoObject(id1+"",id1right));
            nodo.add(parser.createNodoObject(id2+"",id2right));
            RESULT = nodo;
        
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA_SWITCH",16, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // N_SENTENCIA_BOOLEANA_SWITCH ::= NUMBER BETWEEN NUMBER 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).right;
		Integer n1 = (Integer)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Integer n2 = (Integer)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
            DefaultMutableTreeNode nodo = parser.createNodoObject(b+"",bright);
            nodo.add(parser.createNodoObject(n1+"",n1right));
            nodo.add(parser.createNodoObject(n2+"",n2right));
            RESULT = nodo;
        
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA_SWITCH",16, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // N_SENTENCIA_BOOLEANA_SWITCH ::= NUMBER OP_REL 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
            DefaultMutableTreeNode nodo = parser.createNodoObject(op+"",opright);
            nodo.add(parser.createNodoObject(n+"",nright));
            RESULT = nodo;
        
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA_SWITCH",16, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // N_SENTENCIA_BOOLEANA_SWITCH ::= OP_REL TRUE 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
            DefaultMutableTreeNode nodo = parser.createNodoObject(op+"",opright);
            nodo.add(parser.createNodoObject(t+"",tright));
            RESULT = nodo;
        
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA_SWITCH",16, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // N_SENTENCIA_BOOLEANA_SWITCH ::= OP_REL FALSE 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
            DefaultMutableTreeNode nodo = parser.createNodoObject(op+"",opright);
            nodo.add(parser.createNodoObject(f+"",fright));
            RESULT = nodo;
        
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA_SWITCH",16, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // N_SENTENCIA_BOOLEANA_SWITCH ::= OP_REL NUMBER 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
            DefaultMutableTreeNode nodo = parser.createNodoObject(op+"",opright);
            nodo.add(parser.createNodoObject(n+"",nright));
            RESULT = nodo;
        
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA_SWITCH",16, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // N_SENTENCIA_BOOLEANA_SWITCH ::= OP_REL STRING 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
            DefaultMutableTreeNode nodo = parser.createNodoObject(op+"",opright);
            nodo.add(parser.createNodoObject(s+"",sright));
            RESULT = nodo;
        
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA_SWITCH",16, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // N_SENTENCIA_BOOLEANA_SWITCH ::= STRING OP_REL 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
            DefaultMutableTreeNode nodo = parser.createNodoObject(op+"",opright);
            nodo.add(parser.createNodoObject(s+"",sright));
            RESULT = nodo;
        
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA_SWITCH",16, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // N_SENTENCIA_BOOLEANA_SWITCH ::= OP_REL ID 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
            DefaultMutableTreeNode nodo = parser.createNodoObject(op+"",opright);
            nodo.add(parser.createNodoObject(id+"",idright));
            RESULT = nodo;
        
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA_SWITCH",16, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // N_SENTENCIA_BOOLEANA_SWITCH ::= ID OP_REL 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
            DefaultMutableTreeNode nodo = parser.createNodoObject(op+"",opright);
            nodo.add(parser.createNodoObject(id+"",idright));
            RESULT = nodo;
        
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA_SWITCH",16, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // N_SENTENCIA_BOOLEANA ::= OP_REL error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
            String desc = "Error en sentencia booleana por derecha";
            String mes = parser.errorMessage(desc, parser.getS());
            DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
            RESULT = nodo;
            parser.report_error(mes ,err);
        
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA",20, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // N_SENTENCIA_BOOLEANA ::= error OP_REL 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).value;
		
            String desc = "Error en sentencia booleana por izquierda";
            String mes = parser.errorMessage(desc, parser.getS());
            DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
            RESULT = nodo;
            parser.report_error(mes ,err);
        
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA",20, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // N_SENTENCIA_BOOLEANA ::= FALSE OP_REL TRUE 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
            DefaultMutableTreeNode nodo = parser.createNodoObject(op+"",opright);
            nodo.add(parser.createNodoObject(f+"",fright));
            nodo.add(parser.createNodoObject(t+"",tright));
            RESULT = nodo;
        
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA",20, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // N_SENTENCIA_BOOLEANA ::= FALSE OP_REL FALSE 
            {
              Object RESULT =null;
		int f1left = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).right;
		Object f1 = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).value;
		int f2left = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int f2right = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object f2 = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
            DefaultMutableTreeNode nodo = parser.createNodoObject(op+"",opright);
            nodo.add(parser.createNodoObject(f1+"",f1right));
            nodo.add(parser.createNodoObject(f2+"",f2right));
            RESULT = nodo;
        
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA",20, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // N_SENTENCIA_BOOLEANA ::= TRUE OP_REL TRUE 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
            DefaultMutableTreeNode nodo = parser.createNodoObject(op+"",opright);
            nodo.add(parser.createNodoObject(t1+"",t1right));
            nodo.add(parser.createNodoObject(t2+"",t2right));
            RESULT = nodo;
        
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA",20, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // N_SENTENCIA_BOOLEANA ::= TRUE OP_REL FALSE 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
            DefaultMutableTreeNode nodo = parser.createNodoObject(op+"",opright);
            nodo.add(parser.createNodoObject(t+"",tright));
            nodo.add(parser.createNodoObject(f+"",fright));
            RESULT = nodo;
        
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA",20, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // N_SENTENCIA_BOOLEANA ::= TRUE OP_REL STRING 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
            DefaultMutableTreeNode nodo = parser.createNodoObject(op+"",opright);
            nodo.add(parser.createNodoObject(t+"",tright));
            nodo.add(parser.createNodoObject(s+"",sright));
            RESULT = nodo;
        
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA",20, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // N_SENTENCIA_BOOLEANA ::= FALSE OP_REL STRING 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
            DefaultMutableTreeNode nodo = parser.createNodoObject(op+"",opright);
            nodo.add(parser.createNodoObject(f+"",fright));
            nodo.add(parser.createNodoObject(s+"",sright));
            RESULT = nodo;
        
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA",20, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // N_SENTENCIA_BOOLEANA ::= STRING OP_REL TRUE 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
            DefaultMutableTreeNode nodo = parser.createNodoObject(op+"",opright);
            nodo.add(parser.createNodoObject(t+"",tright));
            nodo.add(parser.createNodoObject(s+"",sright));
            RESULT = nodo;
        
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA",20, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // N_SENTENCIA_BOOLEANA ::= STRING OP_REL FALSE 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
            DefaultMutableTreeNode nodo = parser.createNodoObject(op+"",opright);
            nodo.add(parser.createNodoObject(s+"",sright));
            nodo.add(parser.createNodoObject(f+"",fright));
            RESULT = nodo;
        
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA",20, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // N_SENTENCIA_BOOLEANA ::= STRING OP_REL STRING 
            {
              Object RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).right;
		Object s1 = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object s2 = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
            DefaultMutableTreeNode nodo = parser.createNodoObject(op+"",opright);
            nodo.add(parser.createNodoObject(s1+"",s1right));
            nodo.add(parser.createNodoObject(s2+"",s2right));
            RESULT = nodo;
        
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA",20, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // N_SENTENCIA_BOOLEANA ::= TRUE OP_REL NUMBER 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
            DefaultMutableTreeNode nodo = parser.createNodoObject(op+"",opright);
            nodo.add(parser.createNodoObject(t+"",tright));
            nodo.add(parser.createNodoObject(n+"",nright));
            RESULT = nodo;
        
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA",20, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // N_SENTENCIA_BOOLEANA ::= FALSE OP_REL NUMBER 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
            DefaultMutableTreeNode nodo = parser.createNodoObject(op+"",opright);
            nodo.add(parser.createNodoObject(f+"",fright));
            nodo.add(parser.createNodoObject(n+"",nright));
            RESULT = nodo;
        
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA",20, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // N_SENTENCIA_BOOLEANA ::= STRING OP_REL NUMBER 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
            DefaultMutableTreeNode nodo = parser.createNodoObject(op+"",opright);
            nodo.add(parser.createNodoObject(n+"",nright));
            nodo.add(parser.createNodoObject(s+"",sright));
            RESULT = nodo;
        
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA",20, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // N_SENTENCIA_BOOLEANA ::= NUMBER OP_REL TRUE 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
            DefaultMutableTreeNode nodo = parser.createNodoObject(op+"",opright);
            nodo.add(parser.createNodoObject(n+"",nright));
            nodo.add(parser.createNodoObject(t+"",tright));
            RESULT = nodo;
        
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA",20, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // N_SENTENCIA_BOOLEANA ::= NUMBER OP_REL FALSE 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
            DefaultMutableTreeNode nodo = parser.createNodoObject(op+"",opright);
            nodo.add(parser.createNodoObject(n+"",nright));
            nodo.add(parser.createNodoObject(f+"",fright));
            RESULT = nodo;
        
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA",20, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // N_SENTENCIA_BOOLEANA ::= NUMBER OP_REL STRING 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
            DefaultMutableTreeNode nodo = parser.createNodoObject(op+"",opright);
            nodo.add(parser.createNodoObject(n+"",nright));
            nodo.add(parser.createNodoObject(s+"",sright));
            RESULT = nodo;
        
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA",20, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // N_SENTENCIA_BOOLEANA ::= NUMBER OP_REL error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
            String desc = "Operando derecho con número no válido";
            String mes = parser.errorMessage(desc, parser.getS());
            DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
            RESULT = nodo;
            parser.report_error(mes ,err);
        
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA",20, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // N_SENTENCIA_BOOLEANA ::= NUMBER OP_REL NUMBER 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).right;
		Integer n1 = (Integer)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Integer n2 = (Integer)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
            DefaultMutableTreeNode nodo = parser.createNodoObject(op+"",opright);
            nodo.add(parser.createNodoObject(n1+"",n1right));
            nodo.add(parser.createNodoObject(n2+"",n2right));
            RESULT = nodo;
        
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA",20, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // N_SENTENCIA_BOOLEANA ::= TRUE OP_REL error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
            String desc = "Operando derecho con true no válido";
            String mes = parser.errorMessage(desc, parser.getS());
            DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
            RESULT = nodo;
            parser.report_error(mes ,err);
        
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA",20, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // N_SENTENCIA_BOOLEANA ::= TRUE OP_REL ID 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
            DefaultMutableTreeNode nodo = parser.createNodoObject(op+"",opright);
            nodo.add(parser.createNodoObject(id+"",idright));
            nodo.add(parser.createNodoObject(t+"",tright));
            RESULT = nodo;
        
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA",20, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // N_SENTENCIA_BOOLEANA ::= FALSE OP_REL error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
            String desc = "Operando derecho con false no válido";
            String mes = parser.errorMessage(desc, parser.getS());
            DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
            RESULT = nodo;
            parser.report_error(mes ,err);
        
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA",20, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // N_SENTENCIA_BOOLEANA ::= FALSE OP_REL ID 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
            DefaultMutableTreeNode nodo = parser.createNodoObject(op+"",opright);
            nodo.add(parser.createNodoObject(id+"",idright));
            nodo.add(parser.createNodoObject(f+"",fright));
            RESULT = nodo;
        
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA",20, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // N_SENTENCIA_BOOLEANA ::= STRING OP_REL error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
            String desc = "Operando derecho con String no valido";
            String mes = parser.errorMessage(desc, parser.getS());
            DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
            RESULT = nodo;
            parser.report_error(mes ,err);
        
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA",20, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // N_SENTENCIA_BOOLEANA ::= STRING OP_REL ID 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
            DefaultMutableTreeNode nodo = parser.createNodo(op+"");
            nodo.add(parser.createNodo(id+""));
            nodo.add(parser.createNodo(s+""));
            RESULT = nodo;
        
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA",20, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // N_SENTENCIA_BOOLEANA ::= NUMBER OP_REL ID 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
            DefaultMutableTreeNode nodo = parser.createNodoObject(op+"",opright);
            nodo.add(parser.createNodoObject(id+"",idright));
            nodo.add(parser.createNodoObject(n+"",nright));
            RESULT = nodo;
        
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA",20, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // N_SENTENCIA_BOOLEANA ::= ID OP_REL EXPR_LIST 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
            DefaultMutableTreeNode nodo = parser.createNodoObject(op+"",opright);
            nodo.add(parser.createNodoObject(id+"",idright));
            //nodo.add(parser.createNodo(n+""));
            nodo.add((DefaultMutableTreeNode)n);
            RESULT = nodo;
        
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA",20, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // N_AND_OR ::= CON_OR N_SENTENCIA_BOOLEANA_ANIDADA 
            {
              Object RESULT =null;
		int ndleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).left;
		int ndright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).right;
		Object nd = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).value;
		int blleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int blright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object bl = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
            DefaultMutableTreeNode nodo = parser.createNodoObject("OR",ndright);
            nodo.add((DefaultMutableTreeNode)bl);
            RESULT = nodo;
        
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_AND_OR",21, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // N_AND_OR ::= CON_AND N_SENTENCIA_BOOLEANA_ANIDADA 
            {
              Object RESULT =null;
		int ndleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).left;
		int ndright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).right;
		Object nd = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).value;
		int blleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int blright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object bl = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
            DefaultMutableTreeNode nodo = parser.createNodoObject("AND",ndright);
            nodo.add((DefaultMutableTreeNode)bl);
            RESULT = nodo;
        
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_AND_OR",21, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // N_SENTENCIA_BOOLEANA_ANIDADA ::= error OPEN_PARENTESIS CLOSE_PARENTESIS 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).value;
		
            String desc = "Parentesis vacios en sentencia booleana";
            String mes = parser.errorMessage(desc, parser.getS());
            DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
            RESULT = nodo;
            parser.report_error(mes ,err);
    
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA_ANIDADA",19, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // N_SENTENCIA_BOOLEANA_ANIDADA ::= OPEN_PARENTESIS CLOSE_PARENTESIS error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
            String desc = "Parentesis vacios en sentencia booleana";
            String mes = parser.errorMessage(desc, parser.getS());
            DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
            RESULT = nodo;
            parser.report_error(mes ,err);
    
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA_ANIDADA",19, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // N_SENTENCIA_BOOLEANA_ANIDADA ::= OPEN_PARENTESIS N_SENTENCIA_BOOLEANA_ANIDADA CLOSE_PARENTESIS 
            {
              Object RESULT =null;
		int blleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).left;
		int blright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).right;
		Object bl = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).value;
		
            RESULT = bl;
        
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA_ANIDADA",19, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // N_SENTENCIA_BOOLEANA_ANIDADA ::= OPEN_PARENTESIS N_SENTENCIA_BOOLEANA_ANIDADA CLOSE_PARENTESIS N_AND_OR 
            {
              Object RESULT =null;
		int blleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).left;
		int blright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).right;
		Object bl = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).value;
		int ndleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int ndright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object nd = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
            ((DefaultMutableTreeNode)nd).insert((DefaultMutableTreeNode)bl,0);
            RESULT = nd;
        
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA_ANIDADA",19, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // N_SENTENCIA_BOOLEANA_ANIDADA ::= N_SENTENCIA_BOOLEANA 
            {
              Object RESULT =null;
		int blleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int blright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object bl = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
            RESULT = bl;
        
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA_ANIDADA",19, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // N_SENTENCIA_BOOLEANA_ANIDADA ::= N_SENTENCIA_BOOLEANA N_AND_OR 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
            ((DefaultMutableTreeNode)e2).insert((DefaultMutableTreeNode)e1,0); 
            RESULT = e2;
        
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA_BOOLEANA_ANIDADA",19, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // N_CALL_FUNCTION_PARAMETROS ::= N_VALOR_VARIABLE COMA error 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).value;
		int errleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
        String desc = "Coma de más o falta valor en parametros de funcion";
        String mes = parser.errorMessage(desc, parser.getS());
        DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
        RESULT = nodo;
        parser.report_error(mes ,err);
    
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_CALL_FUNCTION_PARAMETROS",18, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // N_CALL_FUNCTION_PARAMETROS ::= N_VALOR_VARIABLE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
            DefaultMutableTreeNode nodo = parser.createNodo("PARAMETERS");
            nodo.add((DefaultMutableTreeNode)e);
            RESULT = nodo;
        
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_CALL_FUNCTION_PARAMETROS",18, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // N_CALL_FUNCTION_PARAMETROS ::= N_VALOR_VARIABLE COMA N_CALL_FUNCTION_PARAMETROS 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
            ((DefaultMutableTreeNode)e).insert((DefaultMutableTreeNode)e1,0);
            RESULT = e;
        
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_CALL_FUNCTION_PARAMETROS",18, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // N_CALL_FUNCTION ::= ID OPEN_PARENTESIS error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
        String desc = "Falta cerrar parentesis en llamado de función";
        String mes = parser.errorMessage(desc, parser.getS());
        DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
        RESULT = nodo;
        parser.report_error(mes ,err);
    
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_CALL_FUNCTION",17, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // N_CALL_FUNCTION ::= ID error OPEN_PARENTESIS 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).value;
		
        String desc = "Falta el el identificador de la funcion";
        String mes = parser.errorMessage(desc, parser.getS());
        DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
        RESULT = nodo;
        parser.report_error(mes ,err);
    
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_CALL_FUNCTION",17, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // N_CALL_FUNCTION ::= ID OPEN_PARENTESIS CLOSE_PARENTESIS 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).value;
		
            DefaultMutableTreeNode node = parser.createNodoObject(id+":fun",idright);
            RESULT = node;
        
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_CALL_FUNCTION",17, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // N_CALL_FUNCTION ::= ID OPEN_PARENTESIS N_CALL_FUNCTION_PARAMETROS CLOSE_PARENTESIS 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).value;
		
            ((DefaultMutableTreeNode)n).setUserObject(parser.createNodoObject(id+":fun", idright));
            ((DefaultTreeModel) parser.sintaxTreeModel).nodeChanged(((DefaultMutableTreeNode)n));
            RESULT = (DefaultMutableTreeNode)n;

            /*DefaultMutableTreeNode node = parser.createNodo(id+":fun");
            node.add((DefaultMutableTreeNode) p);
            RESULT = node;*/
        
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_CALL_FUNCTION",17, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // N_SWITCH_CASE ::= OPEN_PARENTESIS error OPEN_PARENTESIS COLON N_SENTENCIA N_SWITCH_CASE 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-4)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-4)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-4)).value;
		int swleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int swright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object sw = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
       String desc = "Falta cerrar parentesis en el case del switch";
       String mes = parser.errorMessage(desc, parser.getS());
       DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
       RESULT = nodo;
       parser.report_error(mes ,err);
       
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_SWITCH_CASE",15, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-5)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // N_SWITCH_CASE ::= OPEN_PARENTESIS error COLON N_SENTENCIA N_SWITCH_CASE 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)).value;
		int swleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int swright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object sw = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
                String desc = "Falta cerrar parentesis en el case del switch";
                String mes = parser.errorMessage(desc, parser.getS());
                DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
                RESULT = nodo;
                parser.report_error(mes ,err);
            
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_SWITCH_CASE",15, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-4)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // N_SWITCH_CASE ::= OPEN_PARENTESIS ELSE CLOSE_PARENTESIS COLON 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)).value;
		
        //System.out.printtln("ELSE");
        DefaultMutableTreeNode nodo = parser.createNodoObject("ELSE empy",mright);
        RESULT = nodo;
    
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_SWITCH_CASE",15, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // N_SWITCH_CASE ::= OPEN_PARENTESIS ELSE CLOSE_PARENTESIS COLON N_SENTENCIA 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-4)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-4)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
        //System.out.printtln("ELSE");
        DefaultMutableTreeNode nodo = parser.createNodoObject("CASES",mright);
        //nodo.add(parser.createNodo(id+""));
        nodo.add((DefaultMutableTreeNode)e);
        ((DefaultMutableTreeNode)e).setUserObject(parser.createNodoObject("ELSE",mright));
        ((DefaultTreeModel) parser.sintaxTreeModel).nodeChanged(((DefaultMutableTreeNode)e));
        RESULT = nodo;
    
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_SWITCH_CASE",15, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-4)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // N_SWITCH_CASE ::= OPEN_PARENTESIS N_SENTENCIA_BOOLEANA_SWITCH CLOSE_PARENTESIS COLON N_SWITCH_CASE 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-4)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-4)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-4)).value;
		int bnleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)).left;
		int bnright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)).right;
		Object bn = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)).value;
		
        //System.out.printtln("N_SWITCH_CASE");
        DefaultMutableTreeNode nodo = parser.createNodoObject("SWITCH_CASE empy",mright);
        nodo.add((DefaultMutableTreeNode)bn);
        RESULT = nodo;
    
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_SWITCH_CASE",15, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-4)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // N_SWITCH_CASE ::= OPEN_PARENTESIS N_SENTENCIA_BOOLEANA_SWITCH CLOSE_PARENTESIS COLON N_SENTENCIA N_SWITCH_CASE 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-5)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-5)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-5)).value;
		int bnleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-4)).left;
		int bnright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-4)).right;
		Object bn = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).value;
		int swleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int swright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object sw = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
        //System.out.printtln("N_SWITCH_CASE");
        DefaultMutableTreeNode nodo = parser.createNodoObject("SWITCH_CASE",mright);
        nodo.add((DefaultMutableTreeNode)bn);
        nodo.add((DefaultMutableTreeNode)e);
        ((DefaultMutableTreeNode)sw).insert(nodo,0);
        ((DefaultMutableTreeNode)e).setUserObject(parser.createNodoObject("SENTENCES",mright));
        ((DefaultTreeModel) parser.sintaxTreeModel).nodeChanged(((DefaultMutableTreeNode)e));
        RESULT = sw;
    
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_SWITCH_CASE",15, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-5)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // N_SWITCH ::= OPEN_PARENTESIS ID CLOSE_PARENTESIS OPEN_PARENTESIS IF_SWITCH COLON N_SWITCH_CASE CLOSE_BLOCK 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-6)).value;
		int swleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).left;
		int swright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).right;
		Object sw = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).value;
		
        //System.out.printtln("SWITCH");
        DefaultMutableTreeNode nodo = parser.createNodoObject("SWITCH",idright);
        nodo.add(parser.createNodoObject(id+"",idright));
        nodo.add((DefaultMutableTreeNode)sw);
        RESULT = nodo;
    
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_SWITCH",14, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-7)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // N_ELSE_IF ::= 
            {
              Object RESULT =null;
		RESULT = parser.createNodo("");
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_ELSE_IF",13, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // N_ELSE_IF ::= OPEN_PARENTESIS ELSE CLOSE_PARENTESIS COLON 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)).value;
		
        //System.out.printtln("ELSE");
        DefaultMutableTreeNode nodo = parser.createNodoObject("ELSE empy",mright);
        RESULT = nodo;
    
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_ELSE_IF",13, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // N_ELSE_IF ::= OPEN_PARENTESIS ELSE CLOSE_PARENTESIS COLON N_SENTENCIA 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-4)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-4)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-4)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
        DefaultMutableTreeNode nodo = parser.createNodoObject("ELSE_IFS",mright);
        ((DefaultMutableTreeNode)n).setUserObject(parser.createNodoObject("ELSE",mright));
        ((DefaultTreeModel) parser.sintaxTreeModel).nodeChanged(((DefaultMutableTreeNode)n));
        nodo.add((DefaultMutableTreeNode)n);
        RESULT = nodo;
    
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_ELSE_IF",13, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-4)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // N_ELSE_IF ::= OPEN_PARENTESIS N_SENTENCIA_BOOLEANA_ANIDADA CLOSE_PARENTESIS COLON N_ELSE_IF 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-4)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-4)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-4)).value;
		int bnleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)).left;
		int bnright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)).right;
		Object bn = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)).value;
		int swleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int swright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object sw = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
        DefaultMutableTreeNode nodo = parser.createNodoObject("N_ELSE_IF empy",mright);
        nodo.add((DefaultMutableTreeNode)bn);
        ((DefaultMutableTreeNode)sw).add(nodo);
        RESULT = sw;
    
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_ELSE_IF",13, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-4)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // N_ELSE_IF ::= OPEN_PARENTESIS N_SENTENCIA_BOOLEANA_ANIDADA CLOSE_PARENTESIS COLON N_SENTENCIA N_ELSE_IF 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-5)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-5)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-5)).value;
		int bnleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-4)).left;
		int bnright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-4)).right;
		Object bn = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-4)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).value;
		int swleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int swright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object sw = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
        DefaultMutableTreeNode nodo = parser.createNodoObject("ELSE_IF",mright);
        nodo.insert((DefaultMutableTreeNode)bn, 0);
        nodo.add((DefaultMutableTreeNode)n);
        ((DefaultMutableTreeNode)n).setUserObject(parser.createNodoObject("SENTENCES",mright));
        ((DefaultTreeModel) parser.sintaxTreeModel).nodeChanged(((DefaultMutableTreeNode)n));
        ((DefaultMutableTreeNode)sw).insert(nodo,0);
        RESULT = (DefaultMutableTreeNode)sw;
    
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_ELSE_IF",13, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-5)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // N_IF ::= OPEN_PARENTESIS N_SENTENCIA_BOOLEANA_ANIDADA CLOSE_PARENTESIS OPEN_PARENTESIS IF_SWITCH COLON N_ELSE_IF CLOSE_BLOCK 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-7)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-7)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-7)).value;
		int bnleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-6)).left;
		int bnright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-6)).right;
		Object bn = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-6)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).right;
		Object el = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).value;
		
        DefaultMutableTreeNode nodo = parser.createNodoObject("IF",mright);
        nodo.add((DefaultMutableTreeNode)bn);
        //N_Else_if
        DefaultMutableTreeNode node2 = ((DefaultMutableTreeNode)el);
        node2.setUserObject(parser.createNodoObject("ELSE_IFS",mright));
        ((DefaultTreeModel) parser.sintaxTreeModel).nodeChanged(node2);
        nodo.add(node2);
        RESULT = nodo;
    
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_IF",12, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-7)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // N_IF ::= OPEN_PARENTESIS N_SENTENCIA_BOOLEANA_ANIDADA CLOSE_PARENTESIS OPEN_PARENTESIS IF_SWITCH COLON N_SENTENCIA N_ELSE_IF CLOSE_BLOCK 
            {
              Object RESULT =null;
		int bnleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-7)).left;
		int bnright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-7)).right;
		Object bn = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-7)).value;
		int fsleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-4)).left;
		int fsright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-4)).right;
		Object fs = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-4)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).right;
		Object el = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).value;
		
        ((DefaultMutableTreeNode)n).insert((DefaultMutableTreeNode)bn, 0);
        ((DefaultMutableTreeNode)n).add((DefaultMutableTreeNode)el);
        ((DefaultMutableTreeNode)n).setUserObject(parser.createNodoObject("IF",fsright));
        ((DefaultTreeModel) parser.sintaxTreeModel).nodeChanged(((DefaultMutableTreeNode)n));
        RESULT = (DefaultMutableTreeNode)n;
    
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_IF",12, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-8)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // N_TO_FOR ::= error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
        String desc = "Solo se admiten Numeros enteros y variables";
        String mes = parser.errorMessage(desc, parser.getS());
        parser.report_error(mes ,err);
        //DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
        RESULT = "ERROR";
    
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_TO_FOR",11, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // N_TO_FOR ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		RESULT = id;
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_TO_FOR",11, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // N_TO_FOR ::= NUMBER 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		RESULT = n;
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_TO_FOR",11, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // N_FOR ::= OPEN_PARENTESIS ID COMA N_TO_FOR TO N_TO_FOR COMA OP_SUM N_TO_FOR CLOSE_PARENTESIS OPEN_PARENTESIS FOR COLON CLOSE_BLOCK 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-12)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-12)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-12)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-10)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-10)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-10)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-8)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-8)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-8)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-6)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-6)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-6)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-5)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-5)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-5)).value;
		
        //System.out.printtln("FOR");
        DefaultMutableTreeNode nodo = parser.createNodoObject("FOR",idright);
        DefaultMutableTreeNode parametros = parser.createNodoObject(id+","+n1+"->"+n2+","+o+n3,idright);
        nodo.add(parametros);
        RESULT = nodo;
    
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_FOR",10, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-13)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // N_FOR ::= OPEN_PARENTESIS ID COMA N_TO_FOR TO N_TO_FOR COMA OP_SUM N_TO_FOR CLOSE_PARENTESIS OPEN_PARENTESIS FOR COLON N_SENTENCIA CLOSE_BLOCK 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-13)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-13)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-13)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-11)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-11)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-11)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-9)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-9)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-9)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-7)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-7)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-7)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-6)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-6)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-6)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).value;
		
        String desde = "";
        String hasta = "";
        if ((o+"").equals("+")){
            desde=">=";
            hasta= "<";
        }else{
            desde="<=";
            hasta= ">";
        }
        DefaultMutableTreeNode parametros = parser.createNodoObject("AND",idright);
        DefaultMutableTreeNode mayorIgual = parser.createNodoObject(desde,idright);
        mayorIgual.insert(parser.createNodoObject(n1+"",idright),0);
        mayorIgual.insert(parser.createNodoObject(id+"",idright),0);
        DefaultMutableTreeNode menor = parser.createNodoObject(hasta,idright);
        menor.insert(parser.createNodoObject(n2+"",idright),0);
        menor.insert(parser.createNodoObject(id+"",idright),0);
        DefaultMutableTreeNode step = parser.createNodoObject("STEP",idright);
        step.insert(parser.createNodoObject(""+o+n3,idright),0);
        parametros.insert(menor,0);
        parametros.insert(mayorIgual,0);
        ((DefaultMutableTreeNode)n).insert(step,0);
        ((DefaultMutableTreeNode)n).insert(parametros,0);
        ((DefaultMutableTreeNode)n).setUserObject(parser.createNodoObject("FOR",idright));
        ((DefaultTreeModel) parser.sintaxTreeModel).nodeChanged(((DefaultMutableTreeNode)n));
        RESULT = (DefaultMutableTreeNode)n;

        /*//System.out.printtln("FOR");
        DefaultMutableTreeNode nodo = parser.createNodo("FOR");
        nodo.add(parser.createNodo(id+""));
        nodo.add(parser.createNodo("from: "+n1));
        nodo.add(parser.createNodo("to: "+n2));
        nodo.add(parser.createNodo(""+o+n3));
        //DefaultMutableTreeNode nodoS = parser.createNodo("Sentencias");
        //nodo = (DefaultMutableTreeNode)parser.addAllChildren((DefaultMutableTreeNode)e,nodo);
        DefaultMutableTreeNode node = ((DefaultMutableTreeNode)e);
        node.setUserObject("For Instructions");
        ((DefaultTreeModel) parser.sintaxTreeModel).nodeChanged(node);
        nodo.add(node);
        RESULT = nodo;*/
    
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_FOR",10, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-14)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // N_WHILE ::= OPEN_PARENTESIS N_SENTENCIA_BOOLEANA_ANIDADA CLOSE_PARENTESIS OPEN_PARENTESIS WHILE COLON CLOSE_BLOCK 
            {
              Object RESULT =null;
		int e2left = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-5)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-5)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-5)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).value;
		
        //System.out.printtln("WHILE");
        DefaultMutableTreeNode nodo = parser.createNodoObject("WHILE empy",mright);
        nodo.add((DefaultMutableTreeNode)e2);
        RESULT = nodo;
        
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_WHILE",9, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-6)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // N_WHILE ::= OPEN_PARENTESIS N_SENTENCIA_BOOLEANA_ANIDADA CLOSE_PARENTESIS OPEN_PARENTESIS WHILE COLON N_SENTENCIA CLOSE_BLOCK 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-7)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-7)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-7)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-6)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-6)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-5)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-5)).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-5)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-4)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-4)).right;
		Object e4 = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-4)).value;
		int e5left = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)).right;
		Object e5 = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)).value;
		int e6left = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).left;
		int e6right = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).right;
		Object e6 = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).value;
		int e8left = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int e8right = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object e8 = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
        //Código mágico
        ((DefaultMutableTreeNode)n).insert((DefaultMutableTreeNode)e, 0);
        //DefaultMutableTreeNode node3 = new DefaultMutableTreeNode(((DefaultMutableTreeNode)n).getUserObject());
        //((DefaultMutableTreeNode)n).insert(node3, 1);
        //cambiar nombre, brutal!!!
        ((DefaultMutableTreeNode)n).setUserObject(parser.createNodoObject("WHILE",e5right));
        ((DefaultTreeModel) parser.sintaxTreeModel).nodeChanged(((DefaultMutableTreeNode)n));
        RESULT = (DefaultMutableTreeNode)n;

        //System.out.printtln("WHILE");
        /*DefaultMutableTreeNode nodo = parser.createNodo("WHILE");
        nodo.add((DefaultMutableTreeNode)e2);
        //cambiar nombre, brutal!!!
        DefaultMutableTreeNode node = ((DefaultMutableTreeNode)e7);
        node.setUserObject("While Instructions");
        ((DefaultTreeModel) parser.sintaxTreeModel).nodeChanged(node);
        nodo.add(node);
        RESULT = nodo;*/
    
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_WHILE",9, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-7)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // N_SENTENCIA ::= N_CALL_FUNCTION PYC 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
        DefaultMutableTreeNode nodo = parser.createNodoObject("MAIN",mright);
        nodo.add((DefaultMutableTreeNode)n);
        RESULT = nodo;
    
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA",8, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // N_SENTENCIA ::= N_SENTENCIA N_CALL_FUNCTION PYC 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).value;
		
        ((DefaultMutableTreeNode)e).add((DefaultMutableTreeNode)n);
        RESULT = ((DefaultMutableTreeNode)e);
    
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA",8, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // N_SENTENCIA ::= N_CIN 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
        DefaultMutableTreeNode nodo = parser.createNodo("MAIN");
        nodo.add((DefaultMutableTreeNode)n);
        RESULT = nodo;
    
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA",8, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // N_SENTENCIA ::= N_SENTENCIA N_CIN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
        ((DefaultMutableTreeNode)e).add((DefaultMutableTreeNode)n);
        RESULT = ((DefaultMutableTreeNode)e);
    
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA",8, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // N_SENTENCIA ::= N_PRINT 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
        DefaultMutableTreeNode nodo = parser.createNodo("MAIN");
        nodo.add((DefaultMutableTreeNode)n);
        RESULT = nodo;
    
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA",8, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // N_SENTENCIA ::= N_SENTENCIA N_PRINT 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
        ((DefaultMutableTreeNode)e).add((DefaultMutableTreeNode)n);
        RESULT = ((DefaultMutableTreeNode)e);
    
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA",8, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // N_SENTENCIA ::= N_DECLARACION PYC 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
        DefaultMutableTreeNode nodo = parser.createNodoObject("MAIN",mright);
        nodo.add((DefaultMutableTreeNode)n);
        RESULT = nodo;
    
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA",8, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // N_SENTENCIA ::= N_SENTENCIA N_DECLARACION PYC 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).value;
		
        ((DefaultMutableTreeNode)e).add((DefaultMutableTreeNode)n);
        RESULT = ((DefaultMutableTreeNode)e);
    
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA",8, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // N_SENTENCIA ::= N_SWITCH 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
        DefaultMutableTreeNode nodo = parser.createNodo("MAIN");
        nodo.add((DefaultMutableTreeNode)n);
        RESULT = nodo;
    
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA",8, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // N_SENTENCIA ::= N_SENTENCIA N_SWITCH 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
        ((DefaultMutableTreeNode)e).add((DefaultMutableTreeNode)n);
        RESULT = ((DefaultMutableTreeNode)e);
    
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA",8, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // N_SENTENCIA ::= N_IF 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
        DefaultMutableTreeNode nodo = parser.createNodo("MAIN");
        nodo.add((DefaultMutableTreeNode)n);
        RESULT = nodo;
    
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA",8, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // N_SENTENCIA ::= N_SENTENCIA N_IF 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
        ((DefaultMutableTreeNode)e).add((DefaultMutableTreeNode)n);
        RESULT = ((DefaultMutableTreeNode)e);
    
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA",8, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // N_SENTENCIA ::= N_FOR 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
        DefaultMutableTreeNode nodo = parser.createNodo("MAIN");
        nodo.add((DefaultMutableTreeNode)n);
        RESULT = nodo;
    
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA",8, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // N_SENTENCIA ::= N_SENTENCIA N_FOR 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
        ((DefaultMutableTreeNode)e).add((DefaultMutableTreeNode)n);
       RESULT = ((DefaultMutableTreeNode)e);
    
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA",8, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // N_SENTENCIA ::= N_WHILE 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
        DefaultMutableTreeNode nodo = parser.createNodo("MAIN");
        nodo.add((DefaultMutableTreeNode)n);
        RESULT = nodo;
    
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA",8, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // N_SENTENCIA ::= N_SENTENCIA N_WHILE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
        ((DefaultMutableTreeNode)e).add((DefaultMutableTreeNode)n);
        RESULT = ((DefaultMutableTreeNode)e);
    
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_SENTENCIA",8, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // N_RETORNO_FUNCTION ::= error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
    String desc = "En los parametros solo se aceptan los tipos: int, bln, chr, arr, mtx";
    String mes = parser.errorMessage(desc, parser.getS());
    DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
    RESULT = nodo;
    parser.report_error(mes ,err);
    
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_RETORNO_FUNCTION",7, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // N_RETORNO_FUNCTION ::= MATRIX N_TIPOS_DECLARACION_MATRIZ 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		RESULT = parser.createNodoObject(n+" "+m+"",nright);
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_RETORNO_FUNCTION",7, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // N_RETORNO_FUNCTION ::= ARRAY N_TIPOS_DECLARACION_MATRIZ 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		RESULT = parser.createNodoObject(n+" "+m+"",nright);
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_RETORNO_FUNCTION",7, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // N_RETORNO_FUNCTION ::= CHAR 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		RESULT = parser.createNodoObject(n+"",nright);
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_RETORNO_FUNCTION",7, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // N_RETORNO_FUNCTION ::= BOOLEAN 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		RESULT = parser.createNodoObject(n+"",nright);
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_RETORNO_FUNCTION",7, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // N_RETORNO_FUNCTION ::= INTENGER 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		RESULT = parser.createNodoObject(n+"",nright);
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_RETORNO_FUNCTION",7, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // N_PARAMETRO_FUNCTION ::= ID ID error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
        String desc = "Debe ser un solo identificador. Si tiene varias palabras unasla: \"funcionMuesta o funcion_muestra\"   ";
        String mes = parser.errorMessage(desc, parser.getS());
        DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
        RESULT = nodo;
        parser.report_error(mes ,err);
    
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_PARAMETRO_FUNCTION",6, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // N_PARAMETRO_FUNCTION ::= N_RETORNO_FUNCTION ID 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		  
            DefaultMutableTreeNode nodo = parser.createNodoObject("PARAMETERS",idright);
            nodo.add(parser.createNodoObject(r+" "+id,idright));
            RESULT = nodo;
        
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_PARAMETRO_FUNCTION",6, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // N_PARAMETRO_FUNCTION ::= N_RETORNO_FUNCTION ID COMA N_PARAMETRO_FUNCTION 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
            ((DefaultMutableTreeNode)n).insert(parser.createNodoObject(r+" "+id,idright),0);
            RESULT = n;
        
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_PARAMETRO_FUNCTION",6, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // N_PARAMETRO ::= OPEN_PARENTESIS N_PARAMETRO_FUNCTION CLOSE_PARENTESIS 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).value;
		
            RESULT = ((DefaultMutableTreeNode)e);
        
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_PARAMETRO",5, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // N_PARAMETRO ::= OPEN_PARENTESIS CLOSE_PARENTESIS 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).value;
		
            //RESULT = null;
            RESULT = parser.createNodoObject("PARAMETERS",opright);
        
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_PARAMETRO",5, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // N_FUNCTION ::= N_PARAMETRO ID OPEN_PARENTESIS FUNCTION COLON N_RETORNO_FUNCTION N_SENTENCIA RETURN N_VALOR_VARIABLE error PYC 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-10)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-10)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-10)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-9)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-9)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-9)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-5)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-5)).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-5)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-4)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-4)).value;
		int vbleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).left;
		int vbright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).right;
		Object vb = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).value;
		int errleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).value;
		
                String desc = "Falta el PYC del retorno";
                String mes = parser.errorMessage(desc, parser.getS());
                parser.report_error(mes ,err);
                DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
                RESULT = nodo;
    
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_FUNCTION",4, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-10)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // N_FUNCTION ::= N_PARAMETRO ID OPEN_PARENTESIS FUNCTION COLON N_RETORNO_FUNCTION N_SENTENCIA RETURN N_VALOR_VARIABLE PYC error 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-10)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-10)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-10)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-9)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-9)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-9)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-5)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-5)).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-5)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-4)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-4)).value;
		int vbleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).left;
		int vbright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).right;
		Object vb = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).value;
		int errleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
                String desc = "Falta el close block de la función";
                String mes = parser.errorMessage(desc, parser.getS());
                parser.report_error(mes ,err);
                DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
                RESULT = nodo;
    
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_FUNCTION",4, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-10)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // N_FUNCTION ::= N_PARAMETRO ID OPEN_PARENTESIS FUNCTION COLON N_RETORNO_FUNCTION N_SENTENCIA error 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-7)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-7)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-7)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-6)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-6)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-6)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).value;
		int errleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
                String desc = "Falta el return de la función";
                String mes = parser.errorMessage(desc, parser.getS());
                parser.report_error(mes ,err);
                DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
                RESULT = nodo;
        
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_FUNCTION",4, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-7)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // N_FUNCTION ::= N_PARAMETRO ID OPEN_PARENTESIS FUNCTION error 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-4)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)).value;
		int errleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
                String desc = "Falta \":\" depues de fun";
                String mes = parser.errorMessage(desc, parser.getS());
                parser.report_error(mes ,err);
                DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
                RESULT = nodo;
        
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_FUNCTION",4, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-4)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // N_FUNCTION ::= N_PARAMETRO ID OPEN_PARENTESIS FUNCTION COLON N_RETORNO_FUNCTION RETURN N_VALOR_VARIABLE PYC CLOSE_BLOCK 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-9)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-9)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-9)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-8)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-8)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-4)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-4)).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-4)).value;
		int vbleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).left;
		int vbright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).right;
		Object vb = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).value;
		
            //DefaultMutableTreeNode nodo = parser.createNodo(id+":"+e3+"");
            DefaultMutableTreeNode nodo = parser.createNodoObject(id+":"+e3+"", idright);
            nodo.add((DefaultMutableTreeNode)e1);
            nodo.add(parser.createNodoObject("ret " + "" +vb+ "", vbright));
            RESULT = nodo;
        
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_FUNCTION",4, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-9)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // N_FUNCTION ::= N_PARAMETRO ID OPEN_PARENTESIS FUNCTION COLON NULL CLOSE_BLOCK 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-6)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-5)).value;
		int nlleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).left;
		int nlright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).right;
		Object nl = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).value;
		
            //DefaultMutableTreeNode nodo = parser.createNodo(id+":"+nl+"");
            DefaultMutableTreeNode nodo = parser.createNodoObject(id+":"+nl+"",idright);
            nodo.add((DefaultMutableTreeNode)e);
            RESULT = nodo;
        
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_FUNCTION",4, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-6)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // N_FUNCTION ::= N_PARAMETRO ID OPEN_PARENTESIS FUNCTION COLON NULL N_SENTENCIA CLOSE_BLOCK 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-7)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-7)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-7)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-6)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-6)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-6)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).value;
		
            ((DefaultMutableTreeNode)n).insert((DefaultMutableTreeNode)e1, 0);
            ((DefaultMutableTreeNode)n).setUserObject(parser.createNodoObject(e2+":"+e3+"",e2right));
            ((DefaultTreeModel) parser.sintaxTreeModel).nodeChanged(((DefaultMutableTreeNode)n));
            RESULT = (DefaultMutableTreeNode)n;

                /*DefaultMutableTreeNode nodo = parser.createNodo(e2+""+":"+e3+"");
                nodo.add((DefaultMutableTreeNode)e1);
                nodo.add(((DefaultMutableTreeNode)e4));
            RESULT = nodo;*/
            //RESULT = ((DefaultMutableTreeNode)e4);
        
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_FUNCTION",4, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-7)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // N_FUNCTION ::= N_PARAMETRO ID OPEN_PARENTESIS FUNCTION COLON N_RETORNO_FUNCTION N_SENTENCIA RETURN N_VALOR_VARIABLE PYC CLOSE_BLOCK 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-10)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-10)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-10)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-9)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-9)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-9)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-5)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-5)).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-5)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-4)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-4)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)).value;
		int vbleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).left;
		int vbright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).right;
		Object vb = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).value;
		
            ((DefaultMutableTreeNode)n).insert((DefaultMutableTreeNode)e1, 0);
            //DefaultMutableTreeNode ret = parser.createNodo("ret " + "" +vb+ "");
            DefaultMutableTreeNode ret = parser.createNodoObject(vb+ ":ret",rright);
            ((DefaultMutableTreeNode)n).add((DefaultMutableTreeNode)ret);
            ((DefaultMutableTreeNode)n).setUserObject(parser.createNodoObject(e2+":"+e3+"",e2right));
            ((DefaultTreeModel) parser.sintaxTreeModel).nodeChanged(((DefaultMutableTreeNode)n));
            RESULT = (DefaultMutableTreeNode)n;

            /*DefaultMutableTreeNode nodo = parser.createNodo(e2+""+":"+e3+"");
                nodo.add((DefaultMutableTreeNode)e1);
                //cambiar nombre, brutal!!!
                DefaultMutableTreeNode node = ((DefaultMutableTreeNode)e4);
                node.setUserObject("Instructions");
                ((DefaultTreeModel) parser.sintaxTreeModel).nodeChanged(node);
                nodo.add(node);
               // nodo.add(((DefaultMutableTreeNode)e4));
            RESULT = nodo;*/
            //RESULT = ((DefaultMutableTreeNode)e4);
        
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_FUNCTION",4, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-10)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // N_FUNCTIONS ::= N_FUNCTION 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
            parser.insertInicioNodo((DefaultMutableTreeNode)e1);
    
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_FUNCTIONS",3, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // N_FUNCTIONS ::= N_FUNCTIONS N_FUNCTION 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
        parser.agregarNodo((DefaultMutableTreeNode)e1);
    
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_FUNCTIONS",3, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // N_MAIN ::= OPEN_PARENTESIS CLOSE_PARENTESIS OPEN_PARENTESIS MAIN COLON CLOSE_BLOCK 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).value;
		
        //RESULT = parser.createNodo("MAIN");
        RESULT = parser.createNodoObject("MAIN", mright);
    
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_MAIN",2, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-5)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // N_MAIN ::= OPEN_PARENTESIS error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
                String desc = "El main no debe tener parametros";
                String mes = parser.errorMessage(desc, parser.getS());
                DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
                RESULT = nodo;
                parser.report_error(mes ,err);
        
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_MAIN",2, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // N_MAIN ::= OPEN_PARENTESIS CLOSE_PARENTESIS error MAIN COLON N_SENTENCIA CLOSE_BLOCK 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-4)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-4)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).value;
		
                String desc = "Debe volver a abrir parentesis antes de main \"()(main: -código- :)\" ";
                String mes = parser.errorMessage(desc, parser.getS());
                DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
                RESULT = nodo;
                parser.report_error(mes ,err);
        
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_MAIN",2, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-6)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // N_MAIN ::= OPEN_PARENTESIS CLOSE_PARENTESIS OPEN_PARENTESIS MAIN COLON N_SENTENCIA CLOSE_BLOCK 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).value;
		
        //DefaultMutableTreeNode nodo = parser.createNodo("MAIN");
        RESULT = ((DefaultMutableTreeNode)e);
    
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_MAIN",2, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-6)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // N_INICIO ::= N_MAIN N_FUNCTIONS 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).value;
		
            parser.insertInicioNodo((DefaultMutableTreeNode)e1);
        
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_INICIO",1, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // N_INICIO ::= N_MAIN 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
            parser.agregarNodo((DefaultMutableTreeNode)e1);
        
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_INICIO",1, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // N_INICIO ::= N_VARIABLES_GLOBALES N_MAIN N_FUNCTIONS 
            {
              Object RESULT =null;
		int glbleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).left;
		int glbright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).right;
		Object glb = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).value;
		
            parser.insertInicioNodo((DefaultMutableTreeNode)e1);
            parser.insertInicioNodo((DefaultMutableTreeNode)glb);
        
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_INICIO",1, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // N_INICIO ::= N_VARIABLES_GLOBALES N_MAIN 
            {
              Object RESULT =null;
		int glbleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).left;
		int glbright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).right;
		Object glb = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.peek()).value;
		
            parser.agregarNodo((DefaultMutableTreeNode)glb);
            parser.agregarNodo((DefaultMutableTreeNode)e1);
        
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_INICIO",1, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // N_VARIABLES_GLOBALES ::= N_VARIABLES_GLOBALES VARIABLE N_DECLARACION PYC 
            {
              Object RESULT =null;
		int nglbleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)).left;
		int nglbright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)).right;
		Object nglb = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)).value;
		int glbleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).left;
		int glbright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).right;
		Object glb = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).value;
		
            ((DefaultMutableTreeNode)nglb).add((DefaultMutableTreeNode)d);
            RESULT = ((DefaultMutableTreeNode)nglb);
        
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_VARIABLES_GLOBALES",0, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-3)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // N_VARIABLES_GLOBALES ::= VARIABLE N_DECLARACION PYC 
            {
              Object RESULT =null;
		int glbleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).left;
		int glbright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).right;
		Object glb = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).value;
		
            DefaultMutableTreeNode nodo = parser.createNodoObject("VARIABLES_GLOBALES",glbright);
            nodo.add((DefaultMutableTreeNode)d);
            RESULT = nodo;
        
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("N_VARIABLES_GLOBALES",0, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-2)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          return CUP$ASintaxT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= N_INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)).value;
		RESULT = start_val;
              CUP$ASintaxT$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.elementAt(CUP$ASintaxT$top-1)), ((java_cup.runtime.Symbol)CUP$ASintaxT$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ASintaxT$parser.done_parsing();
          return CUP$ASintaxT$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

