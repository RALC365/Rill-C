package CUP;

import java_cup.runtime.Symbol;
/**
*import java_cup.runtime.*;
**/
//Arbolito de Compi
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;

parser code
{:
    private Symbol s;
    
    public Symbol getS(){
            return this.s;
        }
    /**
     * Método al que se llama automáticamente ante algún error sintactico.
    **/ 
    public void syntax_error(Symbol s){
        this.s = s;
        System.out.println("Error Sintáctico recuperable en la Línea " + (s.right) +
        " Columna "+s.left+ ". No se esperaba este componente: " +s.value+".");

        String report = "Syntax error in line " + getS().right + " Column " + getS().left + ". No se esperaba este componente: " + getS().value;
        if(getS().value == null){
            report = "You didn't close your last code structure";
        }
        addError(report + "\n");
         
    }

    /**
     * Método al que se llama automáticamente ante algún error sintáctico 
     * en el que ya no es posible una recuperación de errores.
     **/ 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error síntactico irrecuperable en la Línea " + 
        (s.right)+ " Columna "+s.left+". Componente " + s.value + 
        " no reconocido."); 
    }
    
    //Guardar los errores encontrados
    private String ERRORES = "";
    private int cERRORES = 0;
    public void addError(String error){
        this.ERRORES += error;
       this.cERRORES++;
    }
    public String getERRORES(){
        return this.ERRORES;
    }
    public void setERRORES(String err){
        this.ERRORES = err;
    }

    public int getcERRORES(){
        return this.cERRORES;
    }
    public void setcERRORES(int err){
        this.cERRORES = err;
    }

    public String errorMessage(String error, Symbol s){
        String report = "Syntax error in line " + s.right + " Column " + s.left + ". No se esperaba este componente: " +s.value+ "\nDescripción: " + error +"\n";
        this.addError(report);
        System.out.println("Cantidad: " + getcERRORES());
        return report;
    }

    //Se vino el arbolito papa
    DefaultMutableTreeNode sintaxTree;
    DefaultTreeModel sintaxTreeModel;
    DefaultMutableTreeNode nodoActual;

    public DefaultTreeModel createTreeSintax(String name){
        this.sintaxTree = new DefaultMutableTreeNode(name);
        this.sintaxTreeModel = new DefaultTreeModel(sintaxTree);
        this.nodoActual = this.sintaxTree;
        return sintaxTreeModel;
    }
    
    public DefaultMutableTreeNode getTreeSintax(){
        return this.sintaxTree;
    }
    
    public DefaultTreeModel getTreeSintaxModel(){
        return this.sintaxTreeModel;
    }

     public DefaultMutableTreeNode createNodo(String name){
        return new DefaultMutableTreeNode(name);
    }

    public DefaultMutableTreeNode createNodoObject(String name, int numLine){
        return new DefaultMutableTreeNode(new InstructionCode(name, numLine));
    }
    
    public void agregarNodo(DefaultMutableTreeNode nodo){
        this.sintaxTree.add(nodo);
    }

    public void insertInicioNodo(DefaultMutableTreeNode nodo){
        this.sintaxTree.insert(nodo,0);
    }
    
    public void setNodoActual(DefaultMutableTreeNode nodo){
        this.nodoActual = nodo;
    }

    public DefaultMutableTreeNode getNodoActual(){
        return this.nodoActual;
    }

    public DefaultMutableTreeNode addAllChildren(DefaultMutableTreeNode father, DefaultMutableTreeNode padrastro){
        for (int i = 0; i < father.getChildCount(); i++) {
            padrastro.add((DefaultMutableTreeNode)father.getChildAt(i));
        }
        return padrastro;
    }
:};
/* code structure */
terminal 
  ERROR,
  CLOSE_BLOCK,
  OPEN_PARENTESIS,
  CLOSE_PARENTESIS,
  PYC,
  BETWEEN,
  OPEN_SQR_BRACKET,
  CLOSE_SQR_BRACKET,
  COMA,
  COLON,
  BACK_SLASH,
  NEW_LINE,
  NULL,
  TRUE,
  FALSE,
  STRING,
  CHAR_ELEMENT;

/* control statements */
  terminal FUNCTION,
  IF_SWITCH,
  PRINT,
  WHILE,
  FOR,
  ELSE,
  RETURN,
  CIN,
  TO,
  MAIN;

/* operators */
  terminal OP_REL,
  OP_SUM,
  OP_MULTI_DIV,
  MOD,
  INCREMENT,
  CON_AND,
  CON_OR;

/* data types */
  terminal INTENGER,
  BOOLEAN,
  CHAR,
  ARRAY,
  MATRIX,
  VARIABLE;

/* identifier */
  terminal String ID;
  terminal Integer NUMBER;

/* Non terminals */
non terminal 
    /* code blocks */
    N_INICIO, 
    N_MAIN,
    N_FUNCTIONS,
    N_FUNCTION,
    N_PARAMETRO,
    N_PARAMETRO_FUNCTION, 
    N_RETORNO_FUNCTION,

    /* control statement */
    N_SENTENCIA,
    N_WHILE,
    N_FOR,
        N_TO_FOR,
    N_IF,
        N_ELSE_IF,
    N_SWITCH,
    N_SWITCH_CASE,
    N_SENTENCIA_BOOLEANA_SWITCH,
    N_CALL_FUNCTION,
    N_CALL_FUNCTION_PARAMETROS,

    /*variable definition*/
    N_SENTENCIA_BOOLEANA_ANIDADA,
    N_SENTENCIA_BOOLEANA,   
    N_AND_OR,
    N_DECLARACION,
    N_DECLARACION_ID, //Para las declaraciones int a,b,c,d.,
    N_VALOR_VARIABLE,
    N_MATRIZ,
    N_TIPOS_DECLARACION_MATRIZ,
    N_ARREGLO,
    N_BOOLEAN_ID,
    N_BOOLEAN_VALUE,
    N_ARGUMENTOS,

    /*Opetators*/
    N_PRINT,
    N_PRINT_IMPRESS,
    N_CIN,

    /*MATHEMATICS*/
    EXPR_LIST,
    EXPR
    ;

/*Preferences*/
precedence left CON_AND;
precedence left OP_SUM;
precedence left OP_MULTI_DIV, MOD;
precedence left OPEN_PARENTESIS, CLOSE_PARENTESIS;
                        start with N_INICIO;

/* -------------------------CODE BLOCKS------------------------------------- */
N_INICIO ::= 
    N_MAIN:e1
        {:
            parser.agregarNodo((DefaultMutableTreeNode)e1);
        :}
    |
    N_MAIN:e1 N_FUNCTIONS
        {:
            parser.insertInicioNodo((DefaultMutableTreeNode)e1);
        :}
    |
    N_FUNCTIONS N_MAIN:e1
        {:
            parser.insertInicioNodo((DefaultMutableTreeNode)e1);
        :}
    /*error:e {: 
        String report = "Syntax error in line " + parser.getS().right + " Column " + parser.getS().left + ". No se esperaba este componente: " +parser.getS().value;
        //parser.addError(report + "\n");
        parser.report_error(report,e); 
        //System.out.println("Error: " + "1\n\n\n\n");
        parser.agregarNodo((parser.createNodo("ERROR")));
    :}*/
;

N_MAIN ::=
    OPEN_PARENTESIS 
    CLOSE_PARENTESIS 
    OPEN_PARENTESIS 
    MAIN 
    COLON 
    N_SENTENCIA:e
    CLOSE_BLOCK
    {:
        //DefaultMutableTreeNode nodo = parser.createNodo("MAIN");
        RESULT = ((DefaultMutableTreeNode)e);
    :}
    |OPEN_PARENTESIS CLOSE_PARENTESIS error:err MAIN COLON N_SENTENCIA:e CLOSE_BLOCK{:
                String desc = "Debe volver a abrir parentesis antes de main \"()(main: -código- :)\" ";
                String mes = parser.errorMessage(desc, parser.getS());
                DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
                RESULT = nodo;
                parser.report_error(mes ,err);
        :}

    |OPEN_PARENTESIS error:err {:
                String desc = "El main no debe tener parametros";
                String mes = parser.errorMessage(desc, parser.getS());
                DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
                RESULT = nodo;
                parser.report_error(mes ,err);
        :}
    |
    OPEN_PARENTESIS 
    CLOSE_PARENTESIS 
    OPEN_PARENTESIS 
    MAIN:m
    COLON 
    CLOSE_BLOCK
    {:
        //RESULT = parser.createNodo("MAIN");
        RESULT = parser.createNodoObject("MAIN", mright);
    :}
;

N_FUNCTIONS::=
    N_FUNCTIONS N_FUNCTION:e1
    {:
        parser.agregarNodo((DefaultMutableTreeNode)e1);
    :}
    | 
    N_FUNCTION:e1
    {:
            parser.insertInicioNodo((DefaultMutableTreeNode)e1);
    :}
;

N_FUNCTION ::=
    N_PARAMETRO:e1
    ID:e2
    OPEN_PARENTESIS 
    FUNCTION 
    COLON 
    N_RETORNO_FUNCTION:e3
    N_SENTENCIA:n
    RETURN:r
        N_VALOR_VARIABLE:vb
    PYC
    CLOSE_BLOCK 
        {:
            ((DefaultMutableTreeNode)n).insert((DefaultMutableTreeNode)e1, 0);
            //DefaultMutableTreeNode ret = parser.createNodo("ret " + "" +vb+ "");
            DefaultMutableTreeNode ret = parser.createNodoObject("ret " + "" +vb+ "",rright);
            ((DefaultMutableTreeNode)n).add((DefaultMutableTreeNode)ret);
            ((DefaultMutableTreeNode)n).setUserObject(parser.createNodoObject(e2+":"+e3+"",e2right));
            ((DefaultTreeModel) parser.sintaxTreeModel).nodeChanged(((DefaultMutableTreeNode)n));
            RESULT = (DefaultMutableTreeNode)n;

            /*DefaultMutableTreeNode nodo = parser.createNodo(e2+""+":"+e3+"");
                nodo.add((DefaultMutableTreeNode)e1);
                //cambiar nombre, brutal!!!
                DefaultMutableTreeNode node = ((DefaultMutableTreeNode)e4);
                node.setUserObject("Instructions");
                ((DefaultTreeModel) parser.sintaxTreeModel).nodeChanged(node);
                nodo.add(node);
               // nodo.add(((DefaultMutableTreeNode)e4));
            RESULT = nodo;*/
            //RESULT = ((DefaultMutableTreeNode)e4);
        :}
    |
    N_PARAMETRO:e1
    ID:e2
    OPEN_PARENTESIS 
    FUNCTION 
    COLON 
    NULL:e3
    N_SENTENCIA:n
    CLOSE_BLOCK 
       {:
            ((DefaultMutableTreeNode)n).insert((DefaultMutableTreeNode)e1, 0);
            ((DefaultMutableTreeNode)n).setUserObject(parser.createNodoObject(e2+":"+e3+"",e2right));
            ((DefaultTreeModel) parser.sintaxTreeModel).nodeChanged(((DefaultMutableTreeNode)n));
            RESULT = (DefaultMutableTreeNode)n;

                /*DefaultMutableTreeNode nodo = parser.createNodo(e2+""+":"+e3+"");
                nodo.add((DefaultMutableTreeNode)e1);
                nodo.add(((DefaultMutableTreeNode)e4));
            RESULT = nodo;*/
            //RESULT = ((DefaultMutableTreeNode)e4);
        :}
    |
    /*Funciones y procedimientos vacios*/
    N_PARAMETRO:e ID:id  OPEN_PARENTESIS  FUNCTION  COLON  NULL:nl CLOSE_BLOCK 
        {:
            //DefaultMutableTreeNode nodo = parser.createNodo(id+":"+nl+"");
            DefaultMutableTreeNode nodo = parser.createNodoObject(id+":"+nl+"",idright);
            nodo.add((DefaultMutableTreeNode)e);
            RESULT = nodo;
        :}
    |
    N_PARAMETRO:e1 ID:id OPEN_PARENTESIS  FUNCTION  COLON  N_RETORNO_FUNCTION:e3 RETURN N_VALOR_VARIABLE:vb  PYC CLOSE_BLOCK 
        {:
            //DefaultMutableTreeNode nodo = parser.createNodo(id+":"+e3+"");
            DefaultMutableTreeNode nodo = parser.createNodoObject(id+":"+e3+"", idright);
            nodo.add((DefaultMutableTreeNode)e1);
            nodo.add(parser.createNodoObject("ret " + "" +vb+ "", vbright));
            RESULT = nodo;
        :}
    
    //N_PARAMETRO:e1 ID:e2 OPEN_PARENTESIS  FUNCTION  COLON  N_RETORNO_FUNCTION:e3 N_SENTENCIA:n RETURN N_VALOR_VARIABLE:vb PYC CLOSE_BLOCK 
    |N_PARAMETRO:e1 ID:e2 OPEN_PARENTESIS  FUNCTION error:err{:
                String desc = "Falta \":\" depues de fun";
                String mes = parser.errorMessage(desc, parser.getS());
                parser.report_error(mes ,err);
                DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
                RESULT = nodo;
        :}
    |N_PARAMETRO:e1 ID:e2 OPEN_PARENTESIS  FUNCTION COLON  N_RETORNO_FUNCTION:e3 N_SENTENCIA:n error:err{:
                String desc = "Falta el return de la función";
                String mes = parser.errorMessage(desc, parser.getS());
                parser.report_error(mes ,err);
                DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
                RESULT = nodo;
        :}
    |N_PARAMETRO:e1 ID:e2 OPEN_PARENTESIS  FUNCTION COLON  N_RETORNO_FUNCTION:e3 N_SENTENCIA:n RETURN N_VALOR_VARIABLE:vb PYC error:err {:
                String desc = "Falta el close block de la función";
                String mes = parser.errorMessage(desc, parser.getS());
                parser.report_error(mes ,err);
                DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
                RESULT = nodo;
    :}
    |N_PARAMETRO:e1 ID:e2 OPEN_PARENTESIS  FUNCTION COLON  N_RETORNO_FUNCTION:e3 N_SENTENCIA:n RETURN N_VALOR_VARIABLE:vb error:err PYC {:
                String desc = "Falta el PYC del retorno";
                String mes = parser.errorMessage(desc, parser.getS());
                parser.report_error(mes ,err);
                DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
                RESULT = nodo;
    :}
    
    /*|
    error:e {: 
        String report = "Syntax error in line " + parser.getS().right + " Column " + parser.getS().left + ". No se esperaba este componente: " +parser.getS().value;
        //parser.addError(report + "\n");
        parser.report_error(report,e); 
        System.out.println("Error: " + "2\n\n\n\n\n\n");
        RESULT =  parser.createNodo("ERROR");
    :}*/
;
    
N_PARAMETRO ::=
    OPEN_PARENTESIS:op CLOSE_PARENTESIS
        {:
            //RESULT = null;
            RESULT = parser.createNodoObject("PARAMETERS",opright);
        :}
    |
    OPEN_PARENTESIS N_PARAMETRO_FUNCTION:e CLOSE_PARENTESIS
        {:
            RESULT = ((DefaultMutableTreeNode)e);
        :}
;
N_PARAMETRO_FUNCTION ::=
    N_RETORNO_FUNCTION:r ID:id COMA N_PARAMETRO_FUNCTION:n
        {:
            ((DefaultMutableTreeNode)n).insert(parser.createNodoObject(r+" "+id,idright),0);
            RESULT = n;
        :}
    |
    N_RETORNO_FUNCTION:r ID:id
        {:  
            DefaultMutableTreeNode nodo = parser.createNodoObject("PARAMETERS",idright);
            nodo.add(parser.createNodoObject(r+" "+id,idright));
            RESULT = nodo;
        :}
    |
    ID ID error:err{:
        String desc = "Debe ser un solo identificador. Si tiene varias palabras unasla: \"funcionMuesta o funcion_muestra\"   ";
        String mes = parser.errorMessage(desc, parser.getS());
        DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
        RESULT = nodo;
        parser.report_error(mes ,err);
    :}
;
    
N_RETORNO_FUNCTION ::=
    INTENGER:n {:RESULT = parser.createNodoObject(n+"",nright);:}|
    BOOLEAN:n {:RESULT = parser.createNodoObject(n+"",nright);:}|
    CHAR:n {:RESULT = parser.createNodoObject(n+"",nright);:}|
    ARRAY:n N_TIPOS_DECLARACION_MATRIZ:m {:RESULT = parser.createNodoObject(n+" "+m+"",nright);:}|
    MATRIX:n N_TIPOS_DECLARACION_MATRIZ:m{:RESULT = parser.createNodoObject(n+" "+m+"",nright);:}|
    error:err{:
    String desc = "En los parametros solo se aceptan los tipos: int, bln, chr, arr, mtx";
    String mes = parser.errorMessage(desc, parser.getS());
    DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
    RESULT = nodo;
    parser.report_error(mes ,err);
    :}
    ;

/* -------------------------CONTROL STAMENTS------------------------- */
N_SENTENCIA ::= 
    N_SENTENCIA:e N_WHILE:n
    {:
        ((DefaultMutableTreeNode)e).add((DefaultMutableTreeNode)n);
        RESULT = ((DefaultMutableTreeNode)e);
    :}
    |
    N_WHILE:n
    {:
        DefaultMutableTreeNode nodo = parser.createNodo("MAIN");
        nodo.add((DefaultMutableTreeNode)n);
        RESULT = nodo;
    :}
    |
    N_SENTENCIA:e N_FOR:n
    {:
        ((DefaultMutableTreeNode)e).add((DefaultMutableTreeNode)n);
       RESULT = ((DefaultMutableTreeNode)e);
    :}
    |
    N_FOR:n
    {:
        DefaultMutableTreeNode nodo = parser.createNodo("MAIN");
        nodo.add((DefaultMutableTreeNode)n);
        RESULT = nodo;
    :}
    |
    N_SENTENCIA:e N_IF:n
    {:
        ((DefaultMutableTreeNode)e).add((DefaultMutableTreeNode)n);
        RESULT = ((DefaultMutableTreeNode)e);
    :}
    |
    N_IF:n
    {:
        DefaultMutableTreeNode nodo = parser.createNodo("MAIN");
        nodo.add((DefaultMutableTreeNode)n);
        RESULT = nodo;
    :}
    |
    N_SENTENCIA:e N_SWITCH:n 
    {:
        ((DefaultMutableTreeNode)e).add((DefaultMutableTreeNode)n);
        RESULT = ((DefaultMutableTreeNode)e);
    :}
    |
    N_SWITCH:n
    {:
        DefaultMutableTreeNode nodo = parser.createNodo("MAIN");
        nodo.add((DefaultMutableTreeNode)n);
        RESULT = nodo;
    :}
    |
    N_SENTENCIA:e N_DECLARACION:n PYC 
    {:
        ((DefaultMutableTreeNode)e).add((DefaultMutableTreeNode)n);
        RESULT = ((DefaultMutableTreeNode)e);
    :}
    |
    N_DECLARACION:n PYC:m
    {:
        DefaultMutableTreeNode nodo = parser.createNodoObject("MAIN",mright);
        nodo.add((DefaultMutableTreeNode)n);
        RESULT = nodo;
    :}
    |
    N_SENTENCIA:e N_PRINT:n
    {:
        ((DefaultMutableTreeNode)e).add((DefaultMutableTreeNode)n);
        RESULT = ((DefaultMutableTreeNode)e);
    :}
    |
    N_PRINT: n
    {:
        DefaultMutableTreeNode nodo = parser.createNodo("MAIN");
        nodo.add((DefaultMutableTreeNode)n);
        RESULT = nodo;
    :}
    |
    N_SENTENCIA:e N_CIN:n
    {:
        ((DefaultMutableTreeNode)e).add((DefaultMutableTreeNode)n);
        RESULT = ((DefaultMutableTreeNode)e);
    :}
    |
    N_CIN:n
    {:
        DefaultMutableTreeNode nodo = parser.createNodo("MAIN");
        nodo.add((DefaultMutableTreeNode)n);
        RESULT = nodo;
    :}
    |
    N_SENTENCIA:e N_CALL_FUNCTION:n PYC 
    {:
        ((DefaultMutableTreeNode)e).add((DefaultMutableTreeNode)n);
        RESULT = ((DefaultMutableTreeNode)e);
    :}
    |
    N_CALL_FUNCTION:n PYC:m
    {:
        DefaultMutableTreeNode nodo = parser.createNodoObject("MAIN",mright);
        nodo.add((DefaultMutableTreeNode)n);
        RESULT = nodo;
    :}
    /*Errores*/
    /*|
    error:e {: 
        String report = "Syntax error in line " + parser.getS().right + " Column " + parser.getS().left + ". No se esperaba este componente: " +parser.getS().value;
        //parser.addError(report + "\n");
        parser.report_error(report,e); 
        ////System.out.println("Error: " + "3\n\n\n\n\n\n");
        RESULT =  parser.createNodo("ERROR");
    :}*/
;

N_WHILE ::= 
    //OPEN_PARENTESIS N_SENTENCIA_BOOLEANA_ANIDADA CLOSE_PARENTESIS OPEN_PARENTESIS WHILE COLON N_SENTENCIA CLOSE_BLOCK
    OPEN_PARENTESIS:e1
    N_SENTENCIA_BOOLEANA_ANIDADA:e
    CLOSE_PARENTESIS:e3
    OPEN_PARENTESIS:e4
    WHILE:e5
    COLON:e6
    N_SENTENCIA:n
    CLOSE_BLOCK:e8
        {:
        //Código mágico
        ((DefaultMutableTreeNode)n).insert((DefaultMutableTreeNode)e, 0);
        //DefaultMutableTreeNode node3 = new DefaultMutableTreeNode(((DefaultMutableTreeNode)n).getUserObject());
        //((DefaultMutableTreeNode)n).insert(node3, 1);
        //cambiar nombre, brutal!!!
        ((DefaultMutableTreeNode)n).setUserObject(parser.createNodoObject("WHILE",e5right));
        ((DefaultTreeModel) parser.sintaxTreeModel).nodeChanged(((DefaultMutableTreeNode)n));
        RESULT = (DefaultMutableTreeNode)n;

        //System.out.printtln("WHILE");
        /*DefaultMutableTreeNode nodo = parser.createNodo("WHILE");
        nodo.add((DefaultMutableTreeNode)e2);
        //cambiar nombre, brutal!!!
        DefaultMutableTreeNode node = ((DefaultMutableTreeNode)e7);
        node.setUserObject("While Instructions");
        ((DefaultTreeModel) parser.sintaxTreeModel).nodeChanged(node);
        nodo.add(node);
        RESULT = nodo;*/
    :}
    |
    /*While vacio*/
    OPEN_PARENTESIS N_SENTENCIA_BOOLEANA_ANIDADA:e2 CLOSE_PARENTESIS OPEN_PARENTESIS WHILE:m COLON CLOSE_BLOCK
        {:
        //System.out.printtln("WHILE");
        DefaultMutableTreeNode nodo = parser.createNodoObject("WHILE empy",mright);
        nodo.add((DefaultMutableTreeNode)e2);
        RESULT = nodo;
        :}
;

N_FOR ::= 
    OPEN_PARENTESIS 
    ID:id
    COMA 
    N_TO_FOR:n1
    TO 
    N_TO_FOR:n2
    COMA
    OP_SUM:o
    N_TO_FOR:n3
    CLOSE_PARENTESIS 
    OPEN_PARENTESIS 
    FOR 
    COLON 
    N_SENTENCIA:n
    CLOSE_BLOCK
    {:
        String desde = "";
        String hasta = "";
        if ((o+"").equals("+")){
            desde=">=";
            hasta= "<";
        }else{
            desde="<=";
            hasta= ">";
        }
        DefaultMutableTreeNode parametros = parser.createNodoObject("AND",idright);
        DefaultMutableTreeNode mayorIgual = parser.createNodoObject(desde,idright);
        mayorIgual.insert(parser.createNodoObject(n1+"",idright),0);
        mayorIgual.insert(parser.createNodoObject(id+"",idright),0);
        DefaultMutableTreeNode menor = parser.createNodoObject(hasta,idright);
        menor.insert(parser.createNodoObject(n2+"",idright),0);
        menor.insert(parser.createNodoObject(id+"",idright),0);
        DefaultMutableTreeNode step = parser.createNodoObject("STEP",idright);
        step.insert(parser.createNodoObject(""+o+n3,idright),0);
        parametros.insert(menor,0);
        parametros.insert(mayorIgual,0);
        ((DefaultMutableTreeNode)n).insert(step,0);
        ((DefaultMutableTreeNode)n).insert(parametros,0);
        ((DefaultMutableTreeNode)n).setUserObject(parser.createNodoObject("FOR",idright));
        ((DefaultTreeModel) parser.sintaxTreeModel).nodeChanged(((DefaultMutableTreeNode)n));
        RESULT = (DefaultMutableTreeNode)n;

        /*//System.out.printtln("FOR");
        DefaultMutableTreeNode nodo = parser.createNodo("FOR");
        nodo.add(parser.createNodo(id+""));
        nodo.add(parser.createNodo("from: "+n1));
        nodo.add(parser.createNodo("to: "+n2));
        nodo.add(parser.createNodo(""+o+n3));
        //DefaultMutableTreeNode nodoS = parser.createNodo("Sentencias");
        //nodo = (DefaultMutableTreeNode)parser.addAllChildren((DefaultMutableTreeNode)e,nodo);
        DefaultMutableTreeNode node = ((DefaultMutableTreeNode)e);
        node.setUserObject("For Instructions");
        ((DefaultTreeModel) parser.sintaxTreeModel).nodeChanged(node);
        nodo.add(node);
        RESULT = nodo;*/
    :}
    | 
    /*For vacio*/
    OPEN_PARENTESIS  ID:id  COMA  N_TO_FOR:n1  TO  N_TO_FOR:n2  COMA  OP_SUM:o N_TO_FOR:n3  CLOSE_PARENTESIS  OPEN_PARENTESIS  FOR  COLON  CLOSE_BLOCK
        {:
        //System.out.printtln("FOR");
        DefaultMutableTreeNode nodo = parser.createNodoObject("FOR",idright);
        DefaultMutableTreeNode parametros = parser.createNodoObject(id+","+n1+"->"+n2+","+o+n3,idright);
        nodo.add(parametros);
        RESULT = nodo;
    :}
;

N_TO_FOR::=
    NUMBER:n
        {:RESULT = n;:}
    | 
    
    ID:id
        {:RESULT = id;:}
    |
    error:err{:
        String desc = "Solo se admiten Numeros enteros y variables";
        String mes = parser.errorMessage(desc, parser.getS());
        parser.report_error(mes ,err);
        //DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
        RESULT = "ERROR";
    :}
        
;

N_IF ::= 
    OPEN_PARENTESIS N_SENTENCIA_BOOLEANA_ANIDADA:bn CLOSE_PARENTESIS OPEN_PARENTESIS IF_SWITCH:fs COLON 
    N_SENTENCIA:n
    N_ELSE_IF:el
    CLOSE_BLOCK
    {:
        ((DefaultMutableTreeNode)n).insert((DefaultMutableTreeNode)bn, 0);
        ((DefaultMutableTreeNode)n).add((DefaultMutableTreeNode)el);
        ((DefaultMutableTreeNode)n).setUserObject(parser.createNodoObject("IF",fsright));
        ((DefaultTreeModel) parser.sintaxTreeModel).nodeChanged(((DefaultMutableTreeNode)n));
        RESULT = (DefaultMutableTreeNode)n;
    :}
    | /*If vacio*/
    OPEN_PARENTESIS:m N_SENTENCIA_BOOLEANA_ANIDADA:bn CLOSE_PARENTESIS OPEN_PARENTESIS IF_SWITCH COLON 
    N_ELSE_IF:el
    CLOSE_BLOCK
    {:
        DefaultMutableTreeNode nodo = parser.createNodoObject("IF",mright);
        nodo.add((DefaultMutableTreeNode)bn);
        //N_Else_if
        DefaultMutableTreeNode node2 = ((DefaultMutableTreeNode)el);
        node2.setUserObject(parser.createNodoObject("ELSE_IFS",mright));
        ((DefaultTreeModel) parser.sintaxTreeModel).nodeChanged(node2);
        nodo.add(node2);
        RESULT = nodo;
    :}
;

N_ELSE_IF ::=
    OPEN_PARENTESIS:m N_SENTENCIA_BOOLEANA_ANIDADA:bn CLOSE_PARENTESIS COLON 
    N_SENTENCIA:n
    N_ELSE_IF:sw
    {:
        DefaultMutableTreeNode nodo = parser.createNodoObject("ELSE_IF",mright);
        nodo.insert((DefaultMutableTreeNode)bn, 0);
        nodo.add((DefaultMutableTreeNode)n);
        ((DefaultMutableTreeNode)n).setUserObject(parser.createNodoObject("SENTENCES",mright));
        ((DefaultTreeModel) parser.sintaxTreeModel).nodeChanged(((DefaultMutableTreeNode)n));
        ((DefaultMutableTreeNode)sw).insert(nodo,0);
        RESULT = (DefaultMutableTreeNode)sw;
    :}
    |
    /*Switch vacio*/
    OPEN_PARENTESIS:m N_SENTENCIA_BOOLEANA_ANIDADA:bn CLOSE_PARENTESIS COLON 
    N_ELSE_IF:sw
    {:
        DefaultMutableTreeNode nodo = parser.createNodoObject("N_ELSE_IF empy",mright);
        nodo.add((DefaultMutableTreeNode)bn);
        ((DefaultMutableTreeNode)sw).add(nodo);
        RESULT = sw;
    :}
    | /*Else*/
    OPEN_PARENTESIS:m ELSE CLOSE_PARENTESIS COLON 
    N_SENTENCIA:n
    {:
        DefaultMutableTreeNode nodo = parser.createNodoObject("ELSE_IFS",mright);
        ((DefaultMutableTreeNode)n).setUserObject(parser.createNodoObject("ELSE",mright));
        ((DefaultTreeModel) parser.sintaxTreeModel).nodeChanged(((DefaultMutableTreeNode)n));
        nodo.add((DefaultMutableTreeNode)n);
        RESULT = nodo;
    :}
    |/*Else vacío*/
    OPEN_PARENTESIS:m ELSE CLOSE_PARENTESIS COLON 
    {:
        //System.out.printtln("ELSE");
        DefaultMutableTreeNode nodo = parser.createNodoObject("ELSE empy",mright);
        RESULT = nodo;
    :}
    |
    {:RESULT = parser.createNodo("");:}
;

N_SWITCH ::=
    OPEN_PARENTESIS ID:id CLOSE_PARENTESIS OPEN_PARENTESIS 
    IF_SWITCH COLON 
    N_SWITCH_CASE:sw 
    CLOSE_BLOCK
    {:
        //System.out.printtln("SWITCH");
        DefaultMutableTreeNode nodo = parser.createNodoObject("SWITCH",idright);
        nodo.add(parser.createNodoObject(id+"",idright));
        nodo.add((DefaultMutableTreeNode)sw);
        RESULT = nodo;
    :}
;

N_SWITCH_CASE ::=
    OPEN_PARENTESIS:m N_SENTENCIA_BOOLEANA_SWITCH:bn CLOSE_PARENTESIS COLON 
    N_SENTENCIA:e
    N_SWITCH_CASE:sw
    {:
        //System.out.printtln("N_SWITCH_CASE");
        DefaultMutableTreeNode nodo = parser.createNodoObject("SWITCH_CASE",mright);
        nodo.add((DefaultMutableTreeNode)bn);
        nodo.add((DefaultMutableTreeNode)e);
        ((DefaultMutableTreeNode)sw).insert(nodo,0);
        ((DefaultMutableTreeNode)e).setUserObject(parser.createNodoObject("SENTENCES",mright));
        ((DefaultTreeModel) parser.sintaxTreeModel).nodeChanged(((DefaultMutableTreeNode)e));
        RESULT = sw;
    :}
    |
    /*Switch vacio*/
    OPEN_PARENTESIS:m N_SENTENCIA_BOOLEANA_SWITCH:bn CLOSE_PARENTESIS COLON 
    N_SWITCH_CASE 
    {:
        //System.out.printtln("N_SWITCH_CASE");
        DefaultMutableTreeNode nodo = parser.createNodoObject("SWITCH_CASE empy",mright);
        nodo.add((DefaultMutableTreeNode)bn);
        RESULT = nodo;
    :}
    |
    OPEN_PARENTESIS:m ELSE CLOSE_PARENTESIS COLON 
    N_SENTENCIA:e
    {:
        //System.out.printtln("ELSE");
        DefaultMutableTreeNode nodo = parser.createNodoObject("CASES",mright);
        //nodo.add(parser.createNodo(id+""));
        nodo.add((DefaultMutableTreeNode)e);
        ((DefaultMutableTreeNode)e).setUserObject(parser.createNodoObject("ELSE",mright));
        ((DefaultTreeModel) parser.sintaxTreeModel).nodeChanged(((DefaultMutableTreeNode)e));
        RESULT = nodo;
    :}
    |/*Else vacío*/
    OPEN_PARENTESIS:m ELSE CLOSE_PARENTESIS COLON 
    {:
        //System.out.printtln("ELSE");
        DefaultMutableTreeNode nodo = parser.createNodoObject("ELSE empy",mright);
        RESULT = nodo;
    :}
    /*Errores*/
    |
     OPEN_PARENTESIS error:err COLON
     N_SENTENCIA N_SWITCH_CASE:sw
            {:
                String desc = "Falta cerrar parentesis en el case del switch";
                String mes = parser.errorMessage(desc, parser.getS());
                DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
                RESULT = nodo;
                parser.report_error(mes ,err);
            :}
    |
     OPEN_PARENTESIS error:err OPEN_PARENTESIS COLON
     N_SENTENCIA N_SWITCH_CASE:sw
            {:
       String desc = "Falta cerrar parentesis en el case del switch";
       String mes = parser.errorMessage(desc, parser.getS());
       DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
       RESULT = nodo;
       parser.report_error(mes ,err);
       :}
    
;

/* -------------------------VARIABLE DEFINITION------------------------------ */
N_CALL_FUNCTION::=
    ID:id OPEN_PARENTESIS N_CALL_FUNCTION_PARAMETROS:n CLOSE_PARENTESIS 
        {:
            ((DefaultMutableTreeNode)n).setUserObject(parser.createNodoObject(id+":fun", idright));
            ((DefaultTreeModel) parser.sintaxTreeModel).nodeChanged(((DefaultMutableTreeNode)n));
            RESULT = (DefaultMutableTreeNode)n;

            /*DefaultMutableTreeNode node = parser.createNodo(id+":fun");
            node.add((DefaultMutableTreeNode) p);
            RESULT = node;*/
        :}
    |
    ID:id OPEN_PARENTESIS CLOSE_PARENTESIS
        {:
            DefaultMutableTreeNode node = parser.createNodoObject(id+":fun",idright);
            RESULT = node;
        :}
    |
    ID error:err OPEN_PARENTESIS{:
        String desc = "Falta el el identificador de la funcion";
        String mes = parser.errorMessage(desc, parser.getS());
        DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
        RESULT = nodo;
        parser.report_error(mes ,err);
    :}
    |
    ID OPEN_PARENTESIS error:err{:
        String desc = "Falta cerrar parentesis en llamado de función";
        String mes = parser.errorMessage(desc, parser.getS());
        DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
        RESULT = nodo;
        parser.report_error(mes ,err);
    :}
;

N_CALL_FUNCTION_PARAMETROS::=
    N_VALOR_VARIABLE:e1 COMA N_CALL_FUNCTION_PARAMETROS:e 
        {:
            ((DefaultMutableTreeNode)e).insert((DefaultMutableTreeNode)e1,0);
            RESULT = e;
        :}
    |
    
    N_VALOR_VARIABLE:e
        {:
            DefaultMutableTreeNode nodo = parser.createNodo("PARAMETERS");
            nodo.add((DefaultMutableTreeNode)e);
            RESULT = nodo;
        :}
    |
    N_VALOR_VARIABLE:e1 COMA error:err{:
        String desc = "Coma de más o falta valor en parametros de funcion";
        String mes = parser.errorMessage(desc, parser.getS());
        DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
        RESULT = nodo;
        parser.report_error(mes ,err);
    :}
;
N_SENTENCIA_BOOLEANA_ANIDADA ::=
    N_SENTENCIA_BOOLEANA:e1
    N_AND_OR:e2
        {:
            ((DefaultMutableTreeNode)e2).insert((DefaultMutableTreeNode)e1,0); 
            RESULT = e2;
        :}
    |
    N_SENTENCIA_BOOLEANA:bl
        {:
            RESULT = bl;
        :}
    |
    OPEN_PARENTESIS
    N_SENTENCIA_BOOLEANA_ANIDADA:bl
    CLOSE_PARENTESIS
    N_AND_OR:nd
        {:
            ((DefaultMutableTreeNode)nd).insert((DefaultMutableTreeNode)bl,0);
            RESULT = nd;
        :}
    |
    OPEN_PARENTESIS
    N_SENTENCIA_BOOLEANA_ANIDADA:bl
    CLOSE_PARENTESIS
        {:
            RESULT = bl;
        :}
    |
    OPEN_PARENTESIS CLOSE_PARENTESIS error:err{:
            String desc = "Parentesis vacios en sentencia booleana";
            String mes = parser.errorMessage(desc, parser.getS());
            DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
            RESULT = nodo;
            parser.report_error(mes ,err);
    :}
    |
    error:err OPEN_PARENTESIS CLOSE_PARENTESIS{:
            String desc = "Parentesis vacios en sentencia booleana";
            String mes = parser.errorMessage(desc, parser.getS());
            DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
            RESULT = nodo;
            parser.report_error(mes ,err);
    :}
;

N_AND_OR::=
    CON_AND:nd
    N_SENTENCIA_BOOLEANA_ANIDADA:bl
        {:
            DefaultMutableTreeNode nodo = parser.createNodoObject("AND",ndright);
            nodo.add((DefaultMutableTreeNode)bl);
            RESULT = nodo;
        :}
    |
    CON_OR:nd
    N_SENTENCIA_BOOLEANA_ANIDADA:bl
        {:
            DefaultMutableTreeNode nodo = parser.createNodoObject("OR",ndright);
            nodo.add((DefaultMutableTreeNode)bl);
            RESULT = nodo;
        :}
;

N_SENTENCIA_BOOLEANA ::= 
    /*ID
    ID:id1 OP_REL:op ID:id2
        {:
            DefaultMutableTreeNode nodo = parser.createNodoObject(op+"",opright);
            nodo.add(parser.createNodoObject(id1+"",id1right));
            nodo.add(parser.createNodoObject(id2+"",id2right));
            RESULT = nodo;
        :}
    |*/
    /*ID:id OP_REL:op STRING:s
        {:
            DefaultMutableTreeNode nodo = parser.createNodoObject(op+"",opright);
            nodo.add(parser.createNodoObject(id+"",idright));
            nodo.add(parser.createNodoObject(s+"",sright));
            RESULT = nodo;
        :}
    |
    ID:id OP_REL:op FALSE:f  
        {:
            DefaultMutableTreeNode nodo = parser.createNodoObject(op+"",opright);
            nodo.add(parser.createNodoObject(id+"",idright));
            nodo.add(parser.createNodoObject(f+"",fright));
            RESULT = nodo;
        :}
    |
    ID:id OP_REL:op TRUE:t  
        {:
            DefaultMutableTreeNode nodo = parser.createNodoObject(op+"",opright);
            nodo.add(parser.createNodoObject(id+"",idright));
            nodo.add(parser.createNodoObject(t+"",tright));
            RESULT = nodo;
        :}
    |*/
    //Simplifica a los de arriba
    ID:id OP_REL:op EXPR_LIST:n 
        {:
            DefaultMutableTreeNode nodo = parser.createNodoObject(op+"",opright);
            nodo.add(parser.createNodoObject(id+"",idright));
            //nodo.add(parser.createNodo(n+""));
            nodo.add((DefaultMutableTreeNode)n);
            RESULT = nodo;
        :} 
    |
    /* AL REVES */
    NUMBER:n OP_REL:op ID:id  
        {:
            DefaultMutableTreeNode nodo = parser.createNodoObject(op+"",opright);
            nodo.add(parser.createNodoObject(id+"",idright));
            nodo.add(parser.createNodoObject(n+"",nright));
            RESULT = nodo;
        :}
    |
    STRING:s OP_REL:op ID:id
        {:
            DefaultMutableTreeNode nodo = parser.createNodo(op+"");
            nodo.add(parser.createNodo(id+""));
            nodo.add(parser.createNodo(s+""));
            RESULT = nodo;
        :}
    |
    STRING OP_REL error:err {:
            String desc = "Operando derecho con String no valido";
            String mes = parser.errorMessage(desc, parser.getS());
            DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
            RESULT = nodo;
            parser.report_error(mes ,err);
        :}
    |
    FALSE:f OP_REL:op ID:id  
        {:
            DefaultMutableTreeNode nodo = parser.createNodoObject(op+"",opright);
            nodo.add(parser.createNodoObject(id+"",idright));
            nodo.add(parser.createNodoObject(f+"",fright));
            RESULT = nodo;
        :}
    |
    FALSE OP_REL error:err {:
            String desc = "Operando derecho con false no válido";
            String mes = parser.errorMessage(desc, parser.getS());
            DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
            RESULT = nodo;
            parser.report_error(mes ,err);
        :}
    |
    TRUE:t OP_REL:op ID:id  
        {:
            DefaultMutableTreeNode nodo = parser.createNodoObject(op+"",opright);
            nodo.add(parser.createNodoObject(id+"",idright));
            nodo.add(parser.createNodoObject(t+"",tright));
            RESULT = nodo;
        :}
    |
    TRUE OP_REL error:err {:
            String desc = "Operando derecho con true no válido";
            String mes = parser.errorMessage(desc, parser.getS());
            DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
            RESULT = nodo;
            parser.report_error(mes ,err);
        :}
    |
    /*Number*/
    NUMBER:n1 OP_REL:op NUMBER:n2 
        {:
            DefaultMutableTreeNode nodo = parser.createNodoObject(op+"",opright);
            nodo.add(parser.createNodoObject(n1+"",n1right));
            nodo.add(parser.createNodoObject(n2+"",n2right));
            RESULT = nodo;
        :}
    |
    NUMBER OP_REL error:err {:
            String desc = "Operando derecho con número no válido";
            String mes = parser.errorMessage(desc, parser.getS());
            DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
            RESULT = nodo;
            parser.report_error(mes ,err);
        :}
    |
    NUMBER:n OP_REL:op STRING:s 
        {:
            DefaultMutableTreeNode nodo = parser.createNodoObject(op+"",opright);
            nodo.add(parser.createNodoObject(n+"",nright));
            nodo.add(parser.createNodoObject(s+"",sright));
            RESULT = nodo;
        :}
    |
    NUMBER:n OP_REL:op FALSE:f 
        {:
            DefaultMutableTreeNode nodo = parser.createNodoObject(op+"",opright);
            nodo.add(parser.createNodoObject(n+"",nright));
            nodo.add(parser.createNodoObject(f+"",fright));
            RESULT = nodo;
        :}
    |
    NUMBER:n OP_REL:op TRUE:t 
        {:
            DefaultMutableTreeNode nodo = parser.createNodoObject(op+"",opright);
            nodo.add(parser.createNodoObject(n+"",nright));
            nodo.add(parser.createNodoObject(t+"",tright));
            RESULT = nodo;
        :}
    |
    /* AL REVES */
    STRING:s OP_REL:op NUMBER:n 
        {:
            DefaultMutableTreeNode nodo = parser.createNodoObject(op+"",opright);
            nodo.add(parser.createNodoObject(n+"",nright));
            nodo.add(parser.createNodoObject(s+"",sright));
            RESULT = nodo;
        :}
    |
    FALSE:f OP_REL:op NUMBER:n 
        {:
            DefaultMutableTreeNode nodo = parser.createNodoObject(op+"",opright);
            nodo.add(parser.createNodoObject(f+"",fright));
            nodo.add(parser.createNodoObject(n+"",nright));
            RESULT = nodo;
        :}
    |
    TRUE:t OP_REL:op NUMBER:n  
        {:
            DefaultMutableTreeNode nodo = parser.createNodoObject(op+"",opright);
            nodo.add(parser.createNodoObject(t+"",tright));
            nodo.add(parser.createNodoObject(n+"",nright));
            RESULT = nodo;
        :}
    |
    /*STRING*/
    STRING:s1 OP_REL:op STRING:s2
        {:
            DefaultMutableTreeNode nodo = parser.createNodoObject(op+"",opright);
            nodo.add(parser.createNodoObject(s1+"",s1right));
            nodo.add(parser.createNodoObject(s2+"",s2right));
            RESULT = nodo;
        :}
    |
    STRING:s OP_REL:op FALSE:f 
        {:
            DefaultMutableTreeNode nodo = parser.createNodoObject(op+"",opright);
            nodo.add(parser.createNodoObject(s+"",sright));
            nodo.add(parser.createNodoObject(f+"",fright));
            RESULT = nodo;
        :}
    |
    STRING:s OP_REL:op TRUE:t
        {:
            DefaultMutableTreeNode nodo = parser.createNodoObject(op+"",opright);
            nodo.add(parser.createNodoObject(t+"",tright));
            nodo.add(parser.createNodoObject(s+"",sright));
            RESULT = nodo;
        :}
    |
    /* AL REVES */
    FALSE:f OP_REL:op STRING:s 
        {:
            DefaultMutableTreeNode nodo = parser.createNodoObject(op+"",opright);
            nodo.add(parser.createNodoObject(f+"",fright));
            nodo.add(parser.createNodoObject(s+"",sright));
            RESULT = nodo;
        :}
    |
    TRUE:t OP_REL:op STRING:s
        {:
            DefaultMutableTreeNode nodo = parser.createNodoObject(op+"",opright);
            nodo.add(parser.createNodoObject(t+"",tright));
            nodo.add(parser.createNodoObject(s+"",sright));
            RESULT = nodo;
        :}
    |
    /*TRUE - FALSE*/
    TRUE:t OP_REL:op FALSE:f 
        {:
            DefaultMutableTreeNode nodo = parser.createNodoObject(op+"",opright);
            nodo.add(parser.createNodoObject(t+"",tright));
            nodo.add(parser.createNodoObject(f+"",fright));
            RESULT = nodo;
        :}
    |
    TRUE:t1 OP_REL:op TRUE:t2 
        {:
            DefaultMutableTreeNode nodo = parser.createNodoObject(op+"",opright);
            nodo.add(parser.createNodoObject(t1+"",t1right));
            nodo.add(parser.createNodoObject(t2+"",t2right));
            RESULT = nodo;
        :}
    |
    FALSE:f1 OP_REL:op FALSE:f2 
        {:
            DefaultMutableTreeNode nodo = parser.createNodoObject(op+"",opright);
            nodo.add(parser.createNodoObject(f1+"",f1right));
            nodo.add(parser.createNodoObject(f2+"",f2right));
            RESULT = nodo;
        :}
    |
    FALSE:f OP_REL:op TRUE:t
        {:
            DefaultMutableTreeNode nodo = parser.createNodoObject(op+"",opright);
            nodo.add(parser.createNodoObject(f+"",fright));
            nodo.add(parser.createNodoObject(t+"",tright));
            RESULT = nodo;
        :}
    |
    error:err OP_REL {:
            String desc = "Error en sentencia booleana por izquierda";
            String mes = parser.errorMessage(desc, parser.getS());
            DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
            RESULT = nodo;
            parser.report_error(mes ,err);
        :}
    |
    OP_REL error:err {:
            String desc = "Error en sentencia booleana por derecha";
            String mes = parser.errorMessage(desc, parser.getS());
            DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
            RESULT = nodo;
            parser.report_error(mes ,err);
        :}
;

N_SENTENCIA_BOOLEANA_SWITCH::=
    ID:id OP_REL:op
        {:
            DefaultMutableTreeNode nodo = parser.createNodoObject(op+"",opright);
            nodo.add(parser.createNodoObject(id+"",idright));
            RESULT = nodo;
        :}
    |
    OP_REL:op ID:id
        {:
            DefaultMutableTreeNode nodo = parser.createNodoObject(op+"",opright);
            nodo.add(parser.createNodoObject(id+"",idright));
            RESULT = nodo;
        :}
    |
    STRING:s OP_REL:op 
        {:
            DefaultMutableTreeNode nodo = parser.createNodoObject(op+"",opright);
            nodo.add(parser.createNodoObject(s+"",sright));
            RESULT = nodo;
        :}
    |
    OP_REL:op STRING:s 
        {:
            DefaultMutableTreeNode nodo = parser.createNodoObject(op+"",opright);
            nodo.add(parser.createNodoObject(s+"",sright));
            RESULT = nodo;
        :}
    |
    OP_REL:op NUMBER:n 
        {:
            DefaultMutableTreeNode nodo = parser.createNodoObject(op+"",opright);
            nodo.add(parser.createNodoObject(n+"",nright));
            RESULT = nodo;
        :}
    |
    OP_REL:op FALSE:f 
        {:
            DefaultMutableTreeNode nodo = parser.createNodoObject(op+"",opright);
            nodo.add(parser.createNodoObject(f+"",fright));
            RESULT = nodo;
        :}
    |
    OP_REL:op TRUE:t 
        {:
            DefaultMutableTreeNode nodo = parser.createNodoObject(op+"",opright);
            nodo.add(parser.createNodoObject(t+"",tright));
            RESULT = nodo;
        :}
    |
    NUMBER:n OP_REL:op 
        {:
            DefaultMutableTreeNode nodo = parser.createNodoObject(op+"",opright);
            nodo.add(parser.createNodoObject(n+"",nright));
            RESULT = nodo;
        :}
    |
    NUMBER:n1 BETWEEN:b NUMBER:n2
        {:
            DefaultMutableTreeNode nodo = parser.createNodoObject(b+"",bright);
            nodo.add(parser.createNodoObject(n1+"",n1right));
            nodo.add(parser.createNodoObject(n2+"",n2right));
            RESULT = nodo;
        :}
    |
    ID:id1 BETWEEN:b ID:id2 
        {:
            DefaultMutableTreeNode nodo = parser.createNodoObject(b+"",bright);
            nodo.add(parser.createNodoObject(id1+"",id1right));
            nodo.add(parser.createNodoObject(id2+"",id2right));
            RESULT = nodo;
        :}
    |
    ID:id1 BETWEEN:b NUMBER:id2 
        {:
            DefaultMutableTreeNode nodo = parser.createNodoObject(b+"",bright);
            nodo.add(parser.createNodoObject(id1+"",id1right));
            nodo.add(parser.createNodoObject(id2+"",id2right));
            RESULT = nodo;
        :}
    |
    NUMBER:id1 BETWEEN:b ID:id2 
        {:
            DefaultMutableTreeNode nodo = parser.createNodoObject(b+"",bright);
            nodo.add(parser.createNodoObject(id1+"",id1right));
            nodo.add(parser.createNodoObject(id2+"",id2right));
            RESULT = nodo;
        :}
    |
    TRUE:t 
        {:
            DefaultMutableTreeNode nodo = parser.createNodoObject(t+"",tright);
            RESULT = nodo;
        :}
    | 
    FALSE:f 
        {:
            DefaultMutableTreeNode nodo = parser.createNodoObject(f+"",fright);
            RESULT = nodo;
        :}
    |
    CHAR_ELEMENT:f
        {:
            DefaultMutableTreeNode nodo = parser.createNodoObject(f+"",fright);
            RESULT = nodo;
        :}
    |
    NUMBER:f
        {:
            DefaultMutableTreeNode nodo = parser.createNodoObject(f+"",fright);
            RESULT = nodo;
        :}
    |
    error:err{:
        String desc = "Error en sentencia booleana del switch: falta identificador u operador relacional";
        String mes = parser.errorMessage(desc, parser.getS());
        DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
        RESULT = nodo;
        parser.report_error(mes ,err);
    :}
;

N_DECLARACION ::= 
    /*ID:id COLON ID:id2 
    {:
        DefaultMutableTreeNode nodo = parser.createNodoObject("ASSIGN",idright);
        nodo.add(parser.createNodoObject(id+"",idright));
        nodo.add(parser.createNodoObject(id2+"",id2right));
        RESULT = nodo;
    :}
    |*/
    //ID:id COLON NULL:nl 
    /*{:
        DefaultMutableTreeNode nodo = parser.createNodoObject("ASSIGN",idright);
        nodo.add(parser.createNodoObject(id+"",idright));
        nodo.add(parser.createNodoObject(nl+"",nlright));
        RESULT = nodo;
    :}
    |*/
    ID:id COLON N_SENTENCIA_BOOLEANA_ANIDADA:bn 
    {:
        DefaultMutableTreeNode nodo = parser.createNodoObject("ASSIGN",idright);
        nodo.add(parser.createNodoObject(id+"",idright));
        nodo.add((DefaultMutableTreeNode) bn);
        RESULT = nodo;
    :}
    |
    ID:id COLON EXPR_LIST:ex
    {:
        DefaultMutableTreeNode nodo = parser.createNodoObject("ASSIGN",idright);
        nodo.add(parser.createNodoObject(id+"",idright));
        nodo.add((DefaultMutableTreeNode) ex);
        RESULT = nodo;
    :}
    |
    //TIPO id,id,id
    INTENGER:i N_DECLARACION_ID:n
    {:
        ((DefaultMutableTreeNode)n).insert(parser.createNodoObject(i+"",iright), 0);
        ((DefaultMutableTreeNode)n).setUserObject(parser.createNodoObject("DECLR NEST/NO_VAL",iright));
        ((DefaultTreeModel) parser.sintaxTreeModel).nodeChanged(((DefaultMutableTreeNode)n));
        RESULT = (DefaultMutableTreeNode)n;

        /*DefaultMutableTreeNode nodo = parser.createNodo("Declaración Anidada");
        nodo.add(parser.createNodo(i+""));
        nodo.add((DefaultMutableTreeNode) de);
        RESULT = nodo;*/
    :}
    |
    BOOLEAN:i N_DECLARACION_ID:n
    {:
        ((DefaultMutableTreeNode)n).insert(parser.createNodoObject(i+"",iright), 0);
        ((DefaultMutableTreeNode)n).setUserObject(parser.createNodoObject("DECLR NEST/NO_VAL",iright));
        ((DefaultTreeModel) parser.sintaxTreeModel).nodeChanged(((DefaultMutableTreeNode)n));
        RESULT = (DefaultMutableTreeNode)n;
    :}
    |
    CHAR:i N_DECLARACION_ID:n
    {:
        ((DefaultMutableTreeNode)n).insert(parser.createNodoObject(i+"",iright), 0);
        ((DefaultMutableTreeNode)n).setUserObject(parser.createNodoObject("DECLR NEST/NO_VAL",iright));
        ((DefaultTreeModel) parser.sintaxTreeModel).nodeChanged(((DefaultMutableTreeNode)n));
        RESULT = (DefaultMutableTreeNode)n;
    :}
    |
    //int id: 2+3+5/2*4...
    INTENGER:i ID:id COLON EXPR_LIST:ex
    {:
        DefaultMutableTreeNode nodo = parser.createNodoObject("DECLR",idright);
        nodo.add(parser.createNodoObject(i+"",iright));
        nodo.add(parser.createNodoObject(id+"",idright));
        nodo.add((DefaultMutableTreeNode) ex);
        RESULT = nodo;
    :}
    |
    //bln id: ((4=7)and("hola"=id))
    N_BOOLEAN_ID:id N_BOOLEAN_VALUE:va 
    {:
        ((DefaultMutableTreeNode)id).add((DefaultMutableTreeNode) va);
        RESULT = id;
    :}
    |
    //chr id: 'a'
    CHAR:i ID:id COLON CHAR_ELEMENT:ch
    {:
        DefaultMutableTreeNode nodo = parser.createNodoObject("DECLR",idright);//DefaultMutableTreeNode nodo = parser.createNodo("DECLR");
        nodo.add(parser.createNodoObject(i+"",iright));
        nodo.add(parser.createNodoObject(id+"",idright));
        nodo.add(parser.createNodoObject(ch+"",chright));//nodo.add(parser.createNodo(ch+""));
        RESULT = nodo;
    :}
    |    
    /*Arreglos*/
    ID:id
    OPEN_SQR_BRACKET:m N_TO_FOR:n1 CLOSE_SQR_BRACKET
    COLON
    EXPR_LIST:ex
        {:
            DefaultMutableTreeNode nodo = parser.createNodoObject("ASSIGN ARRAY",idright);//DefaultMutableTreeNode nodo = parser.createNodo("ASSIGN ARRAY");
            DefaultMutableTreeNode mt = parser.createNodoObject(id+"",idright);//DefaultMutableTreeNode mt = parser.createNodo(id+"");
            mt.add(parser.createNodoObject(n1+"",mright));//mt.add(parser.createNodo(n1+""));
            nodo.add(mt);
            nodo.add((DefaultMutableTreeNode) ex);
            RESULT = nodo;
        :}
    |
    ID:id
    OPEN_SQR_BRACKET N_TO_FOR:n1 CLOSE_SQR_BRACKET
    COLON
    N_SENTENCIA_BOOLEANA_ANIDADA:ex
        {:
            DefaultMutableTreeNode nodo = parser.createNodoObject("ASSIGN ARRAY",idright);//DefaultMutableTreeNode nodo = parser.createNodo("ASSIGN ARRAY");
            DefaultMutableTreeNode mt = parser.createNodoObject(id+"",idright);//DefaultMutableTreeNode mt = parser.createNodo(id+"");
            mt.add(parser.createNodoObject(n1+"",idright));//mt.add(parser.createNodo(n1+""));
            nodo.add(mt);
            nodo.add((DefaultMutableTreeNode) ex);
            RESULT = nodo;
        :}
    |
    ID:id
    OPEN_SQR_BRACKET N_TO_FOR:n1 CLOSE_SQR_BRACKET
    COLON
    N_CALL_FUNCTION:ex
        {:
            DefaultMutableTreeNode nodo = parser.createNodoObject("ASSIGN ARRAY",idright);//DefaultMutableTreeNode nodo = parser.createNodo("ASSIGN ARRAY");
            DefaultMutableTreeNode mt = parser.createNodoObject(id+"",idright);//DefaultMutableTreeNode mt = parser.createNodo(id+"");
            mt.add(parser.createNodoObject(n1+"",idright));//mt.add(parser.createNodo(n1+""));
            nodo.add(mt);
            nodo.add((DefaultMutableTreeNode) ex);
            RESULT = nodo;
        :}
    |
    //solo declaracion variable: arr [1] Int id
    ARRAY :i
    OPEN_SQR_BRACKET N_TO_FOR:n1 CLOSE_SQR_BRACKET
    N_TIPOS_DECLARACION_MATRIZ:t
    ID:id
    {:
        DefaultMutableTreeNode nodo = parser.createNodoObject("DECLR ARRAY EMPTY",iright);//DefaultMutableTreeNode nodo = parser.createNodo("DECLR ARRAY EMPTY");
        DefaultMutableTreeNode ar = parser.createNodoObject(i+"",iright);//DefaultMutableTreeNode ar = parser.createNodo(i+"");
        ar.add(parser.createNodoObject(n1+"",iright));//ar.add(parser.createNodo(n1+""));
        nodo.add(ar);
        nodo.add((DefaultMutableTreeNode)t);
        nodo.add(parser.createNodoObject(id+"",idright));//nodo.add(parser.createNodo(id+""));
        RESULT = nodo;
    :}
    |
    //Con valor de una vez: arr Int id: [1,2,3,4...]
    ARRAY:i
    N_TIPOS_DECLARACION_MATRIZ:t
    ID:id COLON 
    OPEN_SQR_BRACKET
    N_ARREGLO:ar
    {:
        DefaultMutableTreeNode nodo = parser.createNodoObject("DECLR ARRAY",iright);//DefaultMutableTreeNode nodo = parser.createNodo("DECLR ARRAY");
        DefaultMutableTreeNode arr=parser.createNodoObject(i+"",iright);//DefaultMutableTreeNode arr=parser.createNodo(i+"");
        arr.add(parser.createNodoObject(""+((DefaultMutableTreeNode)ar).getChildCount(),iright));//arr.add(parser.createNodo(""+((DefaultMutableTreeNode)ar).getChildCount()));
        nodo.add(arr);
        nodo.add((DefaultMutableTreeNode)t);
        nodo.add(parser.createNodoObject(id+"",idright));//nodo.add(parser.createNodo(id+""));
        nodo.add((DefaultMutableTreeNode)ar);
        RESULT = nodo;
    :}
    |
    /*Matriz*/
    ID:id
    OPEN_SQR_BRACKET:m1 N_TO_FOR:n1 CLOSE_SQR_BRACKET
    OPEN_SQR_BRACKET:m2 N_TO_FOR:n2 CLOSE_SQR_BRACKET
    COLON
    EXPR_LIST:ex
        {:
            DefaultMutableTreeNode nodo = parser.createNodoObject("ASSIGN MATRIX",idright);//DefaultMutableTreeNode nodo = parser.createNodo("ASSIGN MATRIX");
            DefaultMutableTreeNode mt = parser.createNodoObject(id+"",idright);//DefaultMutableTreeNode mt = parser.createNodo(id+"");
            mt.add(parser.createNodoObject(n1+"",m1right));
            mt.add(parser.createNodoObject(n2+"",m2right));//mt.add(parser.createNodo(n2+""));
            nodo.add(mt);
            nodo.add((DefaultMutableTreeNode) ex);
            RESULT = nodo;
        :}
    |
    ID:id
    OPEN_SQR_BRACKET:m1 N_TO_FOR:n1 CLOSE_SQR_BRACKET
    OPEN_SQR_BRACKET:m2 N_TO_FOR:n2 CLOSE_SQR_BRACKET
    COLON
    N_SENTENCIA_BOOLEANA_ANIDADA:ex
        {:
            DefaultMutableTreeNode nodo = parser.createNodoObject("ASSIGN MATRIX",idright);//DefaultMutableTreeNode nodo = parser.createNodo("ASSIGN MATRIX");
            DefaultMutableTreeNode mt = parser.createNodoObject(id+"",idright);//DefaultMutableTreeNode mt = parser.createNodo(id+"");
            mt.add(parser.createNodoObject(n1+"",m1right));//mt.add(parser.createNodo(n1+""));
            mt.add(parser.createNodoObject(n2+"",m2right));//mt.add(parser.createNodo(n2+""));
            nodo.add(mt);
            nodo.add((DefaultMutableTreeNode) ex);
            RESULT = nodo;
        :}
    |
    ID:id
    OPEN_SQR_BRACKET:m1 N_TO_FOR:n1 CLOSE_SQR_BRACKET
    OPEN_SQR_BRACKET:m2 N_TO_FOR:n2 CLOSE_SQR_BRACKET
    COLON
    N_CALL_FUNCTION:ex
        {:
            DefaultMutableTreeNode nodo = parser.createNodoObject("ASSIGN MATRIX",idright);//DefaultMutableTreeNode nodo = parser.createNodo("ASSIGN MATRIX");
            DefaultMutableTreeNode mt = parser.createNodoObject(id+"",idright);//DefaultMutableTreeNode mt = parser.createNodo(id+"");
            mt.add(parser.createNodoObject(n1+"",m1right));//mt.add(parser.createNodo(n1+""));
            mt.add(parser.createNodoObject(n2+"",m2right));//mt.add(parser.createNodo(n2+""));
            nodo.add(mt);
            nodo.add((DefaultMutableTreeNode) ex);
            RESULT = nodo;
        :}
    |
    //solo declaracion variable: mtx [1][1] TIPO matriz
    MATRIX:i
    OPEN_SQR_BRACKET:m1 N_TO_FOR:n1 CLOSE_SQR_BRACKET
    OPEN_SQR_BRACKET:m2 N_TO_FOR:n2 CLOSE_SQR_BRACKET
    N_TIPOS_DECLARACION_MATRIZ:t
    ID:id
    {:
        DefaultMutableTreeNode nodo = parser.createNodoObject("DECLR MATRIX EMPTY",iright);//DefaultMutableTreeNode nodo = parser.createNodo("DECLR MATRIX EMPTY");
        DefaultMutableTreeNode mt = parser.createNodoObject(i+"",iright);//DefaultMutableTreeNode mt = parser.createNodo(i+"");
        mt.add(parser.createNodoObject(n1+"",m1right));//mt.add(parser.createNodo(n1+""));
        mt.add(parser.createNodoObject(n2+"",m2right));//mt.add(parser.createNodo(n2+""));
        nodo.add(mt);
        nodo.add((DefaultMutableTreeNode)t);
        nodo.add(parser.createNodoObject(id+"",idright));//nodo.add(parser.createNodo(id+""));
        RESULT = nodo;
    :}
    |
    //Con valor de una vez: mtx TIPO matriz:[...[A],[a],[B],b...]
    MATRIX:i
    N_TIPOS_DECLARACION_MATRIZ:t
    ID:id COLON 
    OPEN_SQR_BRACKET
    N_MATRIZ:m  
    CLOSE_SQR_BRACKET
    {:
        DefaultMutableTreeNode nodo = parser.createNodoObject("DECLR MATRIX",iright);//DefaultMutableTreeNode nodo = parser.createNodo("DECLR MATRIX");
        nodo.add(parser.createNodoObject(i+"",iright));//nodo.add(parser.createNodo(i+""));
        nodo.add((DefaultMutableTreeNode)t);
        nodo.add(parser.createNodoObject(id+"",idright));//nodo.add(parser.createNodo(id+""));
        nodo.add((DefaultMutableTreeNode)m);
        RESULT = nodo;
         /*((DefaultMutableTreeNode)n).insert(parser.createNodo(i+""),0);
        ((DefaultMutableTreeNode)n).setUserObject("FOR");
        ((DefaultTreeModel) parser.sintaxTreeModel).nodeChanged(((DefaultMutableTreeNode)n));
        RESULT = (DefaultMutableTreeNode)n;*/
    :}
    |
    /*FUNCIONES*/
    //id:funcion(p1,p2,p3)
    ID:e1 COLON N_CALL_FUNCTION:e2
    {:
        DefaultMutableTreeNode nodo = parser.createNodoObject("ASSIGN",e1right);//DefaultMutableTreeNode nodo = parser.createNodo("ASSIGN");
        nodo.add(parser.createNodoObject(e1+"",e1right));//nodo.add(parser.createNodo(e1+""));
        nodo.add((DefaultMutableTreeNode)e2);
        RESULT = nodo;
    :}
    |
    //int id: funcion(p1,p2,p3...)
    INTENGER:e1 ID:e2 COLON N_CALL_FUNCTION:e3
    {:
        DefaultMutableTreeNode nodo = parser.createNodoObject("DECLR",e1right);//DefaultMutableTreeNode nodo = parser.createNodo("DECLR");
        nodo.add(parser.createNodoObject(e1+"",e1right));//nodo.add(parser.createNodo(e1+""));
        nodo.add(parser.createNodoObject(e2+"",e2right));//nodo.add(parser.createNodo(e2+""));
        nodo.add((DefaultMutableTreeNode)e3);
        RESULT = nodo;
    :}
    |
    INTENGER COLON error:err{:
        String desc = "Falta identificador del int";
        String mes = parser.errorMessage(desc, parser.getS());
        DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
        RESULT = nodo;
        parser.report_error(mes ,err);
    :}
    |
    INTENGER ID error:err{:
        String desc = "Falta \":\" en la asignación del int";
        String mes = parser.errorMessage(desc, parser.getS());
        DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
        RESULT = nodo;
        parser.report_error(mes ,err);
    :}
    |
    //mtx TIPO id: funcion(p1,p2,p3...)
    MATRIX:i N_TIPOS_DECLARACION_MATRIZ:t ID:id COLON N_CALL_FUNCTION:f 
    {:
        DefaultMutableTreeNode nodo = parser.createNodoObject("DECLR MATRIX",iright);//DefaultMutableTreeNode nodo = parser.createNodo("DECLR MATRIX");
        nodo.add(parser.createNodoObject(i+"",iright));//nodo.add(parser.createNodo(i+""));
        nodo.add((DefaultMutableTreeNode)t);
        nodo.add(parser.createNodoObject(id+"",idright));//nodo.add(parser.createNodo(id+""));
        nodo.add((DefaultMutableTreeNode)f);
        RESULT = nodo;
    :}
    |
    MATRIX COLON error:err{:
        String desc = "Falta tipo de la matriz";
        String mes = parser.errorMessage(desc, parser.getS());
        DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
        RESULT = nodo;
        parser.report_error(mes ,err);
    :}
    |
    MATRIX N_TIPOS_DECLARACION_MATRIZ error:err{:
        String desc = "Falta \":\" en la asignación de la matriz";
        String mes = parser.errorMessage(desc, parser.getS());
        DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
        RESULT = nodo;
        parser.report_error(mes ,err);
    :}
      |
    MATRIX N_TIPOS_DECLARACION_MATRIZ COLON error:err{:
        String desc = "Falta id de la matriz";
        String mes = parser.errorMessage(desc, parser.getS());
        DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
        RESULT = nodo;
        parser.report_error(mes ,err);
    :}
    |
    //arr TIPO id: funcion(p1,p2,p3...)
    ARRAY:a N_TIPOS_DECLARACION_MATRIZ:t ID:id COLON N_CALL_FUNCTION:f 
    {:
        DefaultMutableTreeNode nodo = parser.createNodoObject("DECLR ARRAY",aright);//DefaultMutableTreeNode nodo = parser.createNodo("DECLR ARRAY");
        nodo.add(parser.createNodoObject(a+"",aright));//nodo.add(parser.createNodo(a+""));
        nodo.add((DefaultMutableTreeNode) t);
        nodo.add(parser.createNodoObject(id+"",idright));//nodo.add(parser.createNodo(id+""));
        nodo.add((DefaultMutableTreeNode) f);
        RESULT = nodo;
    :}
    |
    ARRAY COLON error:err{:
        String desc = "Fala tipo del array";
        String mes = parser.errorMessage(desc, parser.getS());
        DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
        RESULT = nodo;
        parser.report_error(mes ,err);
    :}
    |
    ARRAY N_TIPOS_DECLARACION_MATRIZ error:err{:
        String desc = "Falta \":\" en la asignación del array";
        String mes = parser.errorMessage(desc, parser.getS());
        DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
        RESULT = nodo;
        parser.report_error(mes ,err);
    :}
      |
    ARRAY N_TIPOS_DECLARACION_MATRIZ COLON error:err{:
        String desc = "Falta id del array";
        String mes = parser.errorMessage(desc, parser.getS());
        DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
        RESULT = nodo;
        parser.report_error(mes ,err);
    :}
    |
    //char id: funcion(p1,p2,p3...)
    CHAR:c ID:i COLON N_CALL_FUNCTION:f
    {:
        DefaultMutableTreeNode nodo = parser.createNodoObject("DECLR",iright);
        nodo.add(parser.createNodoObject(c+"",cright));//nodo.add(parser.createNodo(c+""));
        nodo.add(parser.createNodoObject(i+"",iright));//nodo.add(parser.createNodo(i+""));
        nodo.add((DefaultMutableTreeNode) f);
        RESULT = nodo;
    :}   
    |
    CHAR COLON error:err {:
        String desc = "Fala identificador del char";
        String mes = parser.errorMessage(desc, parser.getS());
        DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
        RESULT = nodo;
        parser.report_error(mes ,err);
    :}
    |
    CHAR ID error:err{:
        String desc = "Falta \":\" en la asignación del char";
        String mes = parser.errorMessage(desc, parser.getS());
        DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
        RESULT = nodo;
        parser.report_error(mes ,err);
    :}
;

N_DECLARACION_ID::=
    ID:id COMA N_DECLARACION_ID:ids
        {:
            ((DefaultMutableTreeNode)ids).insert(parser.createNodoObject(id+"",idright),0);//((DefaultMutableTreeNode)ids).insert(parser.createNodo(id+""),0);
            RESULT = ids;
        :}
    | 
    ID:id
        {:
            DefaultMutableTreeNode nodo = parser.createNodoObject("ids",idright);//DefaultMutableTreeNode nodo = parser.createNodo("ids");
            nodo.add(parser.createNodoObject(id+"",idright));//nodo.add(parser.createNodo(id+""));
            RESULT = nodo;
        :}
    |
    ID ID
    error:err{:
        String desc = "los ids deben ir separados por comas";
        String mes = parser.errorMessage(desc, parser.getS());
        DefaultMutableTreeNode nodo = parser.createNodo("DECLR");
        RESULT = nodo;
        parser.report_error(mes ,err);
    :}
;

N_VALOR_VARIABLE ::=
    NUMBER:e1 {: RESULT = (parser.createNodoObject(e1+"",e1right)); :}
    | 
    ID:e1 {: RESULT = (parser.createNodoObject(e1+"",e1right)); :}
    | 
    STRING:e1 {: RESULT = (parser.createNodoObject(e1+"",e1right)); :}
    |
    NULL:e1  {: RESULT = (parser.createNodoObject(e1+"",e1right)); :}
    |
    CHAR_ELEMENT:e1 {: RESULT = (parser.createNodoObject(e1+"",e1right)); :}
    |
    TRUE:e1    {: RESULT = (parser.createNodoObject(e1+"",e1right)); :}
    |
    FALSE:e1   {: RESULT = (parser.createNodoObject(e1+"",e1right)); :}
    |
;

N_TIPOS_DECLARACION_MATRIZ ::=
    INTENGER:e {: RESULT = (parser.createNodoObject(e+"",eright)); :}
    |
    BOOLEAN:e {: RESULT = (parser.createNodoObject(e+"",eright)); :}
    |
    CHAR:e {: RESULT = (parser.createNodoObject(e+"",eright)); :}
    |
    error:err{:
        String desc = "Solo se permiten Int, boolean y char, id en los arreglos";
        String mes = parser.errorMessage(desc, parser.getS());
        DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
        RESULT = nodo;
        parser.report_error(mes ,err);
    :}

;

//solo matrices de dos dimensiones
N_MATRIZ ::=  
    OPEN_SQR_BRACKET:b N_ARREGLO:n
    {:
        DefaultMutableTreeNode el=parser.createNodoObject("ELEMENTS",bright);//DefaultMutableTreeNode el=parser.createNodo("ELEMENTS");
        el.add((DefaultMutableTreeNode)n);
        RESULT = el;
    :}
    |
    OPEN_SQR_BRACKET N_ARREGLO:a COMA N_MATRIZ:n 
        {:
        ((DefaultMutableTreeNode)n).insert((DefaultMutableTreeNode)a,0);
        RESULT = n;
        :}
    |
    N_VALOR_VARIABLE:a COMA N_MATRIZ:n 
        {:
        ((DefaultMutableTreeNode)n).insert((DefaultMutableTreeNode)a,0);
        RESULT = n;
        :}
    | 
    N_VALOR_VARIABLE:n
        {:
        DefaultMutableTreeNode el=parser.createNodo("ELEMENTS");
        el.add(parser.createNodo(n+""));
        RESULT = el;
        :}
    |
    error:err{:
        String desc = "Solo se permiten arreglos de dos dimensiones";
        String mes = parser.errorMessage(desc, parser.getS());
        DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
        RESULT = nodo;
        parser.report_error(mes ,err);
        :}
;
N_ARREGLO ::=
    N_VALOR_VARIABLE:a COMA N_ARREGLO:n 
        {:
            ((DefaultMutableTreeNode)n).insert((DefaultMutableTreeNode)a,0);
            RESULT = n;
        :}
    | 
    N_VALOR_VARIABLE:a CLOSE_SQR_BRACKET:b
        {:
            DefaultMutableTreeNode el=parser.createNodoObject("ELEMENTS",bright);//DefaultMutableTreeNode el=parser.createNodo("ELEMENTS");
            el.add(parser.createNodoObject(a+"",bright));//el.add(parser.createNodo(a+""));
            RESULT = el;
        :}
    |
    N_VALOR_VARIABLE error:err{:
        RESULT = parser.createNodo("ERROR");
        String desc = "Estructura del arreglo incompleta";
        String mes = parser.errorMessage(desc, parser.getS());
        //DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
        RESULT = "ERROR";
        parser.report_error(mes ,err);
      :}
    
;

N_BOOLEAN_ID ::=
    BOOLEAN:bl ID:id COLON 
        {:
            DefaultMutableTreeNode n=parser.createNodoObject("DECLR",idright); //DefaultMutableTreeNode n=parser.createNodo("DECLR");  
            n.add(parser.createNodoObject(bl+ "",blright));//n.add(parser.createNodo(bl+ ""));
            n.add(parser.createNodoObject(id + "",idright));//n.add(parser.createNodo(id + ""));
            RESULT = n;
        :}
    |
    BOOLEAN error:err COLON{:
        String desc = "Falta el identificador del boolean en la declaracion";
        String mes = parser.errorMessage(desc, parser.getS());
        DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
        RESULT = nodo;
        parser.report_error(mes ,err);
    :}
    |
    BOOLEAN ID error:err{:
        String desc = "Falta \":\" en la declacion booleana";
        String mes = parser.errorMessage(desc, parser.getS());
        DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
        RESULT = nodo;
        parser.report_error(mes ,err);
    :}
;

N_BOOLEAN_VALUE::=
    FALSE:n
        {:
            RESULT = parser.createNodoObject(n + "",nright);//RESULT = parser.createNodo(n + "");
        :}
    | 
    TRUE:n
        {:
            RESULT = parser.createNodoObject(n + "",nright);//RESULT = parser.createNodo(n + "");
        :}
    | 
    N_SENTENCIA_BOOLEANA_ANIDADA:e 
        {:
            RESULT = e;
        :}
    | 
    
    ID:id OPEN_PARENTESIS N_ARGUMENTOS:ar CLOSE_PARENTESIS 
        {:
            DefaultMutableTreeNode nodo = parser.createNodoObject("N_value_boolean",idright);//DefaultMutableTreeNode nodo = parser.createNodo("N_value_boolean");
            nodo.add(parser.createNodoObject(id+"",idright));//nodo.add(parser.createNodo(id+""));
            nodo.add((DefaultMutableTreeNode)ar);
            RESULT = nodo;
        :}
    | 
    ID:id OPEN_PARENTESIS CLOSE_PARENTESIS
        {:
            DefaultMutableTreeNode nodo = parser.createNodoObject("N_value_boolean",idright);//DefaultMutableTreeNode nodo = parser.createNodo("N_value_boolean");
            nodo.add(parser.createNodoObject(id+"",idright));//nodo.add(parser.createNodo(id+""));
            RESULT = nodo;
        :}
    |
        error:err{:
        String desc = "Error en el valor booleno, tipo no compatible con Boolean";
        String mes = parser.errorMessage(desc, parser.getS());
        DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
        RESULT = nodo;
        parser.report_error(mes ,err);
        :}
;

N_ARGUMENTOS ::=
    ID:id COMA N_ARGUMENTOS:ar
        {:
           ((DefaultMutableTreeNode)ar).add(parser.createNodoObject(id+"",idright));//((DefaultMutableTreeNode)ar).add(parser.createNodo(id+""));
           RESULT = ar;
        :}
    | 
    ID:id PYC
        {:
            DefaultMutableTreeNode nodo = parser.createNodoObject("N_argumentos",idright);//DefaultMutableTreeNode nodo = parser.createNodo("N_argumentos");
            nodo.add(parser.createNodoObject(id+"",idright));//nodo.add(parser.createNodo(id+""));
            RESULT = nodo;
        :}
    |
       ID error:err {:
        String desc = "Falta PYC";
        String mes = parser.errorMessage(desc, parser.getS());
        DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
        RESULT = nodo;
        parser.report_error(mes ,err);
        :}
    |
        ID ID error:err {:
            String desc = "Los ids deben ir separados por coma";
            String mes = parser.errorMessage(desc, parser.getS());
            DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
            RESULT = nodo;
            parser.report_error(mes ,err);
        :}
    
;
/* -----------------------------OPERATORS--------------------------------- */
N_PRINT ::=
    OPEN_PARENTESIS PRINT error:err {:
        String desc = "Faltan los \":\" en el print";
        String mes = parser.errorMessage(desc, parser.getS());
        DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
        RESULT = nodo;
        parser.report_error(mes ,err);
        :}
    |
    OPEN_PARENTESIS PRINT  COLON  STRING:e N_PRINT_IMPRESS:n CLOSE_BLOCK error:err {:
        String desc = "Falta PYC en el print";
        String mes = parser.errorMessage(desc, parser.getS());
        DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
        RESULT = nodo;
        parser.report_error(mes ,err);
        :}

    |
    OPEN_PARENTESIS PRINT  COLON   N_TO_FOR  N_PRINT_IMPRESS:n CLOSE_BLOCK error:err {:
        String desc = "Falta PYC en el print";
        String mes = parser.errorMessage(desc, parser.getS());
        DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
        RESULT = nodo;
        parser.report_error(mes ,err);
        :}
    |

    OPEN_PARENTESIS
    PRINT:p
    COLON 
    STRING:e
    N_PRINT_IMPRESS:n
    CLOSE_BLOCK 
    PYC
    {:
        //Código mágico
        ((DefaultMutableTreeNode)n).insert(parser.createNodoObject(e+"",eright), 0);//((DefaultMutableTreeNode)n).insert(parser.createNodo(e+""), 0);
        DefaultMutableTreeNode node3 = new DefaultMutableTreeNode(((DefaultMutableTreeNode)n).getUserObject());
        ((DefaultMutableTreeNode)n).insert(node3, 1);
        //cambiar nombre, brutal!!!
        ((DefaultMutableTreeNode)n).setUserObject(parser.createNodoObject("PRINT",pright));
        ((DefaultTreeModel) parser.sintaxTreeModel).nodeChanged(((DefaultMutableTreeNode)n));
        RESULT = (DefaultMutableTreeNode)n;
    :}
    |
    OPEN_PARENTESIS
    PRINT:p
    COLON 
    N_TO_FOR:e
    N_PRINT_IMPRESS:n
    CLOSE_BLOCK 
    PYC
    {:
        //Código mágico
        ((DefaultMutableTreeNode)n).insert(parser.createNodoObject(e+"",eright), 0);//((DefaultMutableTreeNode)n).insert(parser.createNodo(e+""), 0);
        DefaultMutableTreeNode node3 = new DefaultMutableTreeNode(((DefaultMutableTreeNode)n).getUserObject());
        ((DefaultMutableTreeNode)n).insert(node3, 1);
        //cambiar nombre, brutal!!!
        ((DefaultMutableTreeNode)n).setUserObject(parser.createNodoObject("PRINT",pright));
        ((DefaultTreeModel) parser.sintaxTreeModel).nodeChanged(((DefaultMutableTreeNode)n));
        RESULT = (DefaultMutableTreeNode)n;
    :}
    |
    OPEN_PARENTESIS
    PRINT:p
    COLON 
    NEW_LINE:e
    N_PRINT_IMPRESS:n
    CLOSE_BLOCK 
    PYC
    {:
        //Código mágico
        ((DefaultMutableTreeNode)n).insert(parser.createNodoObject(e+"",eright), 0);//((DefaultMutableTreeNode)n).insert(parser.createNodo(e+""), 0);
        DefaultMutableTreeNode node3 = new DefaultMutableTreeNode(((DefaultMutableTreeNode)n).getUserObject());
        ((DefaultMutableTreeNode)n).insert(node3, 1);
        //cambiar nombre, brutal!!!
        ((DefaultMutableTreeNode)n).setUserObject(parser.createNodoObject("PRINT",pright));
        ((DefaultTreeModel) parser.sintaxTreeModel).nodeChanged(((DefaultMutableTreeNode)n));
        RESULT = (DefaultMutableTreeNode)n;
    :}
    | /*Print vacio*/
    OPEN_PARENTESIS PRINT:p COLON CLOSE_BLOCK  PYC
    {:
        DefaultMutableTreeNode nodo = parser.createNodoObject("PRINT",pright);//DefaultMutableTreeNode nodo = parser.createNodo("PRINT");
        RESULT = nodo;
    :}
;

N_PRINT_IMPRESS::=
    N_PRINT_IMPRESS:e1 OP_SUM N_VALOR_VARIABLE:n
    {:
        DefaultMutableTreeNode nodo = parser.createNodoObject(n+"",nright);//DefaultMutableTreeNode nodo = parser.createNodo(n+"");
        ((DefaultMutableTreeNode)e1).add(nodo);
        RESULT = e1;
    :}
    |
    OP_SUM N_VALOR_VARIABLE:n
    {:
        DefaultMutableTreeNode nodo = parser.createNodoObject(n+"",nright);//DefaultMutableTreeNode nodo = parser.createNodo(n+"");
        RESULT = nodo;
    :}
    |
    N_PRINT_IMPRESS:e1 OP_SUM NEW_LINE:nl
    {:
        DefaultMutableTreeNode nodo = parser.createNodoObject(nl+"",nlright);//DefaultMutableTreeNode nodo = parser.createNodo(nl+"");
        ((DefaultMutableTreeNode)e1).add(nodo);
        RESULT = e1;
    :}
    |
    OP_SUM:n NEW_LINE:nl
    {:
        DefaultMutableTreeNode nodo = parser.createNodoObject(nl+"",nlright);//DefaultMutableTreeNode nodo = parser.createNodo(nl+"");
        //((DefultMutableTreeNode)n).add(nodo);
        RESULT = nodo;
    :}
    |
    OP_SUM error:err{:
        String desc = "Falta cierre de PRINT o hay declaraciones no aceptadas\nDatos aceptados: String, chars, variables, números, saltos de linea (ln)";
        String mes = parser.errorMessage(desc, parser.getS());
        DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
        RESULT = nodo;        
        parser.report_error(mes ,err);
    :}
    | 
            OP_SUM ID:id
            OPEN_SQR_BRACKET N_TO_FOR:n CLOSE_SQR_BRACKET
                {:DefaultMutableTreeNode nodo = parser.createNodoObject(id+"",idright);//DefaultMutableTreeNode nodo = parser.createNodo(id+"");
                  nodo.add(parser.createNodoObject(n+"",nright));//nodo.add(parser.createNodo(n+""));
                  RESULT = nodo;:}
            |
            OP_SUM ID:id
            OPEN_SQR_BRACKET N_TO_FOR:n1 CLOSE_SQR_BRACKET
            OPEN_SQR_BRACKET N_TO_FOR:n2 CLOSE_SQR_BRACKET
                {:DefaultMutableTreeNode nodo = parser.createNodoObject(id+"",idright);//DefaultMutableTreeNode nodo = parser.createNodo(id+"");
                  nodo.add(parser.createNodoObject(n1+"",n1right));//nodo.add(parser.createNodo(n1+""));
                  nodo.add(parser.createNodoObject(n2+"",n2right));//nodo.add(parser.createNodo(n2+""));
                  RESULT = nodo;:}

    |
    {:
        DefaultMutableTreeNode nodo = parser.createNodo("");
        RESULT = nodo;
    :}
;

N_CIN ::=
    OPEN_PARENTESIS 
    CIN
    COLON 
    ID:id
    CLOSE_BLOCK 
    PYC 
    {:
        DefaultMutableTreeNode nodo = parser.createNodoObject("IN: "+id, idright);//DefaultMutableTreeNode nodo = parser.createNodo("IN: "+id);
        RESULT = nodo;
    :}
    |
    OPEN_PARENTESIS CIN
    error:err{:
        String desc = "Falta \":\" en el CIN";
        String mes = parser.errorMessage(desc, parser.getS());
        DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
        RESULT = nodo;
        parser.report_error(mes ,err);
    :}
    |
    OPEN_PARENTESIS CIN COLON
    error:err{:
        String desc = "Falta varibale en el CIN";
        String mes = parser.errorMessage(desc, parser.getS());
        DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
        RESULT = nodo;
        parser.report_error(mes ,err);
    :}
    |
    OPEN_PARENTESIS CIN COLON ID
    error:err {:
        String desc = "Valores de más. CIN solo llama a una variable o falta :)";
        String mes = parser.errorMessage(desc, parser.getS());
        DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
        RESULT = nodo;
        parser.report_error(mes ,err);
        
    :}
    |
    OPEN_PARENTESIS CIN COLON ID CLOSE_BLOCK error:err {:
        String desc = "Falta PYC";
        String mes = parser.errorMessage(desc, parser.getS());
        DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
        RESULT = nodo;
        parser.report_error(mes ,err);
    :}
    
;

/* ------------------------------MATHEMATICS--------------------------------- */

EXPR_LIST   ::= EXPR_LIST:e1 EXPR:e2 
                {:((DefaultMutableTreeNode)e2).insert((DefaultMutableTreeNode)e1,0);
                    RESULT = ((DefaultMutableTreeNode)e2);:}
            |OPEN_PARENTESIS EXPR_LIST:e1 CLOSE_PARENTESIS EXPR_LIST:e2
                {:
                    ((DefaultMutableTreeNode)e2).insert((DefaultMutableTreeNode)e1,0);
                    RESULT = ((DefaultMutableTreeNode)e2);
                :}
            | EXPR:e                     
                {: 
                    RESULT = e;
                :}
            |error: err CLOSE_PARENTESIS 
                {:
                    String desc = "Número de parentesis impares en la expresión";
                    String mes = parser.errorMessage(desc, parser.getS());
                    DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
                    RESULT = nodo;
                    parser.report_error(mes ,err);
                :}
            |OPEN_PARENTESIS error: err 
                {:
                    String desc = "Número de parentesis impares en la expresión";
                    String mes = parser.errorMessage(desc, parser.getS());
                    DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
                    RESULT = nodo;
                    parser.report_error(mes ,err);
                :}
           
;

EXPR        ::= OP_SUM:o  EXPR:e2 
                {:DefaultMutableTreeNode nodo = parser.createNodoObject(o+"",oright);//DefaultMutableTreeNode nodo = parser.createNodo(o+"");
                  //nodo.insert((DefaultMutableTreeNode)e1,0);
                  nodo.insert((DefaultMutableTreeNode)e2,0);
                RESULT = nodo;:}
            | EXPR:e1 OP_MULTI_DIV:o EXPR:e2
                {:DefaultMutableTreeNode nodo = parser.createNodoObject(o+"",oright);//DefaultMutableTreeNode nodo = parser.createNodo(o+"");
                  nodo.insert((DefaultMutableTreeNode)e1,0);
                  nodo.insert((DefaultMutableTreeNode)e2,1);
                RESULT = nodo;:}
            | OPEN_PARENTESIS EXPR_LIST:e CLOSE_PARENTESIS
                {: RESULT = e;:}
            | EXPR:e1 MOD:m EXPR:e2
                {:DefaultMutableTreeNode nodo = parser.createNodoObject("%",mright);//DefaultMutableTreeNode nodo = parser.createNodo("%");
                  nodo.insert((DefaultMutableTreeNode)e1,0);
                  nodo.insert((DefaultMutableTreeNode)e2,1);
                RESULT = nodo;:}
            | NUMBER:n
                {:DefaultMutableTreeNode nodo = parser.createNodoObject(n+"",nright);//DefaultMutableTreeNode nodo = parser.createNodo(n+"");
                  RESULT = nodo;:}
            | STRING:s
                {:DefaultMutableTreeNode nodo = parser.createNodoObject(s+"",sright);//DefaultMutableTreeNode nodo = parser.createNodo(s+"");
                  RESULT = nodo;:}
            | TRUE:b
                {:DefaultMutableTreeNode nodo = parser.createNodoObject(b+"",bright);//DefaultMutableTreeNode nodo = parser.createNodo(b+"");
                  RESULT = nodo;:}
            | FALSE:b
                {:DefaultMutableTreeNode nodo = parser.createNodoObject(b+"",bright);//DefaultMutableTreeNode nodo = parser.createNodo(b+"");
                  RESULT = nodo;:}
            | CHAR_ELEMENT:c
                {:DefaultMutableTreeNode nodo = parser.createNodoObject(c+"",cright);//DefaultMutableTreeNode nodo = parser.createNodo(c+"");
                  RESULT = nodo;:}
            | NULL:nl                        
                {:DefaultMutableTreeNode nodo = parser.createNodoObject(nl+"",nlright);//DefaultMutableTreeNode nodo = parser.createNodo(nl+"");
                  RESULT = nodo;:}
            | ID:nl
                {:DefaultMutableTreeNode nodo = parser.createNodoObject(nl+"",nlright);//DefaultMutableTreeNode nodo = parser.createNodo(nl+"");
                  RESULT = nodo;:}
            | 
            ID:id
            OPEN_SQR_BRACKET N_TO_FOR:n CLOSE_SQR_BRACKET
                {:DefaultMutableTreeNode nodo = parser.createNodoObject(id+"", idright);//DefaultMutableTreeNode nodo = parser.createNodo(id+"");
                  nodo.add(parser.createNodoObject(n+"", nright));//nodo.add(parser.createNodo(n+""));
                  RESULT = nodo;:}
            |
            ID:id
            OPEN_SQR_BRACKET:e1 N_TO_FOR:n1 CLOSE_SQR_BRACKET
            OPEN_SQR_BRACKET:e2 N_TO_FOR:n2 CLOSE_SQR_BRACKET
                {:DefaultMutableTreeNode nodo = parser.createNodoObject(id+"",idright);//DefaultMutableTreeNode nodo = parser.createNodo(id+"");
                  nodo.add(parser.createNodoObject(n1+"",e1right));//nodo.add(parser.createNodo(n1+""));
                  nodo.add(parser.createNodoObject(n2+"",e2right));//nodo.add(parser.createNodo(n2+""));
                  RESULT = nodo;:}
            |
            OP_SUM:su error:err{:
                String desc = "";
                desc = "Elemento para sumar/restar en la expresión no válida";
                String mes = parser.errorMessage(desc, parser.getS());
                DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
                RESULT = nodo;
                parser.report_error(mes ,err);
            :}
            |
            OP_MULTI_DIV:md error:err{:
                String  desc = "Elemento para multiplicar/división en la expresión no válida";
                String mes = parser.errorMessage(desc, parser.getS());
                DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
                RESULT = nodo;
                parser.report_error(mes ,err);
            :}
            |
            MOD error:err{:
                String  desc = "Elemento para sacar mod no es válido";
                String mes = parser.errorMessage(desc, parser.getS());
                DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
                RESULT = nodo;
                parser.report_error(mes ,err);
            :}
            /*| 
            ID:id
            OPEN_SQR_BRACKET error:err CLOSE_SQR_BRACKET {:
                String  desc = "Valor no valida para corchetes arreglo";
                String mes = parser.errorMessage(desc, parser.getS());
                DefaultMutableTreeNode nodo = parser.createNodo("ERROR");
                RESULT = nodo;
                parser.report_error(mes ,err);
            :}*/
;

